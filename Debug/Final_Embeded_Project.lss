
Final_Embeded_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004338  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000288  00800060  00004338  000043cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a2  008002e8  008002e8  00004654  2**0
                  ALLOC
  3 .stab         00002cf4  00000000  00000000  00004654  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e7c  00000000  00000000  00007348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  000081c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000250  00000000  00000000  000083c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b10  00000000  00000000  00008614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001782  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014b1  00000000  00000000  0000c8a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000dd58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000317  00000000  00000000  0000df78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a92  00000000  00000000  0000e28f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ed21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a8 12 	call	0x2550	; 0x2550 <main>
      8a:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 13 05 	call	0xa26	; 0xa26 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ed       	ldi	r26, 0xDF	; 223
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f ed       	ldi	r24, 0xDF	; 223
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ca 1e 	jmp	0x3d94	; 0x3d94 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f ed       	ldi	r22, 0xDF	; 223
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__gesf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__gesf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__gesf2+0x58>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__epilogue_restores__+0x18>

0000090a <__lesf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__lesf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__lesf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 7c 07 	call	0xef8	; 0xef8 <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__lesf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__epilogue_restores__+0x18>

0000096a <__floatsisf>:
     96a:	a8 e0       	ldi	r26, 0x08	; 8
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__prologue_saves__+0x12>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	da 01       	movw	r26, r20
     980:	c9 01       	movw	r24, r18
     982:	88 27       	eor	r24, r24
     984:	b7 fd       	sbrc	r27, 7
     986:	83 95       	inc	r24
     988:	99 27       	eor	r25, r25
     98a:	aa 27       	eor	r26, r26
     98c:	bb 27       	eor	r27, r27
     98e:	b8 2e       	mov	r11, r24
     990:	21 15       	cp	r18, r1
     992:	31 05       	cpc	r19, r1
     994:	41 05       	cpc	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	19 f4       	brne	.+6      	; 0x9a0 <__floatsisf+0x36>
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	3a c0       	rjmp	.+116    	; 0xa14 <__floatsisf+0xaa>
     9a0:	88 23       	and	r24, r24
     9a2:	a9 f0       	breq	.+42     	; 0x9ce <__floatsisf+0x64>
     9a4:	20 30       	cpi	r18, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	38 07       	cpc	r19, r24
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	48 07       	cpc	r20, r24
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	58 07       	cpc	r21, r24
     9b2:	29 f4       	brne	.+10     	; 0x9be <__floatsisf+0x54>
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	9f ec       	ldi	r25, 0xCF	; 207
     9bc:	30 c0       	rjmp	.+96     	; 0xa1e <__floatsisf+0xb4>
     9be:	ee 24       	eor	r14, r14
     9c0:	ff 24       	eor	r15, r15
     9c2:	87 01       	movw	r16, r14
     9c4:	e2 1a       	sub	r14, r18
     9c6:	f3 0a       	sbc	r15, r19
     9c8:	04 0b       	sbc	r16, r20
     9ca:	15 0b       	sbc	r17, r21
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__floatsisf+0x68>
     9ce:	79 01       	movw	r14, r18
     9d0:	8a 01       	movw	r16, r20
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	18 16       	cp	r1, r24
     9f0:	19 06       	cpc	r1, r25
     9f2:	84 f4       	brge	.+32     	; 0xa14 <__floatsisf+0xaa>
     9f4:	08 2e       	mov	r0, r24
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__floatsisf+0x96>
     9f8:	ee 0c       	add	r14, r14
     9fa:	ff 1c       	adc	r15, r15
     9fc:	00 1f       	adc	r16, r16
     9fe:	11 1f       	adc	r17, r17
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__floatsisf+0x8e>
     a04:	ed 82       	std	Y+5, r14	; 0x05
     a06:	fe 82       	std	Y+6, r15	; 0x06
     a08:	0f 83       	std	Y+7, r16	; 0x07
     a0a:	18 87       	std	Y+8, r17	; 0x08
     a0c:	c8 1a       	sub	r12, r24
     a0e:	d9 0a       	sbc	r13, r25
     a10:	dc 82       	std	Y+4, r13	; 0x04
     a12:	cb 82       	std	Y+3, r12	; 0x03
     a14:	ba 82       	std	Y+2, r11	; 0x02
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     a1e:	28 96       	adiw	r28, 0x08	; 8
     a20:	e9 e0       	ldi	r30, 0x09	; 9
     a22:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <__epilogue_restores__+0x12>

00000a26 <__fixsfsi>:
     a26:	ac e0       	ldi	r26, 0x0C	; 12
     a28:	b0 e0       	ldi	r27, 0x00	; 0
     a2a:	e9 e1       	ldi	r30, 0x19	; 25
     a2c:	f5 e0       	ldi	r31, 0x05	; 5
     a2e:	0c 94 d2 1e 	jmp	0x3da4	; 0x3da4 <__prologue_saves__+0x20>
     a32:	69 83       	std	Y+1, r22	; 0x01
     a34:	7a 83       	std	Y+2, r23	; 0x02
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	be 01       	movw	r22, r28
     a40:	6b 5f       	subi	r22, 0xFB	; 251
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	0e 94 04 07 	call	0xe08	; 0xe08 <__unpack_f>
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	61 f1       	breq	.+88     	; 0xaa6 <__fixsfsi+0x80>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	50 f1       	brcs	.+84     	; 0xaa6 <__fixsfsi+0x80>
     a52:	84 30       	cpi	r24, 0x04	; 4
     a54:	21 f4       	brne	.+8      	; 0xa5e <__fixsfsi+0x38>
     a56:	8e 81       	ldd	r24, Y+6	; 0x06
     a58:	88 23       	and	r24, r24
     a5a:	51 f1       	breq	.+84     	; 0xab0 <__fixsfsi+0x8a>
     a5c:	2e c0       	rjmp	.+92     	; 0xaba <__fixsfsi+0x94>
     a5e:	2f 81       	ldd	r18, Y+7	; 0x07
     a60:	38 85       	ldd	r19, Y+8	; 0x08
     a62:	37 fd       	sbrc	r19, 7
     a64:	20 c0       	rjmp	.+64     	; 0xaa6 <__fixsfsi+0x80>
     a66:	6e 81       	ldd	r22, Y+6	; 0x06
     a68:	2f 31       	cpi	r18, 0x1F	; 31
     a6a:	31 05       	cpc	r19, r1
     a6c:	1c f0       	brlt	.+6      	; 0xa74 <__fixsfsi+0x4e>
     a6e:	66 23       	and	r22, r22
     a70:	f9 f0       	breq	.+62     	; 0xab0 <__fixsfsi+0x8a>
     a72:	23 c0       	rjmp	.+70     	; 0xaba <__fixsfsi+0x94>
     a74:	8e e1       	ldi	r24, 0x1E	; 30
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	82 1b       	sub	r24, r18
     a7a:	93 0b       	sbc	r25, r19
     a7c:	29 85       	ldd	r18, Y+9	; 0x09
     a7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a80:	4b 85       	ldd	r20, Y+11	; 0x0b
     a82:	5c 85       	ldd	r21, Y+12	; 0x0c
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__fixsfsi+0x68>
     a86:	56 95       	lsr	r21
     a88:	47 95       	ror	r20
     a8a:	37 95       	ror	r19
     a8c:	27 95       	ror	r18
     a8e:	8a 95       	dec	r24
     a90:	d2 f7       	brpl	.-12     	; 0xa86 <__fixsfsi+0x60>
     a92:	66 23       	and	r22, r22
     a94:	b1 f0       	breq	.+44     	; 0xac2 <__fixsfsi+0x9c>
     a96:	50 95       	com	r21
     a98:	40 95       	com	r20
     a9a:	30 95       	com	r19
     a9c:	21 95       	neg	r18
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	4f 4f       	sbci	r20, 0xFF	; 255
     aa2:	5f 4f       	sbci	r21, 0xFF	; 255
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__fixsfsi+0x9c>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	09 c0       	rjmp	.+18     	; 0xac2 <__fixsfsi+0x9c>
     ab0:	2f ef       	ldi	r18, 0xFF	; 255
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	4f ef       	ldi	r20, 0xFF	; 255
     ab6:	5f e7       	ldi	r21, 0x7F	; 127
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__fixsfsi+0x9c>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e8       	ldi	r21, 0x80	; 128
     ac2:	b9 01       	movw	r22, r18
     ac4:	ca 01       	movw	r24, r20
     ac6:	2c 96       	adiw	r28, 0x0c	; 12
     ac8:	e2 e0       	ldi	r30, 0x02	; 2
     aca:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <__epilogue_restores__+0x20>

00000ace <__floatunsisf>:
     ace:	a8 e0       	ldi	r26, 0x08	; 8
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	ed e6       	ldi	r30, 0x6D	; 109
     ad4:	f5 e0       	ldi	r31, 0x05	; 5
     ad6:	0c 94 ca 1e 	jmp	0x3d94	; 0x3d94 <__prologue_saves__+0x10>
     ada:	7b 01       	movw	r14, r22
     adc:	8c 01       	movw	r16, r24
     ade:	61 15       	cp	r22, r1
     ae0:	71 05       	cpc	r23, r1
     ae2:	81 05       	cpc	r24, r1
     ae4:	91 05       	cpc	r25, r1
     ae6:	19 f4       	brne	.+6      	; 0xaee <__floatunsisf+0x20>
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	89 83       	std	Y+1, r24	; 0x01
     aec:	60 c0       	rjmp	.+192    	; 0xbae <__floatunsisf+0xe0>
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	8e e1       	ldi	r24, 0x1E	; 30
     af4:	c8 2e       	mov	r12, r24
     af6:	d1 2c       	mov	r13, r1
     af8:	dc 82       	std	Y+4, r13	; 0x04
     afa:	cb 82       	std	Y+3, r12	; 0x03
     afc:	ed 82       	std	Y+5, r14	; 0x05
     afe:	fe 82       	std	Y+6, r15	; 0x06
     b00:	0f 83       	std	Y+7, r16	; 0x07
     b02:	18 87       	std	Y+8, r17	; 0x08
     b04:	c8 01       	movw	r24, r16
     b06:	b7 01       	movw	r22, r14
     b08:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__clzsi2>
     b0c:	fc 01       	movw	r30, r24
     b0e:	31 97       	sbiw	r30, 0x01	; 1
     b10:	f7 ff       	sbrs	r31, 7
     b12:	3b c0       	rjmp	.+118    	; 0xb8a <__floatunsisf+0xbc>
     b14:	22 27       	eor	r18, r18
     b16:	33 27       	eor	r19, r19
     b18:	2e 1b       	sub	r18, r30
     b1a:	3f 0b       	sbc	r19, r31
     b1c:	57 01       	movw	r10, r14
     b1e:	68 01       	movw	r12, r16
     b20:	02 2e       	mov	r0, r18
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__floatunsisf+0x5e>
     b24:	d6 94       	lsr	r13
     b26:	c7 94       	ror	r12
     b28:	b7 94       	ror	r11
     b2a:	a7 94       	ror	r10
     b2c:	0a 94       	dec	r0
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__floatunsisf+0x56>
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <__floatunsisf+0x7c>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	aa 1f       	adc	r26, r26
     b48:	bb 1f       	adc	r27, r27
     b4a:	2a 95       	dec	r18
     b4c:	d2 f7       	brpl	.-12     	; 0xb42 <__floatunsisf+0x74>
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	a1 09       	sbc	r26, r1
     b52:	b1 09       	sbc	r27, r1
     b54:	8e 21       	and	r24, r14
     b56:	9f 21       	and	r25, r15
     b58:	a0 23       	and	r26, r16
     b5a:	b1 23       	and	r27, r17
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	a1 05       	cpc	r26, r1
     b60:	b1 05       	cpc	r27, r1
     b62:	21 f0       	breq	.+8      	; 0xb6c <__floatunsisf+0x9e>
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	4a 29       	or	r20, r10
     b6e:	5b 29       	or	r21, r11
     b70:	6c 29       	or	r22, r12
     b72:	7d 29       	or	r23, r13
     b74:	4d 83       	std	Y+5, r20	; 0x05
     b76:	5e 83       	std	Y+6, r21	; 0x06
     b78:	6f 83       	std	Y+7, r22	; 0x07
     b7a:	78 87       	std	Y+8, r23	; 0x08
     b7c:	8e e1       	ldi	r24, 0x1E	; 30
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	8e 1b       	sub	r24, r30
     b82:	9f 0b       	sbc	r25, r31
     b84:	9c 83       	std	Y+4, r25	; 0x04
     b86:	8b 83       	std	Y+3, r24	; 0x03
     b88:	12 c0       	rjmp	.+36     	; 0xbae <__floatunsisf+0xe0>
     b8a:	30 97       	sbiw	r30, 0x00	; 0
     b8c:	81 f0       	breq	.+32     	; 0xbae <__floatunsisf+0xe0>
     b8e:	0e 2e       	mov	r0, r30
     b90:	04 c0       	rjmp	.+8      	; 0xb9a <__floatunsisf+0xcc>
     b92:	ee 0c       	add	r14, r14
     b94:	ff 1c       	adc	r15, r15
     b96:	00 1f       	adc	r16, r16
     b98:	11 1f       	adc	r17, r17
     b9a:	0a 94       	dec	r0
     b9c:	d2 f7       	brpl	.-12     	; 0xb92 <__floatunsisf+0xc4>
     b9e:	ed 82       	std	Y+5, r14	; 0x05
     ba0:	fe 82       	std	Y+6, r15	; 0x06
     ba2:	0f 83       	std	Y+7, r16	; 0x07
     ba4:	18 87       	std	Y+8, r17	; 0x08
     ba6:	ce 1a       	sub	r12, r30
     ba8:	df 0a       	sbc	r13, r31
     baa:	dc 82       	std	Y+4, r13	; 0x04
     bac:	cb 82       	std	Y+3, r12	; 0x03
     bae:	1a 82       	std	Y+2, r1	; 0x02
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__pack_f>
     bb8:	28 96       	adiw	r28, 0x08	; 8
     bba:	ea e0       	ldi	r30, 0x0A	; 10
     bbc:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <__epilogue_restores__+0x10>

00000bc0 <__clzsi2>:
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	7b 01       	movw	r14, r22
     bca:	8c 01       	movw	r16, r24
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	e8 16       	cp	r14, r24
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	f8 06       	cpc	r15, r24
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	08 07       	cpc	r16, r24
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	18 07       	cpc	r17, r24
     bdc:	88 f4       	brcc	.+34     	; 0xc00 <__clzsi2+0x40>
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	e8 16       	cp	r14, r24
     be2:	f1 04       	cpc	r15, r1
     be4:	01 05       	cpc	r16, r1
     be6:	11 05       	cpc	r17, r1
     be8:	31 f0       	breq	.+12     	; 0xbf6 <__clzsi2+0x36>
     bea:	28 f0       	brcs	.+10     	; 0xbf6 <__clzsi2+0x36>
     bec:	88 e0       	ldi	r24, 0x08	; 8
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	a0 e0       	ldi	r26, 0x00	; 0
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	17 c0       	rjmp	.+46     	; 0xc24 <__clzsi2+0x64>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	12 c0       	rjmp	.+36     	; 0xc24 <__clzsi2+0x64>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	e8 16       	cp	r14, r24
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	f8 06       	cpc	r15, r24
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 07       	cpc	r16, r24
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	18 07       	cpc	r17, r24
     c10:	28 f0       	brcs	.+10     	; 0xc1c <__clzsi2+0x5c>
     c12:	88 e1       	ldi	r24, 0x18	; 24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	a0 e0       	ldi	r26, 0x00	; 0
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__clzsi2+0x64>
     c1c:	80 e1       	ldi	r24, 0x10	; 16
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	20 e2       	ldi	r18, 0x20	; 32
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	28 1b       	sub	r18, r24
     c2e:	39 0b       	sbc	r19, r25
     c30:	4a 0b       	sbc	r20, r26
     c32:	5b 0b       	sbc	r21, r27
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__clzsi2+0x7e>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__clzsi2+0x76>
     c42:	f7 01       	movw	r30, r14
     c44:	e9 51       	subi	r30, 0x19	; 25
     c46:	fe 4f       	sbci	r31, 0xFE	; 254
     c48:	80 81       	ld	r24, Z
     c4a:	28 1b       	sub	r18, r24
     c4c:	31 09       	sbc	r19, r1
     c4e:	41 09       	sbc	r20, r1
     c50:	51 09       	sbc	r21, r1
     c52:	c9 01       	movw	r24, r18
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	08 95       	ret

00000c5e <__pack_f>:
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	fc 01       	movw	r30, r24
     c6a:	e4 80       	ldd	r14, Z+4	; 0x04
     c6c:	f5 80       	ldd	r15, Z+5	; 0x05
     c6e:	06 81       	ldd	r16, Z+6	; 0x06
     c70:	17 81       	ldd	r17, Z+7	; 0x07
     c72:	d1 80       	ldd	r13, Z+1	; 0x01
     c74:	80 81       	ld	r24, Z
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	48 f4       	brcc	.+18     	; 0xc8c <__pack_f+0x2e>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e1       	ldi	r26, 0x10	; 16
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 2a       	or	r14, r24
     c84:	f9 2a       	or	r15, r25
     c86:	0a 2b       	or	r16, r26
     c88:	1b 2b       	or	r17, r27
     c8a:	a5 c0       	rjmp	.+330    	; 0xdd6 <__pack_f+0x178>
     c8c:	84 30       	cpi	r24, 0x04	; 4
     c8e:	09 f4       	brne	.+2      	; 0xc92 <__pack_f+0x34>
     c90:	9f c0       	rjmp	.+318    	; 0xdd0 <__pack_f+0x172>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	21 f4       	brne	.+8      	; 0xc9e <__pack_f+0x40>
     c96:	ee 24       	eor	r14, r14
     c98:	ff 24       	eor	r15, r15
     c9a:	87 01       	movw	r16, r14
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <__pack_f+0x4a>
     c9e:	e1 14       	cp	r14, r1
     ca0:	f1 04       	cpc	r15, r1
     ca2:	01 05       	cpc	r16, r1
     ca4:	11 05       	cpc	r17, r1
     ca6:	19 f4       	brne	.+6      	; 0xcae <__pack_f+0x50>
     ca8:	e0 e0       	ldi	r30, 0x00	; 0
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	96 c0       	rjmp	.+300    	; 0xdda <__pack_f+0x17c>
     cae:	62 81       	ldd	r22, Z+2	; 0x02
     cb0:	73 81       	ldd	r23, Z+3	; 0x03
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
     cb4:	62 38       	cpi	r22, 0x82	; 130
     cb6:	79 07       	cpc	r23, r25
     cb8:	0c f0       	brlt	.+2      	; 0xcbc <__pack_f+0x5e>
     cba:	5b c0       	rjmp	.+182    	; 0xd72 <__pack_f+0x114>
     cbc:	22 e8       	ldi	r18, 0x82	; 130
     cbe:	3f ef       	ldi	r19, 0xFF	; 255
     cc0:	26 1b       	sub	r18, r22
     cc2:	37 0b       	sbc	r19, r23
     cc4:	2a 31       	cpi	r18, 0x1A	; 26
     cc6:	31 05       	cpc	r19, r1
     cc8:	2c f0       	brlt	.+10     	; 0xcd4 <__pack_f+0x76>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	2a c0       	rjmp	.+84     	; 0xd28 <__pack_f+0xca>
     cd4:	b8 01       	movw	r22, r16
     cd6:	a7 01       	movw	r20, r14
     cd8:	02 2e       	mov	r0, r18
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__pack_f+0x86>
     cdc:	76 95       	lsr	r23
     cde:	67 95       	ror	r22
     ce0:	57 95       	ror	r21
     ce2:	47 95       	ror	r20
     ce4:	0a 94       	dec	r0
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__pack_f+0x7e>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <__pack_f+0x9c>
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	aa 1f       	adc	r26, r26
     cf8:	bb 1f       	adc	r27, r27
     cfa:	2a 95       	dec	r18
     cfc:	d2 f7       	brpl	.-12     	; 0xcf2 <__pack_f+0x94>
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	a1 09       	sbc	r26, r1
     d02:	b1 09       	sbc	r27, r1
     d04:	8e 21       	and	r24, r14
     d06:	9f 21       	and	r25, r15
     d08:	a0 23       	and	r26, r16
     d0a:	b1 23       	and	r27, r17
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	a1 05       	cpc	r26, r1
     d10:	b1 05       	cpc	r27, r1
     d12:	21 f0       	breq	.+8      	; 0xd1c <__pack_f+0xbe>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e0       	ldi	r26, 0x00	; 0
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	9a 01       	movw	r18, r20
     d1e:	ab 01       	movw	r20, r22
     d20:	28 2b       	or	r18, r24
     d22:	39 2b       	or	r19, r25
     d24:	4a 2b       	or	r20, r26
     d26:	5b 2b       	or	r21, r27
     d28:	da 01       	movw	r26, r20
     d2a:	c9 01       	movw	r24, r18
     d2c:	8f 77       	andi	r24, 0x7F	; 127
     d2e:	90 70       	andi	r25, 0x00	; 0
     d30:	a0 70       	andi	r26, 0x00	; 0
     d32:	b0 70       	andi	r27, 0x00	; 0
     d34:	80 34       	cpi	r24, 0x40	; 64
     d36:	91 05       	cpc	r25, r1
     d38:	a1 05       	cpc	r26, r1
     d3a:	b1 05       	cpc	r27, r1
     d3c:	39 f4       	brne	.+14     	; 0xd4c <__pack_f+0xee>
     d3e:	27 ff       	sbrs	r18, 7
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <__pack_f+0xf6>
     d42:	20 5c       	subi	r18, 0xC0	; 192
     d44:	3f 4f       	sbci	r19, 0xFF	; 255
     d46:	4f 4f       	sbci	r20, 0xFF	; 255
     d48:	5f 4f       	sbci	r21, 0xFF	; 255
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <__pack_f+0xf6>
     d4c:	21 5c       	subi	r18, 0xC1	; 193
     d4e:	3f 4f       	sbci	r19, 0xFF	; 255
     d50:	4f 4f       	sbci	r20, 0xFF	; 255
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	e0 e0       	ldi	r30, 0x00	; 0
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	20 30       	cpi	r18, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	3a 07       	cpc	r19, r26
     d5e:	a0 e0       	ldi	r26, 0x00	; 0
     d60:	4a 07       	cpc	r20, r26
     d62:	a0 e4       	ldi	r26, 0x40	; 64
     d64:	5a 07       	cpc	r21, r26
     d66:	10 f0       	brcs	.+4      	; 0xd6c <__pack_f+0x10e>
     d68:	e1 e0       	ldi	r30, 0x01	; 1
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	79 01       	movw	r14, r18
     d6e:	8a 01       	movw	r16, r20
     d70:	27 c0       	rjmp	.+78     	; 0xdc0 <__pack_f+0x162>
     d72:	60 38       	cpi	r22, 0x80	; 128
     d74:	71 05       	cpc	r23, r1
     d76:	64 f5       	brge	.+88     	; 0xdd0 <__pack_f+0x172>
     d78:	fb 01       	movw	r30, r22
     d7a:	e1 58       	subi	r30, 0x81	; 129
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	d8 01       	movw	r26, r16
     d80:	c7 01       	movw	r24, r14
     d82:	8f 77       	andi	r24, 0x7F	; 127
     d84:	90 70       	andi	r25, 0x00	; 0
     d86:	a0 70       	andi	r26, 0x00	; 0
     d88:	b0 70       	andi	r27, 0x00	; 0
     d8a:	80 34       	cpi	r24, 0x40	; 64
     d8c:	91 05       	cpc	r25, r1
     d8e:	a1 05       	cpc	r26, r1
     d90:	b1 05       	cpc	r27, r1
     d92:	39 f4       	brne	.+14     	; 0xda2 <__pack_f+0x144>
     d94:	e7 fe       	sbrs	r14, 7
     d96:	0d c0       	rjmp	.+26     	; 0xdb2 <__pack_f+0x154>
     d98:	80 e4       	ldi	r24, 0x40	; 64
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <__pack_f+0x14c>
     da2:	8f e3       	ldi	r24, 0x3F	; 63
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 0e       	add	r14, r24
     dac:	f9 1e       	adc	r15, r25
     dae:	0a 1f       	adc	r16, r26
     db0:	1b 1f       	adc	r17, r27
     db2:	17 ff       	sbrs	r17, 7
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <__pack_f+0x162>
     db6:	16 95       	lsr	r17
     db8:	07 95       	ror	r16
     dba:	f7 94       	ror	r15
     dbc:	e7 94       	ror	r14
     dbe:	31 96       	adiw	r30, 0x01	; 1
     dc0:	87 e0       	ldi	r24, 0x07	; 7
     dc2:	16 95       	lsr	r17
     dc4:	07 95       	ror	r16
     dc6:	f7 94       	ror	r15
     dc8:	e7 94       	ror	r14
     dca:	8a 95       	dec	r24
     dcc:	d1 f7       	brne	.-12     	; 0xdc2 <__pack_f+0x164>
     dce:	05 c0       	rjmp	.+10     	; 0xdda <__pack_f+0x17c>
     dd0:	ee 24       	eor	r14, r14
     dd2:	ff 24       	eor	r15, r15
     dd4:	87 01       	movw	r16, r14
     dd6:	ef ef       	ldi	r30, 0xFF	; 255
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	6e 2f       	mov	r22, r30
     ddc:	67 95       	ror	r22
     dde:	66 27       	eor	r22, r22
     de0:	67 95       	ror	r22
     de2:	90 2f       	mov	r25, r16
     de4:	9f 77       	andi	r25, 0x7F	; 127
     de6:	d7 94       	ror	r13
     de8:	dd 24       	eor	r13, r13
     dea:	d7 94       	ror	r13
     dec:	8e 2f       	mov	r24, r30
     dee:	86 95       	lsr	r24
     df0:	49 2f       	mov	r20, r25
     df2:	46 2b       	or	r20, r22
     df4:	58 2f       	mov	r21, r24
     df6:	5d 29       	or	r21, r13
     df8:	b7 01       	movw	r22, r14
     dfa:	ca 01       	movw	r24, r20
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	08 95       	ret

00000e08 <__unpack_f>:
     e08:	fc 01       	movw	r30, r24
     e0a:	db 01       	movw	r26, r22
     e0c:	40 81       	ld	r20, Z
     e0e:	51 81       	ldd	r21, Z+1	; 0x01
     e10:	22 81       	ldd	r18, Z+2	; 0x02
     e12:	62 2f       	mov	r22, r18
     e14:	6f 77       	andi	r22, 0x7F	; 127
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	22 1f       	adc	r18, r18
     e1a:	22 27       	eor	r18, r18
     e1c:	22 1f       	adc	r18, r18
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	89 2f       	mov	r24, r25
     e22:	88 0f       	add	r24, r24
     e24:	82 2b       	or	r24, r18
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	99 1f       	adc	r25, r25
     e2c:	99 27       	eor	r25, r25
     e2e:	99 1f       	adc	r25, r25
     e30:	11 96       	adiw	r26, 0x01	; 1
     e32:	9c 93       	st	X, r25
     e34:	11 97       	sbiw	r26, 0x01	; 1
     e36:	21 15       	cp	r18, r1
     e38:	31 05       	cpc	r19, r1
     e3a:	a9 f5       	brne	.+106    	; 0xea6 <__unpack_f+0x9e>
     e3c:	41 15       	cp	r20, r1
     e3e:	51 05       	cpc	r21, r1
     e40:	61 05       	cpc	r22, r1
     e42:	71 05       	cpc	r23, r1
     e44:	11 f4       	brne	.+4      	; 0xe4a <__unpack_f+0x42>
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	37 c0       	rjmp	.+110    	; 0xeb8 <__unpack_f+0xb0>
     e4a:	82 e8       	ldi	r24, 0x82	; 130
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	13 96       	adiw	r26, 0x03	; 3
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24
     e54:	12 97       	sbiw	r26, 0x02	; 2
     e56:	9a 01       	movw	r18, r20
     e58:	ab 01       	movw	r20, r22
     e5a:	67 e0       	ldi	r22, 0x07	; 7
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	44 1f       	adc	r20, r20
     e62:	55 1f       	adc	r21, r21
     e64:	6a 95       	dec	r22
     e66:	d1 f7       	brne	.-12     	; 0xe5c <__unpack_f+0x54>
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	8c 93       	st	X, r24
     e6c:	0d c0       	rjmp	.+26     	; 0xe88 <__unpack_f+0x80>
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	44 1f       	adc	r20, r20
     e74:	55 1f       	adc	r21, r21
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	8d 91       	ld	r24, X+
     e7a:	9c 91       	ld	r25, X
     e7c:	13 97       	sbiw	r26, 0x03	; 3
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	13 96       	adiw	r26, 0x03	; 3
     e82:	9c 93       	st	X, r25
     e84:	8e 93       	st	-X, r24
     e86:	12 97       	sbiw	r26, 0x02	; 2
     e88:	20 30       	cpi	r18, 0x00	; 0
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	38 07       	cpc	r19, r24
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	48 07       	cpc	r20, r24
     e92:	80 e4       	ldi	r24, 0x40	; 64
     e94:	58 07       	cpc	r21, r24
     e96:	58 f3       	brcs	.-42     	; 0xe6e <__unpack_f+0x66>
     e98:	14 96       	adiw	r26, 0x04	; 4
     e9a:	2d 93       	st	X+, r18
     e9c:	3d 93       	st	X+, r19
     e9e:	4d 93       	st	X+, r20
     ea0:	5c 93       	st	X, r21
     ea2:	17 97       	sbiw	r26, 0x07	; 7
     ea4:	08 95       	ret
     ea6:	2f 3f       	cpi	r18, 0xFF	; 255
     ea8:	31 05       	cpc	r19, r1
     eaa:	79 f4       	brne	.+30     	; 0xeca <__unpack_f+0xc2>
     eac:	41 15       	cp	r20, r1
     eae:	51 05       	cpc	r21, r1
     eb0:	61 05       	cpc	r22, r1
     eb2:	71 05       	cpc	r23, r1
     eb4:	19 f4       	brne	.+6      	; 0xebc <__unpack_f+0xb4>
     eb6:	84 e0       	ldi	r24, 0x04	; 4
     eb8:	8c 93       	st	X, r24
     eba:	08 95       	ret
     ebc:	64 ff       	sbrs	r22, 4
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <__unpack_f+0xbe>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	8c 93       	st	X, r24
     ec4:	12 c0       	rjmp	.+36     	; 0xeea <__unpack_f+0xe2>
     ec6:	1c 92       	st	X, r1
     ec8:	10 c0       	rjmp	.+32     	; 0xeea <__unpack_f+0xe2>
     eca:	2f 57       	subi	r18, 0x7F	; 127
     ecc:	30 40       	sbci	r19, 0x00	; 0
     ece:	13 96       	adiw	r26, 0x03	; 3
     ed0:	3c 93       	st	X, r19
     ed2:	2e 93       	st	-X, r18
     ed4:	12 97       	sbiw	r26, 0x02	; 2
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	8c 93       	st	X, r24
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	66 1f       	adc	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	8a 95       	dec	r24
     ee6:	d1 f7       	brne	.-12     	; 0xedc <__unpack_f+0xd4>
     ee8:	70 64       	ori	r23, 0x40	; 64
     eea:	14 96       	adiw	r26, 0x04	; 4
     eec:	4d 93       	st	X+, r20
     eee:	5d 93       	st	X+, r21
     ef0:	6d 93       	st	X+, r22
     ef2:	7c 93       	st	X, r23
     ef4:	17 97       	sbiw	r26, 0x07	; 7
     ef6:	08 95       	ret

00000ef8 <__fpcmp_parts_f>:
     ef8:	1f 93       	push	r17
     efa:	dc 01       	movw	r26, r24
     efc:	fb 01       	movw	r30, r22
     efe:	9c 91       	ld	r25, X
     f00:	92 30       	cpi	r25, 0x02	; 2
     f02:	08 f4       	brcc	.+2      	; 0xf06 <__fpcmp_parts_f+0xe>
     f04:	47 c0       	rjmp	.+142    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f06:	80 81       	ld	r24, Z
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <__fpcmp_parts_f+0x16>
     f0c:	43 c0       	rjmp	.+134    	; 0xf94 <__fpcmp_parts_f+0x9c>
     f0e:	94 30       	cpi	r25, 0x04	; 4
     f10:	51 f4       	brne	.+20     	; 0xf26 <__fpcmp_parts_f+0x2e>
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	1c 91       	ld	r17, X
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	99 f5       	brne	.+102    	; 0xf80 <__fpcmp_parts_f+0x88>
     f1a:	81 81       	ldd	r24, Z+1	; 0x01
     f1c:	68 2f       	mov	r22, r24
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	61 1b       	sub	r22, r17
     f22:	71 09       	sbc	r23, r1
     f24:	3f c0       	rjmp	.+126    	; 0xfa4 <__fpcmp_parts_f+0xac>
     f26:	84 30       	cpi	r24, 0x04	; 4
     f28:	21 f0       	breq	.+8      	; 0xf32 <__fpcmp_parts_f+0x3a>
     f2a:	92 30       	cpi	r25, 0x02	; 2
     f2c:	31 f4       	brne	.+12     	; 0xf3a <__fpcmp_parts_f+0x42>
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	b9 f1       	breq	.+110    	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f32:	81 81       	ldd	r24, Z+1	; 0x01
     f34:	88 23       	and	r24, r24
     f36:	89 f1       	breq	.+98     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f38:	2d c0       	rjmp	.+90     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f3a:	11 96       	adiw	r26, 0x01	; 1
     f3c:	1c 91       	ld	r17, X
     f3e:	11 97       	sbiw	r26, 0x01	; 1
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	f1 f0       	breq	.+60     	; 0xf80 <__fpcmp_parts_f+0x88>
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	18 17       	cp	r17, r24
     f48:	d9 f4       	brne	.+54     	; 0xf80 <__fpcmp_parts_f+0x88>
     f4a:	12 96       	adiw	r26, 0x02	; 2
     f4c:	2d 91       	ld	r18, X+
     f4e:	3c 91       	ld	r19, X
     f50:	13 97       	sbiw	r26, 0x03	; 3
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	93 81       	ldd	r25, Z+3	; 0x03
     f56:	82 17       	cp	r24, r18
     f58:	93 07       	cpc	r25, r19
     f5a:	94 f0       	brlt	.+36     	; 0xf80 <__fpcmp_parts_f+0x88>
     f5c:	28 17       	cp	r18, r24
     f5e:	39 07       	cpc	r19, r25
     f60:	bc f0       	brlt	.+46     	; 0xf90 <__fpcmp_parts_f+0x98>
     f62:	14 96       	adiw	r26, 0x04	; 4
     f64:	8d 91       	ld	r24, X+
     f66:	9d 91       	ld	r25, X+
     f68:	0d 90       	ld	r0, X+
     f6a:	bc 91       	ld	r27, X
     f6c:	a0 2d       	mov	r26, r0
     f6e:	24 81       	ldd	r18, Z+4	; 0x04
     f70:	35 81       	ldd	r19, Z+5	; 0x05
     f72:	46 81       	ldd	r20, Z+6	; 0x06
     f74:	57 81       	ldd	r21, Z+7	; 0x07
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	4a 07       	cpc	r20, r26
     f7c:	5b 07       	cpc	r21, r27
     f7e:	18 f4       	brcc	.+6      	; 0xf86 <__fpcmp_parts_f+0x8e>
     f80:	11 23       	and	r17, r17
     f82:	41 f0       	breq	.+16     	; 0xf94 <__fpcmp_parts_f+0x9c>
     f84:	0a c0       	rjmp	.+20     	; 0xf9a <__fpcmp_parts_f+0xa2>
     f86:	82 17       	cp	r24, r18
     f88:	93 07       	cpc	r25, r19
     f8a:	a4 07       	cpc	r26, r20
     f8c:	b5 07       	cpc	r27, r21
     f8e:	40 f4       	brcc	.+16     	; 0xfa0 <__fpcmp_parts_f+0xa8>
     f90:	11 23       	and	r17, r17
     f92:	19 f0       	breq	.+6      	; 0xf9a <__fpcmp_parts_f+0xa2>
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <__fpcmp_parts_f+0xac>
     f9a:	6f ef       	ldi	r22, 0xFF	; 255
     f9c:	7f ef       	ldi	r23, 0xFF	; 255
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <__fpcmp_parts_f+0xac>
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	cb 01       	movw	r24, r22
     fa6:	1f 91       	pop	r17
     fa8:	08 95       	ret

00000faa <ADC_init>:
 *  Created on: Jan 7, 2024
 *      Author: Marwa
 */
#include "ADC.h"

void ADC_init(){
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62

ADMUX |=(1<<REFS0); //voltage reference from AVCC reference
     fb2:	a7 e2       	ldi	r26, 0x27	; 39
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e7 e2       	ldi	r30, 0x27	; 39
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	80 64       	ori	r24, 0x40	; 64
     fbe:	8c 93       	st	X, r24

ADCSRA |= (1<<ADEN); //Enable ADC
     fc0:	a6 e2       	ldi	r26, 0x26	; 38
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e6 e2       	ldi	r30, 0x26	; 38
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	80 68       	ori	r24, 0x80	; 128
     fcc:	8c 93       	st	X, r24

ADCSRA   |=(1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //Select 128 pre-scaler
     fce:	a6 e2       	ldi	r26, 0x26	; 38
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e6 e2       	ldi	r30, 0x26	; 38
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	87 60       	ori	r24, 0x07	; 7
     fda:	8c 93       	st	X, r24

	}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <ADC_read>:
uint16_t ADC_read(uint8_t channel_number){
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <ADC_read+0x6>
     fe8:	00 d0       	rcall	.+0      	; 0xfea <ADC_read+0x8>
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	8d 83       	std	Y+5, r24	; 0x05

	ADMUX &=0xF0; //clearing the old channel that was read
     ff2:	a7 e2       	ldi	r26, 0x27	; 39
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e7 e2       	ldi	r30, 0x27	; 39
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 7f       	andi	r24, 0xF0	; 240
     ffe:	8c 93       	st	X, r24

	ADMUX|=channel_number; //define the new ADC channel to read
    1000:	a7 e2       	ldi	r26, 0x27	; 39
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e7 e2       	ldi	r30, 0x27	; 39
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	90 81       	ld	r25, Z
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	89 2b       	or	r24, r25
    100e:	8c 93       	st	X, r24

	DDRA &=~ (1<< channel_number); // set the channel pin as input
    1010:	aa e3       	ldi	r26, 0x3A	; 58
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	ea e3       	ldi	r30, 0x3A	; 58
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8d 81       	ldd	r24, Y+5	; 0x05
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <ADC_read+0x4c>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <ADC_read+0x48>
    1032:	80 95       	com	r24
    1034:	84 23       	and	r24, r20
    1036:	8c 93       	st	X, r24

	//start conversion from analog to digital
	ADCSRA |= (1<<ADSC);
    1038:	a6 e2       	ldi	r26, 0x26	; 38
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e6 e2       	ldi	r30, 0x26	; 38
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	80 64       	ori	r24, 0x40	; 64
    1044:	8c 93       	st	X, r24

	while (  (ADCSRA & (1<<ADIF)) ==0  ); //wait to finish conversion
    1046:	e6 e2       	ldi	r30, 0x26	; 38
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	88 2f       	mov	r24, r24
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	80 71       	andi	r24, 0x10	; 16
    1052:	90 70       	andi	r25, 0x00	; 0
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	b9 f3       	breq	.-18     	; 0x1046 <ADC_read+0x64>

	uint8_t temp_L =0;// temporary variable to save Lower bits
    1058:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t temp_H =0;// temporary variable to save Higher bits
    105a:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t temp_full=0;//temporary variable to save the whole value of the conversion
    105c:	1a 82       	std	Y+2, r1	; 0x02
    105e:	19 82       	std	Y+1, r1	; 0x01
	//put value in digital volt value

	temp_L = ADCL; //Read Lower First
    1060:	e4 e2       	ldi	r30, 0x24	; 36
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8c 83       	std	Y+4, r24	; 0x04
	temp_H = ADCH;
    1068:	e5 e2       	ldi	r30, 0x25	; 37
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8b 83       	std	Y+3, r24	; 0x03

	temp_full = temp_H; // put Hight to the first 2 bits in the 16-bit variable called digital_volt_value
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	89 83       	std	Y+1, r24	; 0x01
	temp_full = temp_full << 8 ; // move the 2-bit to the left by 8
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	98 2f       	mov	r25, r24
    1080:	88 27       	eor	r24, r24
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01
	temp_full |= temp_L ; //put the lower 8-bit values then
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	82 2b       	or	r24, r18
    1092:	93 2b       	or	r25, r19
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01


	ADCSRA |= (1<<ADIF); //clear the flag
    1098:	a6 e2       	ldi	r26, 0x26	; 38
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e6 e2       	ldi	r30, 0x26	; 38
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	80 61       	ori	r24, 0x10	; 16
    10a4:	8c 93       	st	X, r24
	return temp_full;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <mapping>:
uint16_t mapping(uint16_t x){
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <mapping+0x6>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
	//mapping (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
	return ((((x - 0)*(100UL - 40UL))/(1024UL - 0)) + 40UL);
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	cc 01       	movw	r24, r24
    10ce:	a0 e0       	ldi	r26, 0x00	; 0
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	2c e3       	ldi	r18, 0x3C	; 60
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__mulsi3>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	07 2e       	mov	r0, r23
    10e8:	7a e0       	ldi	r23, 0x0A	; 10
    10ea:	b6 95       	lsr	r27
    10ec:	a7 95       	ror	r26
    10ee:	97 95       	ror	r25
    10f0:	87 95       	ror	r24
    10f2:	7a 95       	dec	r23
    10f4:	d1 f7       	brne	.-12     	; 0x10ea <mapping+0x30>
    10f6:	70 2d       	mov	r23, r0
    10f8:	88 96       	adiw	r24, 0x28	; 40
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <I2C_Init>:


#include "I2C_Master_H_file.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
    1110:	00 e2       	ldi	r16, 0x20	; 32
    1112:	10 e0       	ldi	r17, 0x00	; 0
    1114:	e1 e2       	ldi	r30, 0x21	; 33
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	10 82       	st	Z, r1
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	50 e4       	ldi	r21, 0x40	; 64
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	80 e8       	ldi	r24, 0x80	; 128
    1128:	92 e4       	ldi	r25, 0x42	; 66
    112a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	bc 01       	movw	r22, r24
    1134:	cd 01       	movw	r24, r26
    1136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	f8 01       	movw	r30, r16
    1140:	80 83       	st	Z, r24
}
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	08 95       	ret

0000114c <I2C_Start>:


uint8_t I2C_Start(char write_address)						/* I2C start function */
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <I2C_Start+0x6>
    1152:	0f 92       	push	r0
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
    115a:	e6 e5       	ldi	r30, 0x56	; 86
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	84 ea       	ldi	r24, 0xA4	; 164
    1160:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
    1162:	e6 e5       	ldi	r30, 0x56	; 86
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	88 23       	and	r24, r24
    116a:	dc f7       	brge	.-10     	; 0x1162 <I2C_Start+0x16>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    116c:	e1 e2       	ldi	r30, 0x21	; 33
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 7f       	andi	r24, 0xF8	; 248
    1174:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	88 30       	cpi	r24, 0x08	; 8
    117a:	11 f0       	breq	.+4      	; 0x1180 <I2C_Start+0x34>
	return 0;												/* If not then return 0 to indicate start condition fail */
    117c:	1b 82       	std	Y+3, r1	; 0x03
    117e:	20 c0       	rjmp	.+64     	; 0x11c0 <I2C_Start+0x74>
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
    1180:	e3 e2       	ldi	r30, 0x23	; 35
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    1188:	e6 e5       	ldi	r30, 0x56	; 86
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	84 e8       	ldi	r24, 0x84	; 132
    118e:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    1190:	e6 e5       	ldi	r30, 0x56	; 86
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	88 23       	and	r24, r24
    1198:	dc f7       	brge	.-10     	; 0x1190 <I2C_Start+0x44>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    119a:	e1 e2       	ldi	r30, 0x21	; 33
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	88 7f       	andi	r24, 0xF8	; 248
    11a2:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	88 31       	cpi	r24, 0x18	; 24
    11a8:	19 f4       	brne	.+6      	; 0x11b0 <I2C_Start+0x64>
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	8b 83       	std	Y+3, r24	; 0x03
    11ae:	08 c0       	rjmp	.+16     	; 0x11c0 <I2C_Start+0x74>
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	80 32       	cpi	r24, 0x20	; 32
    11b4:	19 f4       	brne	.+6      	; 0x11bc <I2C_Start+0x70>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	8b 83       	std	Y+3, r24	; 0x03
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <I2C_Start+0x74>
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	8b 83       	std	Y+3, r24	; 0x03
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char read_address)				/* I2C repeated start function */
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <I2C_Repeated_Start+0x6>
    11d4:	0f 92       	push	r0
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
    11dc:	e6 e5       	ldi	r30, 0x56	; 86
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	84 ea       	ldi	r24, 0xA4	; 164
    11e2:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
    11e4:	e6 e5       	ldi	r30, 0x56	; 86
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	88 23       	and	r24, r24
    11ec:	dc f7       	brge	.-10     	; 0x11e4 <I2C_Repeated_Start+0x16>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    11ee:	e1 e2       	ldi	r30, 0x21	; 33
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	88 7f       	andi	r24, 0xF8	; 248
    11f6:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	80 31       	cpi	r24, 0x10	; 16
    11fc:	11 f0       	breq	.+4      	; 0x1202 <I2C_Repeated_Start+0x34>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
    11fe:	1b 82       	std	Y+3, r1	; 0x03
    1200:	20 c0       	rjmp	.+64     	; 0x1242 <I2C_Repeated_Start+0x74>
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
    1202:	e3 e2       	ldi	r30, 0x23	; 35
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    120a:	e6 e5       	ldi	r30, 0x56	; 86
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	84 e8       	ldi	r24, 0x84	; 132
    1210:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    1212:	e6 e5       	ldi	r30, 0x56	; 86
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	88 23       	and	r24, r24
    121a:	dc f7       	brge	.-10     	; 0x1212 <I2C_Repeated_Start+0x44>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    121c:	e1 e2       	ldi	r30, 0x21	; 33
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	88 7f       	andi	r24, 0xF8	; 248
    1224:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	80 34       	cpi	r24, 0x40	; 64
    122a:	19 f4       	brne	.+6      	; 0x1232 <I2C_Repeated_Start+0x64>
	return 1;												/* If yes then return 1 to indicate ack received */
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	8b 83       	std	Y+3, r24	; 0x03
    1230:	08 c0       	rjmp	.+16     	; 0x1242 <I2C_Repeated_Start+0x74>
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	80 32       	cpi	r24, 0x20	; 32
    1236:	19 f4       	brne	.+6      	; 0x123e <I2C_Repeated_Start+0x70>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	8b 83       	std	Y+3, r24	; 0x03
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <I2C_Repeated_Start+0x74>
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	8b 83       	std	Y+3, r24	; 0x03
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
    1258:	e6 e5       	ldi	r30, 0x56	; 86
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	84 e9       	ldi	r24, 0x94	; 148
    125e:	80 83       	st	Z, r24
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */
    1260:	e6 e5       	ldi	r30, 0x56	; 86
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	80 71       	andi	r24, 0x10	; 16
    126c:	90 70       	andi	r25, 0x00	; 0
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	b9 f7       	brne	.-18     	; 0x1260 <I2C_Stop+0x10>
}
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <I2C_Start_Wait>:

void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <I2C_Start_Wait+0x6>
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    1284:	e6 e5       	ldi	r30, 0x56	; 86
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	84 ea       	ldi	r24, 0xA4	; 164
    128a:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
    128c:	e6 e5       	ldi	r30, 0x56	; 86
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	88 23       	and	r24, r24
    1294:	dc f7       	brge	.-10     	; 0x128c <I2C_Start_Wait+0x14>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    1296:	e1 e2       	ldi	r30, 0x21	; 33
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 7f       	andi	r24, 0xF8	; 248
    129e:	89 83       	std	Y+1, r24	; 0x01
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	88 30       	cpi	r24, 0x08	; 8
    12a4:	79 f7       	brne	.-34     	; 0x1284 <I2C_Start_Wait+0xc>
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
    12a6:	e3 e2       	ldi	r30, 0x23	; 35
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	80 83       	st	Z, r24
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    12ae:	e6 e5       	ldi	r30, 0x56	; 86
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	84 e8       	ldi	r24, 0x84	; 132
    12b4:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
    12b6:	e6 e5       	ldi	r30, 0x56	; 86
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	88 23       	and	r24, r24
    12be:	dc f7       	brge	.-10     	; 0x12b6 <I2C_Start_Wait+0x3e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    12c0:	e1 e2       	ldi	r30, 0x21	; 33
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	88 7f       	andi	r24, 0xF8	; 248
    12c8:	89 83       	std	Y+1, r24	; 0x01
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	88 31       	cpi	r24, 0x18	; 24
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <I2C_Start_Wait+0x5e>
		{
			I2C_Stop();										/* If not then generate stop condition */
    12d0:	0e 94 28 09 	call	0x1250	; 0x1250 <I2C_Stop>
    12d4:	d7 cf       	rjmp	.-82     	; 0x1284 <I2C_Start_Wait+0xc>
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <I2C_Write>:
}

uint8_t I2C_Write(char data)								/* I2C write function */
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <I2C_Write+0x6>
    12e6:	0f 92       	push	r0
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
    12ee:	e3 e2       	ldi	r30, 0x23	; 35
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    12f6:	e6 e5       	ldi	r30, 0x56	; 86
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	84 e8       	ldi	r24, 0x84	; 132
    12fc:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    12fe:	e6 e5       	ldi	r30, 0x56	; 86
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	dc f7       	brge	.-10     	; 0x12fe <I2C_Write+0x1e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    1308:	e1 e2       	ldi	r30, 0x21	; 33
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	88 7f       	andi	r24, 0xF8	; 248
    1310:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	88 32       	cpi	r24, 0x28	; 40
    1316:	11 f4       	brne	.+4      	; 0x131c <I2C_Write+0x3c>
	return 0;												/* If yes then return 0 to indicate ack received */
    1318:	1b 82       	std	Y+3, r1	; 0x03
    131a:	08 c0       	rjmp	.+16     	; 0x132c <I2C_Write+0x4c>
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	80 33       	cpi	r24, 0x30	; 48
    1320:	19 f4       	brne	.+6      	; 0x1328 <I2C_Write+0x48>
	return 1;												/* If yes then return 1 to indicate nack received */
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	02 c0       	rjmp	.+4      	; 0x132c <I2C_Write+0x4c>
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	8b 83       	std	Y+3, r24	; 0x03
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <I2C_Read_Ack>:

uint8_t I2C_Read_Ack()											/* I2C read ack function */
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
    1342:	e6 e5       	ldi	r30, 0x56	; 86
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	84 ec       	ldi	r24, 0xC4	; 196
    1348:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    134a:	e6 e5       	ldi	r30, 0x56	; 86
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	88 23       	and	r24, r24
    1352:	dc f7       	brge	.-10     	; 0x134a <I2C_Read_Ack+0x10>
	return TWDR;											/* Return received data */
    1354:	e3 e2       	ldi	r30, 0x23	; 35
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <I2C_Read_Nack>:

uint8_t I2C_Read_Nack()										/* I2C read nack function */
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
    1368:	e6 e5       	ldi	r30, 0x56	; 86
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	84 e8       	ldi	r24, 0x84	; 132
    136e:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    1370:	e6 e5       	ldi	r30, 0x56	; 86
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	88 23       	and	r24, r24
    1378:	dc f7       	brge	.-10     	; 0x1370 <I2C_Read_Nack+0x10>
	return TWDR;											/* Return received data */
    137a:	e3 e2       	ldi	r30, 0x23	; 35
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
}
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <keypad_init>:
 *      Author: Marwa
 */

#include"KEYPAD.h"

void keypad_init(){
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	// defining that following pins are input pins by giving the bit register zero using clear bit function
	DDRC=0b00111100; //make all rows as output (c5,c4,c3,c2)
    138e:	e4 e3       	ldi	r30, 0x34	; 52
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	8c e3       	ldi	r24, 0x3C	; 60
    1394:	80 83       	st	Z, r24
	DDRD=0x00; //make all columns input (target: D7,D6,D5,D3)
    1396:	e1 e3       	ldi	r30, 0x31	; 49
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	10 82       	st	Z, r1
	PORTD=0b11101000; // make sure that all switches are turned off (pull up)
    139c:	e2 e3       	ldi	r30, 0x32	; 50
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	88 ee       	ldi	r24, 0xE8	; 232
    13a2:	80 83       	st	Z, r24
}
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <detect_sw>:
volatile uint8_t detect_sw(){
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	0f 92       	push	r0
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t sw;
	CLEAR_BIT(PORTC,5);
    13b4:	a5 e3       	ldi	r26, 0x35	; 53
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e5 e3       	ldi	r30, 0x35	; 53
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8f 7d       	andi	r24, 0xDF	; 223
    13c0:	8c 93       	st	X, r24
	PORTC|=(1<<4)|(1<<3)|(1<<2);
    13c2:	a5 e3       	ldi	r26, 0x35	; 53
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e3       	ldi	r30, 0x35	; 53
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8c 61       	ori	r24, 0x1C	; 28
    13ce:	8c 93       	st	X, r24
	if(!(GET_BIT(PIND,7))){sw=1;}
    13d0:	e0 e3       	ldi	r30, 0x30	; 48
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	88 23       	and	r24, r24
    13d8:	14 f0       	brlt	.+4      	; 0x13de <detect_sw+0x34>
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,6))){sw=2;}
    13de:	e0 e3       	ldi	r30, 0x30	; 48
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	82 95       	swap	r24
    13e6:	86 95       	lsr	r24
    13e8:	86 95       	lsr	r24
    13ea:	83 70       	andi	r24, 0x03	; 3
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	81 70       	andi	r24, 0x01	; 1
    13f2:	90 70       	andi	r25, 0x00	; 0
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	11 f4       	brne	.+4      	; 0x13fc <detect_sw+0x52>
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,5))){sw=3;}
    13fc:	e0 e3       	ldi	r30, 0x30	; 48
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	82 95       	swap	r24
    1404:	86 95       	lsr	r24
    1406:	87 70       	andi	r24, 0x07	; 7
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	81 70       	andi	r24, 0x01	; 1
    140e:	90 70       	andi	r25, 0x00	; 0
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	11 f4       	brne	.+4      	; 0x1418 <detect_sw+0x6e>
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,3))){sw=4;}
    1418:	e0 e3       	ldi	r30, 0x30	; 48
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	86 95       	lsr	r24
    1420:	86 95       	lsr	r24
    1422:	86 95       	lsr	r24
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	81 70       	andi	r24, 0x01	; 1
    142a:	90 70       	andi	r25, 0x00	; 0
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	11 f4       	brne	.+4      	; 0x1434 <detect_sw+0x8a>
    1430:	84 e0       	ldi	r24, 0x04	; 4
    1432:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(PORTC,4);
    1434:	a5 e3       	ldi	r26, 0x35	; 53
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e3       	ldi	r30, 0x35	; 53
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8f 7e       	andi	r24, 0xEF	; 239
    1440:	8c 93       	st	X, r24
	PORTC|=(1<<5)|(1<<3)|(1<<2);
    1442:	a5 e3       	ldi	r26, 0x35	; 53
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e3       	ldi	r30, 0x35	; 53
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	8c 62       	ori	r24, 0x2C	; 44
    144e:	8c 93       	st	X, r24
	if(!(GET_BIT(PIND,7))){sw=5;}
    1450:	e0 e3       	ldi	r30, 0x30	; 48
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	88 23       	and	r24, r24
    1458:	14 f0       	brlt	.+4      	; 0x145e <detect_sw+0xb4>
    145a:	85 e0       	ldi	r24, 0x05	; 5
    145c:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,6))){sw=6;}
    145e:	e0 e3       	ldi	r30, 0x30	; 48
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	82 95       	swap	r24
    1466:	86 95       	lsr	r24
    1468:	86 95       	lsr	r24
    146a:	83 70       	andi	r24, 0x03	; 3
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	81 70       	andi	r24, 0x01	; 1
    1472:	90 70       	andi	r25, 0x00	; 0
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	11 f4       	brne	.+4      	; 0x147c <detect_sw+0xd2>
    1478:	86 e0       	ldi	r24, 0x06	; 6
    147a:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,5))){sw=7;}
    147c:	e0 e3       	ldi	r30, 0x30	; 48
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	82 95       	swap	r24
    1484:	86 95       	lsr	r24
    1486:	87 70       	andi	r24, 0x07	; 7
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	81 70       	andi	r24, 0x01	; 1
    148e:	90 70       	andi	r25, 0x00	; 0
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	11 f4       	brne	.+4      	; 0x1498 <detect_sw+0xee>
    1494:	87 e0       	ldi	r24, 0x07	; 7
    1496:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,3))){sw=8;}
    1498:	e0 e3       	ldi	r30, 0x30	; 48
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	86 95       	lsr	r24
    14a0:	86 95       	lsr	r24
    14a2:	86 95       	lsr	r24
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	81 70       	andi	r24, 0x01	; 1
    14aa:	90 70       	andi	r25, 0x00	; 0
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	11 f4       	brne	.+4      	; 0x14b4 <detect_sw+0x10a>
    14b0:	88 e0       	ldi	r24, 0x08	; 8
    14b2:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(PORTC,3);
    14b4:	a5 e3       	ldi	r26, 0x35	; 53
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e5 e3       	ldi	r30, 0x35	; 53
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	87 7f       	andi	r24, 0xF7	; 247
    14c0:	8c 93       	st	X, r24
	PORTC|=(1<<5)|(1<<4)|(1<<2);
    14c2:	a5 e3       	ldi	r26, 0x35	; 53
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e5 e3       	ldi	r30, 0x35	; 53
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	84 63       	ori	r24, 0x34	; 52
    14ce:	8c 93       	st	X, r24
	if(!(GET_BIT(PIND,7))){sw=9;}
    14d0:	e0 e3       	ldi	r30, 0x30	; 48
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	88 23       	and	r24, r24
    14d8:	14 f0       	brlt	.+4      	; 0x14de <detect_sw+0x134>
    14da:	89 e0       	ldi	r24, 0x09	; 9
    14dc:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,6))){sw=10;}
    14de:	e0 e3       	ldi	r30, 0x30	; 48
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	82 95       	swap	r24
    14e6:	86 95       	lsr	r24
    14e8:	86 95       	lsr	r24
    14ea:	83 70       	andi	r24, 0x03	; 3
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	81 70       	andi	r24, 0x01	; 1
    14f2:	90 70       	andi	r25, 0x00	; 0
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	11 f4       	brne	.+4      	; 0x14fc <detect_sw+0x152>
    14f8:	8a e0       	ldi	r24, 0x0A	; 10
    14fa:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,5))){sw=11;}
    14fc:	e0 e3       	ldi	r30, 0x30	; 48
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	82 95       	swap	r24
    1504:	86 95       	lsr	r24
    1506:	87 70       	andi	r24, 0x07	; 7
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	81 70       	andi	r24, 0x01	; 1
    150e:	90 70       	andi	r25, 0x00	; 0
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	11 f4       	brne	.+4      	; 0x1518 <detect_sw+0x16e>
    1514:	8b e0       	ldi	r24, 0x0B	; 11
    1516:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,3))){sw=12;}
    1518:	e0 e3       	ldi	r30, 0x30	; 48
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	86 95       	lsr	r24
    1520:	86 95       	lsr	r24
    1522:	86 95       	lsr	r24
    1524:	88 2f       	mov	r24, r24
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	81 70       	andi	r24, 0x01	; 1
    152a:	90 70       	andi	r25, 0x00	; 0
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	11 f4       	brne	.+4      	; 0x1534 <detect_sw+0x18a>
    1530:	8c e0       	ldi	r24, 0x0C	; 12
    1532:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(PORTC,2);
    1534:	a5 e3       	ldi	r26, 0x35	; 53
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e3       	ldi	r30, 0x35	; 53
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	8b 7f       	andi	r24, 0xFB	; 251
    1540:	8c 93       	st	X, r24
	PORTC|=(1<<5)|(1<<3)|(1<<4);
    1542:	a5 e3       	ldi	r26, 0x35	; 53
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e3       	ldi	r30, 0x35	; 53
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	88 63       	ori	r24, 0x38	; 56
    154e:	8c 93       	st	X, r24
	if(!(GET_BIT(PIND,7))){sw=13;}
    1550:	e0 e3       	ldi	r30, 0x30	; 48
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	88 23       	and	r24, r24
    1558:	14 f0       	brlt	.+4      	; 0x155e <detect_sw+0x1b4>
    155a:	8d e0       	ldi	r24, 0x0D	; 13
    155c:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,6))){sw=14;}
    155e:	e0 e3       	ldi	r30, 0x30	; 48
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	82 95       	swap	r24
    1566:	86 95       	lsr	r24
    1568:	86 95       	lsr	r24
    156a:	83 70       	andi	r24, 0x03	; 3
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	81 70       	andi	r24, 0x01	; 1
    1572:	90 70       	andi	r25, 0x00	; 0
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	11 f4       	brne	.+4      	; 0x157c <detect_sw+0x1d2>
    1578:	8e e0       	ldi	r24, 0x0E	; 14
    157a:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,5))){sw=15;}
    157c:	e0 e3       	ldi	r30, 0x30	; 48
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	82 95       	swap	r24
    1584:	86 95       	lsr	r24
    1586:	87 70       	andi	r24, 0x07	; 7
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	90 70       	andi	r25, 0x00	; 0
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	11 f4       	brne	.+4      	; 0x1598 <detect_sw+0x1ee>
    1594:	8f e0       	ldi	r24, 0x0F	; 15
    1596:	89 83       	std	Y+1, r24	; 0x01
	if(!(GET_BIT(PIND,3))){sw=16;}
    1598:	e0 e3       	ldi	r30, 0x30	; 48
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	86 95       	lsr	r24
    15a0:	86 95       	lsr	r24
    15a2:	86 95       	lsr	r24
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	81 70       	andi	r24, 0x01	; 1
    15aa:	90 70       	andi	r25, 0x00	; 0
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	11 f4       	brne	.+4      	; 0x15b4 <detect_sw+0x20a>
    15b0:	80 e1       	ldi	r24, 0x10	; 16
    15b2:	89 83       	std	Y+1, r24	; 0x01
	return sw;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <LCD_send_cmd>:
 *      Author: Marwa
 */

#include "LCD.h"
void LCD_send_cmd(unsigned char command)
{
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	cd 54       	subi	r28, 0x4D	; 77
    15cc:	d0 40       	sbci	r29, 0x00	; 0
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	fe 01       	movw	r30, r28
    15da:	e3 5b       	subi	r30, 0xB3	; 179
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	80 83       	st	Z, r24
CLEAR_BIT(RS_PORT,RS_pin); //Set RW to 0 (Connected to ground) to send commands
    15e0:	ab e3       	ldi	r26, 0x3B	; 59
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	eb e3       	ldi	r30, 0x3B	; 59
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	87 7f       	andi	r24, 0xF7	; 247
    15ec:	8c 93       	st	X, r24
DATA_PORT= (0b00000111 & (command >> 4))|(0b00010000 & (command >>3));// send upper nibble of command
    15ee:	a8 e3       	ldi	r26, 0x38	; 56
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	fe 01       	movw	r30, r28
    15f4:	e3 5b       	subi	r30, 0xB3	; 179
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 81       	ld	r24, Z
    15fa:	82 95       	swap	r24
    15fc:	8f 70       	andi	r24, 0x0F	; 15
    15fe:	98 2f       	mov	r25, r24
    1600:	97 70       	andi	r25, 0x07	; 7
    1602:	fe 01       	movw	r30, r28
    1604:	e3 5b       	subi	r30, 0xB3	; 179
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	80 81       	ld	r24, Z
    160a:	86 95       	lsr	r24
    160c:	86 95       	lsr	r24
    160e:	86 95       	lsr	r24
    1610:	80 71       	andi	r24, 0x10	; 16
    1612:	89 2b       	or	r24, r25
    1614:	8c 93       	st	X, r24
//send 1 ms pulse
SET_BIT(EN_PORT,EN_pin);
    1616:	ab e3       	ldi	r26, 0x3B	; 59
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	eb e3       	ldi	r30, 0x3B	; 59
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	84 60       	ori	r24, 0x04	; 4
    1622:	8c 93       	st	X, r24
    1624:	fe 01       	movw	r30, r28
    1626:	e7 5b       	subi	r30, 0xB7	; 183
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a0 e8       	ldi	r26, 0x80	; 128
    1630:	bf e3       	ldi	r27, 0x3F	; 63
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163a:	8e 01       	movw	r16, r28
    163c:	0b 5b       	subi	r16, 0xBB	; 187
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
    1640:	fe 01       	movw	r30, r28
    1642:	e7 5b       	subi	r30, 0xB7	; 183
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a e7       	ldi	r20, 0x7A	; 122
    1654:	53 e4       	ldi	r21, 0x43	; 67
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	f8 01       	movw	r30, r16
    1660:	80 83       	st	Z, r24
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	a2 83       	std	Z+2, r26	; 0x02
    1666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1668:	fe 01       	movw	r30, r28
    166a:	eb 5b       	subi	r30, 0xBB	; 187
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	60 81       	ld	r22, Z
    1670:	71 81       	ldd	r23, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	44 f4       	brge	.+16     	; 0x1696 <LCD_send_cmd+0xd8>
		__ticks = 1;
    1686:	fe 01       	movw	r30, r28
    1688:	ed 5b       	subi	r30, 0xBD	; 189
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
    1694:	64 c0       	rjmp	.+200    	; 0x175e <LCD_send_cmd+0x1a0>
	else if (__tmp > 65535)
    1696:	fe 01       	movw	r30, r28
    1698:	eb 5b       	subi	r30, 0xBB	; 187
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	3f ef       	ldi	r19, 0xFF	; 255
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	57 e4       	ldi	r21, 0x47	; 71
    16ac:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	0c f0       	brlt	.+2      	; 0x16b6 <LCD_send_cmd+0xf8>
    16b4:	43 c0       	rjmp	.+134    	; 0x173c <LCD_send_cmd+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b6:	fe 01       	movw	r30, r28
    16b8:	e7 5b       	subi	r30, 0xB7	; 183
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e2       	ldi	r20, 0x20	; 32
    16ca:	51 e4       	ldi	r21, 0x41	; 65
    16cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	8e 01       	movw	r16, r28
    16d6:	0d 5b       	subi	r16, 0xBD	; 189
    16d8:	1f 4f       	sbci	r17, 0xFF	; 255
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	f8 01       	movw	r30, r16
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
    16ec:	1f c0       	rjmp	.+62     	; 0x172c <LCD_send_cmd+0x16e>
    16ee:	fe 01       	movw	r30, r28
    16f0:	ef 5b       	subi	r30, 0xBF	; 191
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	89 e1       	ldi	r24, 0x19	; 25
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16fc:	fe 01       	movw	r30, r28
    16fe:	ef 5b       	subi	r30, 0xBF	; 191
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <LCD_send_cmd+0x148>
    170a:	fe 01       	movw	r30, r28
    170c:	ef 5b       	subi	r30, 0xBF	; 191
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	de 01       	movw	r26, r28
    1716:	ad 5b       	subi	r26, 0xBD	; 189
    1718:	bf 4f       	sbci	r27, 0xFF	; 255
    171a:	fe 01       	movw	r30, r28
    171c:	ed 5b       	subi	r30, 0xBD	; 189
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	11 96       	adiw	r26, 0x01	; 1
    1728:	9c 93       	st	X, r25
    172a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172c:	fe 01       	movw	r30, r28
    172e:	ed 5b       	subi	r30, 0xBD	; 189
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	d1 f6       	brne	.-76     	; 0x16ee <LCD_send_cmd+0x130>
    173a:	24 c0       	rjmp	.+72     	; 0x1784 <LCD_send_cmd+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	8e 01       	movw	r16, r28
    173e:	0d 5b       	subi	r16, 0xBD	; 189
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	fe 01       	movw	r30, r28
    1744:	eb 5b       	subi	r30, 0xBB	; 187
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	f8 01       	movw	r30, r16
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
    175e:	fe 01       	movw	r30, r28
    1760:	ed 5b       	subi	r30, 0xBD	; 189
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	91 81       	ldd	r25, Z+1	; 0x01
    1768:	fe 01       	movw	r30, r28
    176a:	ff 96       	adiw	r30, 0x3f	; 63
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	80 83       	st	Z, r24
    1770:	fe 01       	movw	r30, r28
    1772:	ff 96       	adiw	r30, 0x3f	; 63
    1774:	80 81       	ld	r24, Z
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <LCD_send_cmd+0x1ba>
    177c:	fe 01       	movw	r30, r28
    177e:	ff 96       	adiw	r30, 0x3f	; 63
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	80 83       	st	Z, r24
_delay_ms(1);
CLEAR_BIT(EN_PORT,EN_pin);
    1784:	ab e3       	ldi	r26, 0x3B	; 59
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	eb e3       	ldi	r30, 0x3B	; 59
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	8b 7f       	andi	r24, 0xFB	; 251
    1790:	8c 93       	st	X, r24
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	a8 e4       	ldi	r26, 0x48	; 72
    1798:	b2 e4       	ldi	r27, 0x42	; 66
    179a:	8b af       	std	Y+59, r24	; 0x3b
    179c:	9c af       	std	Y+60, r25	; 0x3c
    179e:	ad af       	std	Y+61, r26	; 0x3d
    17a0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17a2:	6b ad       	ldd	r22, Y+59	; 0x3b
    17a4:	7c ad       	ldd	r23, Y+60	; 0x3c
    17a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    17a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    17aa:	2b ea       	ldi	r18, 0xAB	; 171
    17ac:	3a ea       	ldi	r19, 0xAA	; 170
    17ae:	4a ea       	ldi	r20, 0xAA	; 170
    17b0:	5e e3       	ldi	r21, 0x3E	; 62
    17b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	8f ab       	std	Y+55, r24	; 0x37
    17bc:	98 af       	std	Y+56, r25	; 0x38
    17be:	a9 af       	std	Y+57, r26	; 0x39
    17c0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    17c2:	6f a9       	ldd	r22, Y+55	; 0x37
    17c4:	78 ad       	ldd	r23, Y+56	; 0x38
    17c6:	89 ad       	ldd	r24, Y+57	; 0x39
    17c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e8       	ldi	r20, 0x80	; 128
    17d0:	5f e3       	ldi	r21, 0x3F	; 63
    17d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    17d6:	88 23       	and	r24, r24
    17d8:	1c f4       	brge	.+6      	; 0x17e0 <LCD_send_cmd+0x222>
		__ticks = 1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	8e ab       	std	Y+54, r24	; 0x36
    17de:	91 c0       	rjmp	.+290    	; 0x1902 <LCD_send_cmd+0x344>
	else if (__tmp > 255)
    17e0:	6f a9       	ldd	r22, Y+55	; 0x37
    17e2:	78 ad       	ldd	r23, Y+56	; 0x38
    17e4:	89 ad       	ldd	r24, Y+57	; 0x39
    17e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	4f e7       	ldi	r20, 0x7F	; 127
    17ee:	53 e4       	ldi	r21, 0x43	; 67
    17f0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	0c f0       	brlt	.+2      	; 0x17fa <LCD_send_cmd+0x23c>
    17f8:	7b c0       	rjmp	.+246    	; 0x18f0 <LCD_send_cmd+0x332>
	{
		_delay_ms(__us / 1000.0);
    17fa:	6b ad       	ldd	r22, Y+59	; 0x3b
    17fc:	7c ad       	ldd	r23, Y+60	; 0x3c
    17fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1800:	9e ad       	ldd	r25, Y+62	; 0x3e
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	4a e7       	ldi	r20, 0x7A	; 122
    1808:	54 e4       	ldi	r21, 0x44	; 68
    180a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8a ab       	std	Y+50, r24	; 0x32
    1814:	9b ab       	std	Y+51, r25	; 0x33
    1816:	ac ab       	std	Y+52, r26	; 0x34
    1818:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181a:	6a a9       	ldd	r22, Y+50	; 0x32
    181c:	7b a9       	ldd	r23, Y+51	; 0x33
    181e:	8c a9       	ldd	r24, Y+52	; 0x34
    1820:	9d a9       	ldd	r25, Y+53	; 0x35
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	4a e7       	ldi	r20, 0x7A	; 122
    1828:	53 e4       	ldi	r21, 0x43	; 67
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	8e a7       	std	Y+46, r24	; 0x2e
    1834:	9f a7       	std	Y+47, r25	; 0x2f
    1836:	a8 ab       	std	Y+48, r26	; 0x30
    1838:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    183a:	6e a5       	ldd	r22, Y+46	; 0x2e
    183c:	7f a5       	ldd	r23, Y+47	; 0x2f
    183e:	88 a9       	ldd	r24, Y+48	; 0x30
    1840:	99 a9       	ldd	r25, Y+49	; 0x31
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e8       	ldi	r20, 0x80	; 128
    1848:	5f e3       	ldi	r21, 0x3F	; 63
    184a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    184e:	88 23       	and	r24, r24
    1850:	2c f4       	brge	.+10     	; 0x185c <LCD_send_cmd+0x29e>
		__ticks = 1;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	9d a7       	std	Y+45, r25	; 0x2d
    1858:	8c a7       	std	Y+44, r24	; 0x2c
    185a:	3f c0       	rjmp	.+126    	; 0x18da <LCD_send_cmd+0x31c>
	else if (__tmp > 65535)
    185c:	6e a5       	ldd	r22, Y+46	; 0x2e
    185e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1860:	88 a9       	ldd	r24, Y+48	; 0x30
    1862:	99 a9       	ldd	r25, Y+49	; 0x31
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	3f ef       	ldi	r19, 0xFF	; 255
    1868:	4f e7       	ldi	r20, 0x7F	; 127
    186a:	57 e4       	ldi	r21, 0x47	; 71
    186c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1870:	18 16       	cp	r1, r24
    1872:	4c f5       	brge	.+82     	; 0x18c6 <LCD_send_cmd+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1874:	6a a9       	ldd	r22, Y+50	; 0x32
    1876:	7b a9       	ldd	r23, Y+51	; 0x33
    1878:	8c a9       	ldd	r24, Y+52	; 0x34
    187a:	9d a9       	ldd	r25, Y+53	; 0x35
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e2       	ldi	r20, 0x20	; 32
    1882:	51 e4       	ldi	r21, 0x41	; 65
    1884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	9d a7       	std	Y+45, r25	; 0x2d
    189a:	8c a7       	std	Y+44, r24	; 0x2c
    189c:	0f c0       	rjmp	.+30     	; 0x18bc <LCD_send_cmd+0x2fe>
    189e:	89 e1       	ldi	r24, 0x19	; 25
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	9b a7       	std	Y+43, r25	; 0x2b
    18a4:	8a a7       	std	Y+42, r24	; 0x2a
    18a6:	8a a5       	ldd	r24, Y+42	; 0x2a
    18a8:	9b a5       	ldd	r25, Y+43	; 0x2b
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_send_cmd+0x2ec>
    18ae:	9b a7       	std	Y+43, r25	; 0x2b
    18b0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    18b4:	9d a5       	ldd	r25, Y+45	; 0x2d
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	9d a7       	std	Y+45, r25	; 0x2d
    18ba:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    18be:	9d a5       	ldd	r25, Y+45	; 0x2d
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	69 f7       	brne	.-38     	; 0x189e <LCD_send_cmd+0x2e0>
    18c4:	24 c0       	rjmp	.+72     	; 0x190e <LCD_send_cmd+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c6:	6e a5       	ldd	r22, Y+46	; 0x2e
    18c8:	7f a5       	ldd	r23, Y+47	; 0x2f
    18ca:	88 a9       	ldd	r24, Y+48	; 0x30
    18cc:	99 a9       	ldd	r25, Y+49	; 0x31
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9d a7       	std	Y+45, r25	; 0x2d
    18d8:	8c a7       	std	Y+44, r24	; 0x2c
    18da:	8c a5       	ldd	r24, Y+44	; 0x2c
    18dc:	9d a5       	ldd	r25, Y+45	; 0x2d
    18de:	99 a7       	std	Y+41, r25	; 0x29
    18e0:	88 a7       	std	Y+40, r24	; 0x28
    18e2:	88 a5       	ldd	r24, Y+40	; 0x28
    18e4:	99 a5       	ldd	r25, Y+41	; 0x29
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <LCD_send_cmd+0x328>
    18ea:	99 a7       	std	Y+41, r25	; 0x29
    18ec:	88 a7       	std	Y+40, r24	; 0x28
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <LCD_send_cmd+0x350>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18f0:	6f a9       	ldd	r22, Y+55	; 0x37
    18f2:	78 ad       	ldd	r23, Y+56	; 0x38
    18f4:	89 ad       	ldd	r24, Y+57	; 0x39
    18f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	8e ab       	std	Y+54, r24	; 0x36
    1902:	8e a9       	ldd	r24, Y+54	; 0x36
    1904:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1906:	8f a1       	ldd	r24, Y+39	; 0x27
    1908:	8a 95       	dec	r24
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_send_cmd+0x34a>
    190c:	8f a3       	std	Y+39, r24	; 0x27
_delay_us(50);
DATA_PORT= (command & 0b00000111)|(0b00010000 & (command<<1));// send lower nibble of command
    190e:	a8 e3       	ldi	r26, 0x38	; 56
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	fe 01       	movw	r30, r28
    1914:	e3 5b       	subi	r30, 0xB3	; 179
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	28 2f       	mov	r18, r24
    191c:	27 70       	andi	r18, 0x07	; 7
    191e:	fe 01       	movw	r30, r28
    1920:	e3 5b       	subi	r30, 0xB3	; 179
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	80 81       	ld	r24, Z
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	80 71       	andi	r24, 0x10	; 16
    1930:	82 2b       	or	r24, r18
    1932:	8c 93       	st	X, r24
//Take only the left 4 bits, note that we still need to send the right 4 bits of command
//send 1 ms pulse
SET_BIT(EN_PORT,EN_pin);
    1934:	ab e3       	ldi	r26, 0x3B	; 59
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	eb e3       	ldi	r30, 0x3B	; 59
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	84 60       	ori	r24, 0x04	; 4
    1940:	8c 93       	st	X, r24
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a0 e8       	ldi	r26, 0x80	; 128
    1948:	bf e3       	ldi	r27, 0x3F	; 63
    194a:	8b a3       	std	Y+35, r24	; 0x23
    194c:	9c a3       	std	Y+36, r25	; 0x24
    194e:	ad a3       	std	Y+37, r26	; 0x25
    1950:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1952:	6b a1       	ldd	r22, Y+35	; 0x23
    1954:	7c a1       	ldd	r23, Y+36	; 0x24
    1956:	8d a1       	ldd	r24, Y+37	; 0x25
    1958:	9e a1       	ldd	r25, Y+38	; 0x26
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4a e7       	ldi	r20, 0x7A	; 122
    1960:	53 e4       	ldi	r21, 0x43	; 67
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	8f 8f       	std	Y+31, r24	; 0x1f
    196c:	98 a3       	std	Y+32, r25	; 0x20
    196e:	a9 a3       	std	Y+33, r26	; 0x21
    1970:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1972:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1974:	78 a1       	ldd	r23, Y+32	; 0x20
    1976:	89 a1       	ldd	r24, Y+33	; 0x21
    1978:	9a a1       	ldd	r25, Y+34	; 0x22
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	5f e3       	ldi	r21, 0x3F	; 63
    1982:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1986:	88 23       	and	r24, r24
    1988:	2c f4       	brge	.+10     	; 0x1994 <LCD_send_cmd+0x3d6>
		__ticks = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9e 8f       	std	Y+30, r25	; 0x1e
    1990:	8d 8f       	std	Y+29, r24	; 0x1d
    1992:	3f c0       	rjmp	.+126    	; 0x1a12 <LCD_send_cmd+0x454>
	else if (__tmp > 65535)
    1994:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1996:	78 a1       	ldd	r23, Y+32	; 0x20
    1998:	89 a1       	ldd	r24, Y+33	; 0x21
    199a:	9a a1       	ldd	r25, Y+34	; 0x22
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	3f ef       	ldi	r19, 0xFF	; 255
    19a0:	4f e7       	ldi	r20, 0x7F	; 127
    19a2:	57 e4       	ldi	r21, 0x47	; 71
    19a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    19a8:	18 16       	cp	r1, r24
    19aa:	4c f5       	brge	.+82     	; 0x19fe <LCD_send_cmd+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ac:	6b a1       	ldd	r22, Y+35	; 0x23
    19ae:	7c a1       	ldd	r23, Y+36	; 0x24
    19b0:	8d a1       	ldd	r24, Y+37	; 0x25
    19b2:	9e a1       	ldd	r25, Y+38	; 0x26
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e2       	ldi	r20, 0x20	; 32
    19ba:	51 e4       	ldi	r21, 0x41	; 65
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9e 8f       	std	Y+30, r25	; 0x1e
    19d2:	8d 8f       	std	Y+29, r24	; 0x1d
    19d4:	0f c0       	rjmp	.+30     	; 0x19f4 <LCD_send_cmd+0x436>
    19d6:	89 e1       	ldi	r24, 0x19	; 25
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9c 8f       	std	Y+28, r25	; 0x1c
    19dc:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_send_cmd+0x424>
    19e6:	9c 8f       	std	Y+28, r25	; 0x1c
    19e8:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	9e 8f       	std	Y+30, r25	; 0x1e
    19f2:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	69 f7       	brne	.-38     	; 0x19d6 <LCD_send_cmd+0x418>
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <LCD_send_cmd+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a00:	78 a1       	ldd	r23, Y+32	; 0x20
    1a02:	89 a1       	ldd	r24, Y+33	; 0x21
    1a04:	9a a1       	ldd	r25, Y+34	; 0x22
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a10:	8d 8f       	std	Y+29, r24	; 0x1d
    1a12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a16:	9a 8f       	std	Y+26, r25	; 0x1a
    1a18:	89 8f       	std	Y+25, r24	; 0x19
    1a1a:	89 8d       	ldd	r24, Y+25	; 0x19
    1a1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_send_cmd+0x460>
    1a22:	9a 8f       	std	Y+26, r25	; 0x1a
    1a24:	89 8f       	std	Y+25, r24	; 0x19
_delay_ms(1);
CLEAR_BIT(EN_PORT,EN_pin);
    1a26:	ab e3       	ldi	r26, 0x3B	; 59
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	eb e3       	ldi	r30, 0x3B	; 59
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	8b 7f       	andi	r24, 0xFB	; 251
    1a32:	8c 93       	st	X, r24
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	a8 e4       	ldi	r26, 0x48	; 72
    1a3a:	b2 e4       	ldi	r27, 0x42	; 66
    1a3c:	8d 8b       	std	Y+21, r24	; 0x15
    1a3e:	9e 8b       	std	Y+22, r25	; 0x16
    1a40:	af 8b       	std	Y+23, r26	; 0x17
    1a42:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a44:	6d 89       	ldd	r22, Y+21	; 0x15
    1a46:	7e 89       	ldd	r23, Y+22	; 0x16
    1a48:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4c:	2b ea       	ldi	r18, 0xAB	; 171
    1a4e:	3a ea       	ldi	r19, 0xAA	; 170
    1a50:	4a ea       	ldi	r20, 0xAA	; 170
    1a52:	5e e3       	ldi	r21, 0x3E	; 62
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	89 8b       	std	Y+17, r24	; 0x11
    1a5e:	9a 8b       	std	Y+18, r25	; 0x12
    1a60:	ab 8b       	std	Y+19, r26	; 0x13
    1a62:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a64:	69 89       	ldd	r22, Y+17	; 0x11
    1a66:	7a 89       	ldd	r23, Y+18	; 0x12
    1a68:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e8       	ldi	r20, 0x80	; 128
    1a72:	5f e3       	ldi	r21, 0x3F	; 63
    1a74:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1a78:	88 23       	and	r24, r24
    1a7a:	1c f4       	brge	.+6      	; 0x1a82 <LCD_send_cmd+0x4c4>
		__ticks = 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	88 8b       	std	Y+16, r24	; 0x10
    1a80:	91 c0       	rjmp	.+290    	; 0x1ba4 <LCD_send_cmd+0x5e6>
	else if (__tmp > 255)
    1a82:	69 89       	ldd	r22, Y+17	; 0x11
    1a84:	7a 89       	ldd	r23, Y+18	; 0x12
    1a86:	8b 89       	ldd	r24, Y+19	; 0x13
    1a88:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4f e7       	ldi	r20, 0x7F	; 127
    1a90:	53 e4       	ldi	r21, 0x43	; 67
    1a92:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a96:	18 16       	cp	r1, r24
    1a98:	0c f0       	brlt	.+2      	; 0x1a9c <LCD_send_cmd+0x4de>
    1a9a:	7b c0       	rjmp	.+246    	; 0x1b92 <LCD_send_cmd+0x5d4>
	{
		_delay_ms(__us / 1000.0);
    1a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4a e7       	ldi	r20, 0x7A	; 122
    1aaa:	54 e4       	ldi	r21, 0x44	; 68
    1aac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8c 87       	std	Y+12, r24	; 0x0c
    1ab6:	9d 87       	std	Y+13, r25	; 0x0d
    1ab8:	ae 87       	std	Y+14, r26	; 0x0e
    1aba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1abe:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ac0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	4a e7       	ldi	r20, 0x7A	; 122
    1aca:	53 e4       	ldi	r21, 0x43	; 67
    1acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	88 87       	std	Y+8, r24	; 0x08
    1ad6:	99 87       	std	Y+9, r25	; 0x09
    1ad8:	aa 87       	std	Y+10, r26	; 0x0a
    1ada:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1adc:	68 85       	ldd	r22, Y+8	; 0x08
    1ade:	79 85       	ldd	r23, Y+9	; 0x09
    1ae0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ae2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e8       	ldi	r20, 0x80	; 128
    1aea:	5f e3       	ldi	r21, 0x3F	; 63
    1aec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1af0:	88 23       	and	r24, r24
    1af2:	2c f4       	brge	.+10     	; 0x1afe <LCD_send_cmd+0x540>
		__ticks = 1;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9f 83       	std	Y+7, r25	; 0x07
    1afa:	8e 83       	std	Y+6, r24	; 0x06
    1afc:	3f c0       	rjmp	.+126    	; 0x1b7c <LCD_send_cmd+0x5be>
	else if (__tmp > 65535)
    1afe:	68 85       	ldd	r22, Y+8	; 0x08
    1b00:	79 85       	ldd	r23, Y+9	; 0x09
    1b02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	3f ef       	ldi	r19, 0xFF	; 255
    1b0a:	4f e7       	ldi	r20, 0x7F	; 127
    1b0c:	57 e4       	ldi	r21, 0x47	; 71
    1b0e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b12:	18 16       	cp	r1, r24
    1b14:	4c f5       	brge	.+82     	; 0x1b68 <LCD_send_cmd+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b16:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b18:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e2       	ldi	r20, 0x20	; 32
    1b24:	51 e4       	ldi	r21, 0x41	; 65
    1b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	bc 01       	movw	r22, r24
    1b30:	cd 01       	movw	r24, r26
    1b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9f 83       	std	Y+7, r25	; 0x07
    1b3c:	8e 83       	std	Y+6, r24	; 0x06
    1b3e:	0f c0       	rjmp	.+30     	; 0x1b5e <LCD_send_cmd+0x5a0>
    1b40:	89 e1       	ldi	r24, 0x19	; 25
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9d 83       	std	Y+5, r25	; 0x05
    1b46:	8c 83       	std	Y+4, r24	; 0x04
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	f1 f7       	brne	.-4      	; 0x1b4c <LCD_send_cmd+0x58e>
    1b50:	9d 83       	std	Y+5, r25	; 0x05
    1b52:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b54:	8e 81       	ldd	r24, Y+6	; 0x06
    1b56:	9f 81       	ldd	r25, Y+7	; 0x07
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	9f 83       	std	Y+7, r25	; 0x07
    1b5c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b60:	9f 81       	ldd	r25, Y+7	; 0x07
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	69 f7       	brne	.-38     	; 0x1b40 <LCD_send_cmd+0x582>
    1b66:	24 c0       	rjmp	.+72     	; 0x1bb0 <LCD_send_cmd+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b68:	68 85       	ldd	r22, Y+8	; 0x08
    1b6a:	79 85       	ldd	r23, Y+9	; 0x09
    1b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	9f 83       	std	Y+7, r25	; 0x07
    1b7a:	8e 83       	std	Y+6, r24	; 0x06
    1b7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b80:	9b 83       	std	Y+3, r25	; 0x03
    1b82:	8a 83       	std	Y+2, r24	; 0x02
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	9b 81       	ldd	r25, Y+3	; 0x03
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_send_cmd+0x5ca>
    1b8c:	9b 83       	std	Y+3, r25	; 0x03
    1b8e:	8a 83       	std	Y+2, r24	; 0x02
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <LCD_send_cmd+0x5f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b92:	69 89       	ldd	r22, Y+17	; 0x11
    1b94:	7a 89       	ldd	r23, Y+18	; 0x12
    1b96:	8b 89       	ldd	r24, Y+19	; 0x13
    1b98:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	88 8b       	std	Y+16, r24	; 0x10
    1ba4:	88 89       	ldd	r24, Y+16	; 0x10
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	8a 95       	dec	r24
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_send_cmd+0x5ec>
    1bae:	89 83       	std	Y+1, r24	; 0x01
_delay_us(50);
}
    1bb0:	c3 5b       	subi	r28, 0xB3	; 179
    1bb2:	df 4f       	sbci	r29, 0xFF	; 255
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <LCD_send_data>:

void LCD_send_data(unsigned char data)
{
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	cd 54       	subi	r28, 0x4D	; 77
    1bd6:	d0 40       	sbci	r29, 0x00	; 0
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	fe 01       	movw	r30, r28
    1be4:	e3 5b       	subi	r30, 0xB3	; 179
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 83       	st	Z, r24
SET_BIT(RS_PORT,RS_pin);//Set RW to 1() to indicate that we are sending data to LCD
    1bea:	ab e3       	ldi	r26, 0x3B	; 59
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	eb e3       	ldi	r30, 0x3B	; 59
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	88 60       	ori	r24, 0x08	; 8
    1bf6:	8c 93       	st	X, r24
DATA_PORT= (0b00000111 & (data >> 4))|(0b00010000 & (data >>3)); //send upper nibble of data
    1bf8:	a8 e3       	ldi	r26, 0x38	; 56
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e3 5b       	subi	r30, 0xB3	; 179
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	80 81       	ld	r24, Z
    1c04:	82 95       	swap	r24
    1c06:	8f 70       	andi	r24, 0x0F	; 15
    1c08:	98 2f       	mov	r25, r24
    1c0a:	97 70       	andi	r25, 0x07	; 7
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e3 5b       	subi	r30, 0xB3	; 179
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	86 95       	lsr	r24
    1c16:	86 95       	lsr	r24
    1c18:	86 95       	lsr	r24
    1c1a:	80 71       	andi	r24, 0x10	; 16
    1c1c:	89 2b       	or	r24, r25
    1c1e:	8c 93       	st	X, r24
//send 1 ms pulse
SET_BIT(EN_PORT,EN_pin); //perform write operation
    1c20:	ab e3       	ldi	r26, 0x3B	; 59
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	eb e3       	ldi	r30, 0x3B	; 59
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	84 60       	ori	r24, 0x04	; 4
    1c2c:	8c 93       	st	X, r24
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e7 5b       	subi	r30, 0xB7	; 183
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 e8       	ldi	r26, 0x80	; 128
    1c3a:	bf e3       	ldi	r27, 0x3F	; 63
    1c3c:	80 83       	st	Z, r24
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	a2 83       	std	Z+2, r26	; 0x02
    1c42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c44:	8e 01       	movw	r16, r28
    1c46:	0b 5b       	subi	r16, 0xBB	; 187
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e7 5b       	subi	r30, 0xB7	; 183
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a e7       	ldi	r20, 0x7A	; 122
    1c5e:	53 e4       	ldi	r21, 0x43	; 67
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	f8 01       	movw	r30, r16
    1c6a:	80 83       	st	Z, r24
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	a2 83       	std	Z+2, r26	; 0x02
    1c70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c72:	fe 01       	movw	r30, r28
    1c74:	eb 5b       	subi	r30, 0xBB	; 187
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	44 f4       	brge	.+16     	; 0x1ca0 <LCD_send_data+0xd8>
		__ticks = 1;
    1c90:	fe 01       	movw	r30, r28
    1c92:	ed 5b       	subi	r30, 0xBD	; 189
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    1c9e:	64 c0       	rjmp	.+200    	; 0x1d68 <LCD_send_data+0x1a0>
	else if (__tmp > 65535)
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	eb 5b       	subi	r30, 0xBB	; 187
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	3f ef       	ldi	r19, 0xFF	; 255
    1cb2:	4f e7       	ldi	r20, 0x7F	; 127
    1cb4:	57 e4       	ldi	r21, 0x47	; 71
    1cb6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1cba:	18 16       	cp	r1, r24
    1cbc:	0c f0       	brlt	.+2      	; 0x1cc0 <LCD_send_data+0xf8>
    1cbe:	43 c0       	rjmp	.+134    	; 0x1d46 <LCD_send_data+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e7 5b       	subi	r30, 0xB7	; 183
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	51 e4       	ldi	r21, 0x41	; 65
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8e 01       	movw	r16, r28
    1ce0:	0d 5b       	subi	r16, 0xBD	; 189
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	cd 01       	movw	r24, r26
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
    1cf6:	1f c0       	rjmp	.+62     	; 0x1d36 <LCD_send_data+0x16e>
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	ef 5b       	subi	r30, 0xBF	; 191
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	89 e1       	ldi	r24, 0x19	; 25
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d06:	fe 01       	movw	r30, r28
    1d08:	ef 5b       	subi	r30, 0xBF	; 191
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_send_data+0x148>
    1d14:	fe 01       	movw	r30, r28
    1d16:	ef 5b       	subi	r30, 0xBF	; 191
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	de 01       	movw	r26, r28
    1d20:	ad 5b       	subi	r26, 0xBD	; 189
    1d22:	bf 4f       	sbci	r27, 0xFF	; 255
    1d24:	fe 01       	movw	r30, r28
    1d26:	ed 5b       	subi	r30, 0xBD	; 189
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	11 96       	adiw	r26, 0x01	; 1
    1d32:	9c 93       	st	X, r25
    1d34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d36:	fe 01       	movw	r30, r28
    1d38:	ed 5b       	subi	r30, 0xBD	; 189
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	91 81       	ldd	r25, Z+1	; 0x01
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	d1 f6       	brne	.-76     	; 0x1cf8 <LCD_send_data+0x130>
    1d44:	24 c0       	rjmp	.+72     	; 0x1d8e <LCD_send_data+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	8e 01       	movw	r16, r28
    1d48:	0d 5b       	subi	r16, 0xBD	; 189
    1d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	eb 5b       	subi	r30, 0xBB	; 187
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	60 81       	ld	r22, Z
    1d54:	71 81       	ldd	r23, Z+1	; 0x01
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	f8 01       	movw	r30, r16
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	80 83       	st	Z, r24
    1d68:	fe 01       	movw	r30, r28
    1d6a:	ed 5b       	subi	r30, 0xBD	; 189
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	fe 01       	movw	r30, r28
    1d74:	ff 96       	adiw	r30, 0x3f	; 63
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	ff 96       	adiw	r30, 0x3f	; 63
    1d7e:	80 81       	ld	r24, Z
    1d80:	91 81       	ldd	r25, Z+1	; 0x01
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <LCD_send_data+0x1ba>
    1d86:	fe 01       	movw	r30, r28
    1d88:	ff 96       	adiw	r30, 0x3f	; 63
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	80 83       	st	Z, r24
_delay_ms(1);
CLEAR_BIT(EN_PORT,EN_pin); //data transmit done
    1d8e:	ab e3       	ldi	r26, 0x3B	; 59
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	eb e3       	ldi	r30, 0x3B	; 59
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	8b 7f       	andi	r24, 0xFB	; 251
    1d9a:	8c 93       	st	X, r24
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a8 e4       	ldi	r26, 0x48	; 72
    1da2:	b2 e4       	ldi	r27, 0x42	; 66
    1da4:	8b af       	std	Y+59, r24	; 0x3b
    1da6:	9c af       	std	Y+60, r25	; 0x3c
    1da8:	ad af       	std	Y+61, r26	; 0x3d
    1daa:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dac:	6b ad       	ldd	r22, Y+59	; 0x3b
    1dae:	7c ad       	ldd	r23, Y+60	; 0x3c
    1db0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1db2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1db4:	2b ea       	ldi	r18, 0xAB	; 171
    1db6:	3a ea       	ldi	r19, 0xAA	; 170
    1db8:	4a ea       	ldi	r20, 0xAA	; 170
    1dba:	5e e3       	ldi	r21, 0x3E	; 62
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8f ab       	std	Y+55, r24	; 0x37
    1dc6:	98 af       	std	Y+56, r25	; 0x38
    1dc8:	a9 af       	std	Y+57, r26	; 0x39
    1dca:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1dcc:	6f a9       	ldd	r22, Y+55	; 0x37
    1dce:	78 ad       	ldd	r23, Y+56	; 0x38
    1dd0:	89 ad       	ldd	r24, Y+57	; 0x39
    1dd2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e8       	ldi	r20, 0x80	; 128
    1dda:	5f e3       	ldi	r21, 0x3F	; 63
    1ddc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1de0:	88 23       	and	r24, r24
    1de2:	1c f4       	brge	.+6      	; 0x1dea <LCD_send_data+0x222>
		__ticks = 1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	8e ab       	std	Y+54, r24	; 0x36
    1de8:	91 c0       	rjmp	.+290    	; 0x1f0c <LCD_send_data+0x344>
	else if (__tmp > 255)
    1dea:	6f a9       	ldd	r22, Y+55	; 0x37
    1dec:	78 ad       	ldd	r23, Y+56	; 0x38
    1dee:	89 ad       	ldd	r24, Y+57	; 0x39
    1df0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	53 e4       	ldi	r21, 0x43	; 67
    1dfa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	0c f0       	brlt	.+2      	; 0x1e04 <LCD_send_data+0x23c>
    1e02:	7b c0       	rjmp	.+246    	; 0x1efa <LCD_send_data+0x332>
	{
		_delay_ms(__us / 1000.0);
    1e04:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e06:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a e7       	ldi	r20, 0x7A	; 122
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8a ab       	std	Y+50, r24	; 0x32
    1e1e:	9b ab       	std	Y+51, r25	; 0x33
    1e20:	ac ab       	std	Y+52, r26	; 0x34
    1e22:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e24:	6a a9       	ldd	r22, Y+50	; 0x32
    1e26:	7b a9       	ldd	r23, Y+51	; 0x33
    1e28:	8c a9       	ldd	r24, Y+52	; 0x34
    1e2a:	9d a9       	ldd	r25, Y+53	; 0x35
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a e7       	ldi	r20, 0x7A	; 122
    1e32:	53 e4       	ldi	r21, 0x43	; 67
    1e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	8e a7       	std	Y+46, r24	; 0x2e
    1e3e:	9f a7       	std	Y+47, r25	; 0x2f
    1e40:	a8 ab       	std	Y+48, r26	; 0x30
    1e42:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1e44:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e46:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e48:	88 a9       	ldd	r24, Y+48	; 0x30
    1e4a:	99 a9       	ldd	r25, Y+49	; 0x31
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <LCD_send_data+0x29e>
		__ticks = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9d a7       	std	Y+45, r25	; 0x2d
    1e62:	8c a7       	std	Y+44, r24	; 0x2c
    1e64:	3f c0       	rjmp	.+126    	; 0x1ee4 <LCD_send_data+0x31c>
	else if (__tmp > 65535)
    1e66:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e68:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e6a:	88 a9       	ldd	r24, Y+48	; 0x30
    1e6c:	99 a9       	ldd	r25, Y+49	; 0x31
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	57 e4       	ldi	r21, 0x47	; 71
    1e76:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	4c f5       	brge	.+82     	; 0x1ed0 <LCD_send_data+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7e:	6a a9       	ldd	r22, Y+50	; 0x32
    1e80:	7b a9       	ldd	r23, Y+51	; 0x33
    1e82:	8c a9       	ldd	r24, Y+52	; 0x34
    1e84:	9d a9       	ldd	r25, Y+53	; 0x35
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9d a7       	std	Y+45, r25	; 0x2d
    1ea4:	8c a7       	std	Y+44, r24	; 0x2c
    1ea6:	0f c0       	rjmp	.+30     	; 0x1ec6 <LCD_send_data+0x2fe>
    1ea8:	89 e1       	ldi	r24, 0x19	; 25
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9b a7       	std	Y+43, r25	; 0x2b
    1eae:	8a a7       	std	Y+42, r24	; 0x2a
    1eb0:	8a a5       	ldd	r24, Y+42	; 0x2a
    1eb2:	9b a5       	ldd	r25, Y+43	; 0x2b
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_send_data+0x2ec>
    1eb8:	9b a7       	std	Y+43, r25	; 0x2b
    1eba:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebc:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ebe:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	9d a7       	std	Y+45, r25	; 0x2d
    1ec4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ec8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	69 f7       	brne	.-38     	; 0x1ea8 <LCD_send_data+0x2e0>
    1ece:	24 c0       	rjmp	.+72     	; 0x1f18 <LCD_send_data+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ed2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ed4:	88 a9       	ldd	r24, Y+48	; 0x30
    1ed6:	99 a9       	ldd	r25, Y+49	; 0x31
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9d a7       	std	Y+45, r25	; 0x2d
    1ee2:	8c a7       	std	Y+44, r24	; 0x2c
    1ee4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ee6:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ee8:	99 a7       	std	Y+41, r25	; 0x29
    1eea:	88 a7       	std	Y+40, r24	; 0x28
    1eec:	88 a5       	ldd	r24, Y+40	; 0x28
    1eee:	99 a5       	ldd	r25, Y+41	; 0x29
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_send_data+0x328>
    1ef4:	99 a7       	std	Y+41, r25	; 0x29
    1ef6:	88 a7       	std	Y+40, r24	; 0x28
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <LCD_send_data+0x350>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1efa:	6f a9       	ldd	r22, Y+55	; 0x37
    1efc:	78 ad       	ldd	r23, Y+56	; 0x38
    1efe:	89 ad       	ldd	r24, Y+57	; 0x39
    1f00:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	8e ab       	std	Y+54, r24	; 0x36
    1f0c:	8e a9       	ldd	r24, Y+54	; 0x36
    1f0e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f10:	8f a1       	ldd	r24, Y+39	; 0x27
    1f12:	8a 95       	dec	r24
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_send_data+0x34a>
    1f16:	8f a3       	std	Y+39, r24	; 0x27
_delay_us(50);
DATA_PORT = (data & 0b00000111)|(0b00010000 & (data<<1));//send lower nibble of data
    1f18:	a8 e3       	ldi	r26, 0x38	; 56
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e3 5b       	subi	r30, 0xB3	; 179
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	80 81       	ld	r24, Z
    1f24:	28 2f       	mov	r18, r24
    1f26:	27 70       	andi	r18, 0x07	; 7
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e3 5b       	subi	r30, 0xB3	; 179
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 81       	ld	r24, Z
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	80 71       	andi	r24, 0x10	; 16
    1f3a:	82 2b       	or	r24, r18
    1f3c:	8c 93       	st	X, r24
//send 1 ms pulse
SET_BIT(EN_PORT,EN_pin);//perform write operation of data
    1f3e:	ab e3       	ldi	r26, 0x3B	; 59
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	eb e3       	ldi	r30, 0x3B	; 59
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	84 60       	ori	r24, 0x04	; 4
    1f4a:	8c 93       	st	X, r24
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e8       	ldi	r26, 0x80	; 128
    1f52:	bf e3       	ldi	r27, 0x3F	; 63
    1f54:	8b a3       	std	Y+35, r24	; 0x23
    1f56:	9c a3       	std	Y+36, r25	; 0x24
    1f58:	ad a3       	std	Y+37, r26	; 0x25
    1f5a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f60:	8d a1       	ldd	r24, Y+37	; 0x25
    1f62:	9e a1       	ldd	r25, Y+38	; 0x26
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a e7       	ldi	r20, 0x7A	; 122
    1f6a:	53 e4       	ldi	r21, 0x43	; 67
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8f 8f       	std	Y+31, r24	; 0x1f
    1f76:	98 a3       	std	Y+32, r25	; 0x20
    1f78:	a9 a3       	std	Y+33, r26	; 0x21
    1f7a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1f7c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f7e:	78 a1       	ldd	r23, Y+32	; 0x20
    1f80:	89 a1       	ldd	r24, Y+33	; 0x21
    1f82:	9a a1       	ldd	r25, Y+34	; 0x22
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <LCD_send_data+0x3d6>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <LCD_send_data+0x454>
	else if (__tmp > 65535)
    1f9e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fa0:	78 a1       	ldd	r23, Y+32	; 0x20
    1fa2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <LCD_send_data+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fba:	8d a1       	ldd	r24, Y+37	; 0x25
    1fbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 8f       	std	Y+30, r25	; 0x1e
    1fdc:	8d 8f       	std	Y+29, r24	; 0x1d
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <LCD_send_data+0x436>
    1fe0:	89 e1       	ldi	r24, 0x19	; 25
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9c 8f       	std	Y+28, r25	; 0x1c
    1fe6:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_send_data+0x424>
    1ff0:	9c 8f       	std	Y+28, r25	; 0x1c
    1ff2:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9e 8f       	std	Y+30, r25	; 0x1e
    1ffc:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2000:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <LCD_send_data+0x418>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <LCD_send_data+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6f 8d       	ldd	r22, Y+31	; 0x1f
    200a:	78 a1       	ldd	r23, Y+32	; 0x20
    200c:	89 a1       	ldd	r24, Y+33	; 0x21
    200e:	9a a1       	ldd	r25, Y+34	; 0x22
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e 8f       	std	Y+30, r25	; 0x1e
    201a:	8d 8f       	std	Y+29, r24	; 0x1d
    201c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    201e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2020:	9a 8f       	std	Y+26, r25	; 0x1a
    2022:	89 8f       	std	Y+25, r24	; 0x19
    2024:	89 8d       	ldd	r24, Y+25	; 0x19
    2026:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_send_data+0x460>
    202c:	9a 8f       	std	Y+26, r25	; 0x1a
    202e:	89 8f       	std	Y+25, r24	; 0x19
_delay_ms(1);
CLEAR_BIT(EN_PORT,EN_pin); //data transmit done no writing
    2030:	ab e3       	ldi	r26, 0x3B	; 59
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	eb e3       	ldi	r30, 0x3B	; 59
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	8b 7f       	andi	r24, 0xFB	; 251
    203c:	8c 93       	st	X, r24
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a8 e4       	ldi	r26, 0x48	; 72
    2044:	b2 e4       	ldi	r27, 0x42	; 66
    2046:	8d 8b       	std	Y+21, r24	; 0x15
    2048:	9e 8b       	std	Y+22, r25	; 0x16
    204a:	af 8b       	std	Y+23, r26	; 0x17
    204c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    204e:	6d 89       	ldd	r22, Y+21	; 0x15
    2050:	7e 89       	ldd	r23, Y+22	; 0x16
    2052:	8f 89       	ldd	r24, Y+23	; 0x17
    2054:	98 8d       	ldd	r25, Y+24	; 0x18
    2056:	2b ea       	ldi	r18, 0xAB	; 171
    2058:	3a ea       	ldi	r19, 0xAA	; 170
    205a:	4a ea       	ldi	r20, 0xAA	; 170
    205c:	5e e3       	ldi	r21, 0x3E	; 62
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	89 8b       	std	Y+17, r24	; 0x11
    2068:	9a 8b       	std	Y+18, r25	; 0x12
    206a:	ab 8b       	std	Y+19, r26	; 0x13
    206c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    206e:	69 89       	ldd	r22, Y+17	; 0x11
    2070:	7a 89       	ldd	r23, Y+18	; 0x12
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e8       	ldi	r20, 0x80	; 128
    207c:	5f e3       	ldi	r21, 0x3F	; 63
    207e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2082:	88 23       	and	r24, r24
    2084:	1c f4       	brge	.+6      	; 0x208c <LCD_send_data+0x4c4>
		__ticks = 1;
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	88 8b       	std	Y+16, r24	; 0x10
    208a:	91 c0       	rjmp	.+290    	; 0x21ae <LCD_send_data+0x5e6>
	else if (__tmp > 255)
    208c:	69 89       	ldd	r22, Y+17	; 0x11
    208e:	7a 89       	ldd	r23, Y+18	; 0x12
    2090:	8b 89       	ldd	r24, Y+19	; 0x13
    2092:	9c 89       	ldd	r25, Y+20	; 0x14
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4f e7       	ldi	r20, 0x7F	; 127
    209a:	53 e4       	ldi	r21, 0x43	; 67
    209c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    20a0:	18 16       	cp	r1, r24
    20a2:	0c f0       	brlt	.+2      	; 0x20a6 <LCD_send_data+0x4de>
    20a4:	7b c0       	rjmp	.+246    	; 0x219c <LCD_send_data+0x5d4>
	{
		_delay_ms(__us / 1000.0);
    20a6:	6d 89       	ldd	r22, Y+21	; 0x15
    20a8:	7e 89       	ldd	r23, Y+22	; 0x16
    20aa:	8f 89       	ldd	r24, Y+23	; 0x17
    20ac:	98 8d       	ldd	r25, Y+24	; 0x18
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4a e7       	ldi	r20, 0x7A	; 122
    20b4:	54 e4       	ldi	r21, 0x44	; 68
    20b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	8c 87       	std	Y+12, r24	; 0x0c
    20c0:	9d 87       	std	Y+13, r25	; 0x0d
    20c2:	ae 87       	std	Y+14, r26	; 0x0e
    20c4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    20c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    20ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    20cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a e7       	ldi	r20, 0x7A	; 122
    20d4:	53 e4       	ldi	r21, 0x43	; 67
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	88 87       	std	Y+8, r24	; 0x08
    20e0:	99 87       	std	Y+9, r25	; 0x09
    20e2:	aa 87       	std	Y+10, r26	; 0x0a
    20e4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20e6:	68 85       	ldd	r22, Y+8	; 0x08
    20e8:	79 85       	ldd	r23, Y+9	; 0x09
    20ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	2c f4       	brge	.+10     	; 0x2108 <LCD_send_data+0x540>
		__ticks = 1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9f 83       	std	Y+7, r25	; 0x07
    2104:	8e 83       	std	Y+6, r24	; 0x06
    2106:	3f c0       	rjmp	.+126    	; 0x2186 <LCD_send_data+0x5be>
	else if (__tmp > 65535)
    2108:	68 85       	ldd	r22, Y+8	; 0x08
    210a:	79 85       	ldd	r23, Y+9	; 0x09
    210c:	8a 85       	ldd	r24, Y+10	; 0x0a
    210e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	57 e4       	ldi	r21, 0x47	; 71
    2118:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	4c f5       	brge	.+82     	; 0x2172 <LCD_send_data+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	6c 85       	ldd	r22, Y+12	; 0x0c
    2122:	7d 85       	ldd	r23, Y+13	; 0x0d
    2124:	8e 85       	ldd	r24, Y+14	; 0x0e
    2126:	9f 85       	ldd	r25, Y+15	; 0x0f
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9f 83       	std	Y+7, r25	; 0x07
    2146:	8e 83       	std	Y+6, r24	; 0x06
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <LCD_send_data+0x5a0>
    214a:	89 e1       	ldi	r24, 0x19	; 25
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9d 83       	std	Y+5, r25	; 0x05
    2150:	8c 83       	std	Y+4, r24	; 0x04
    2152:	8c 81       	ldd	r24, Y+4	; 0x04
    2154:	9d 81       	ldd	r25, Y+5	; 0x05
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <LCD_send_data+0x58e>
    215a:	9d 83       	std	Y+5, r25	; 0x05
    215c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	8e 81       	ldd	r24, Y+6	; 0x06
    2160:	9f 81       	ldd	r25, Y+7	; 0x07
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	9f 83       	std	Y+7, r25	; 0x07
    2166:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	8e 81       	ldd	r24, Y+6	; 0x06
    216a:	9f 81       	ldd	r25, Y+7	; 0x07
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	69 f7       	brne	.-38     	; 0x214a <LCD_send_data+0x582>
    2170:	24 c0       	rjmp	.+72     	; 0x21ba <LCD_send_data+0x5f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2172:	68 85       	ldd	r22, Y+8	; 0x08
    2174:	79 85       	ldd	r23, Y+9	; 0x09
    2176:	8a 85       	ldd	r24, Y+10	; 0x0a
    2178:	9b 85       	ldd	r25, Y+11	; 0x0b
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9f 83       	std	Y+7, r25	; 0x07
    2184:	8e 83       	std	Y+6, r24	; 0x06
    2186:	8e 81       	ldd	r24, Y+6	; 0x06
    2188:	9f 81       	ldd	r25, Y+7	; 0x07
    218a:	9b 83       	std	Y+3, r25	; 0x03
    218c:	8a 83       	std	Y+2, r24	; 0x02
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	9b 81       	ldd	r25, Y+3	; 0x03
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <LCD_send_data+0x5ca>
    2196:	9b 83       	std	Y+3, r25	; 0x03
    2198:	8a 83       	std	Y+2, r24	; 0x02
    219a:	0f c0       	rjmp	.+30     	; 0x21ba <LCD_send_data+0x5f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    219c:	69 89       	ldd	r22, Y+17	; 0x11
    219e:	7a 89       	ldd	r23, Y+18	; 0x12
    21a0:	8b 89       	ldd	r24, Y+19	; 0x13
    21a2:	9c 89       	ldd	r25, Y+20	; 0x14
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	88 8b       	std	Y+16, r24	; 0x10
    21ae:	88 89       	ldd	r24, Y+16	; 0x10
    21b0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	8a 95       	dec	r24
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_send_data+0x5ec>
    21b8:	89 83       	std	Y+1, r24	; 0x01
_delay_us(50);
}
    21ba:	c3 5b       	subi	r28, 0xB3	; 179
    21bc:	df 4f       	sbci	r29, 0xFF	; 255
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	08 95       	ret

000021d2 <LCD_init>:
void LCD_init(){
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	6c 97       	sbiw	r28, 0x1c	; 28
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
DATA_DDR = 0xff;//output
    21e6:	e7 e3       	ldi	r30, 0x37	; 55
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	8f ef       	ldi	r24, 0xFF	; 255
    21ec:	80 83       	st	Z, r24
EN_DDR = 0xff;//output
    21ee:	ea e3       	ldi	r30, 0x3A	; 58
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	8f ef       	ldi	r24, 0xFF	; 255
    21f4:	80 83       	st	Z, r24
DATA_PORT = 0x00;//initial zero
    21f6:	e8 e3       	ldi	r30, 0x38	; 56
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	10 82       	st	Z, r1
CLEAR_BIT(EN_PORT,EN_pin); //initial ENABLE by zero
    21fc:	ab e3       	ldi	r26, 0x3B	; 59
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	eb e3       	ldi	r30, 0x3B	; 59
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	8b 7f       	andi	r24, 0xFB	; 251
    2208:	8c 93       	st	X, r24
//sending commands like displaying cursor and using 4 bit mode instead of 8 bit
LCD_send_cmd(LCD_init1);
    220a:	83 e3       	ldi	r24, 0x33	; 51
    220c:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
LCD_send_cmd(LCD_init2);
    2210:	82 e3       	ldi	r24, 0x32	; 50
    2212:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
LCD_send_cmd(LCD_4_bit_mode);
    2216:	88 e2       	ldi	r24, 0x28	; 40
    2218:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
LCD_send_cmd(LCD_display_on_cursor_blink);
    221c:	8e e0       	ldi	r24, 0x0E	; 14
    221e:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
LCD_send_cmd(LCD_clear);
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	a0 e0       	ldi	r26, 0x00	; 0
    222e:	b0 e4       	ldi	r27, 0x40	; 64
    2230:	89 8f       	std	Y+25, r24	; 0x19
    2232:	9a 8f       	std	Y+26, r25	; 0x1a
    2234:	ab 8f       	std	Y+27, r26	; 0x1b
    2236:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2238:	69 8d       	ldd	r22, Y+25	; 0x19
    223a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    223c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    223e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a e7       	ldi	r20, 0x7A	; 122
    2246:	53 e4       	ldi	r21, 0x43	; 67
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8d 8b       	std	Y+21, r24	; 0x15
    2252:	9e 8b       	std	Y+22, r25	; 0x16
    2254:	af 8b       	std	Y+23, r26	; 0x17
    2256:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2258:	6d 89       	ldd	r22, Y+21	; 0x15
    225a:	7e 89       	ldd	r23, Y+22	; 0x16
    225c:	8f 89       	ldd	r24, Y+23	; 0x17
    225e:	98 8d       	ldd	r25, Y+24	; 0x18
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	2c f4       	brge	.+10     	; 0x227a <LCD_init+0xa8>
		__ticks = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9c 8b       	std	Y+20, r25	; 0x14
    2276:	8b 8b       	std	Y+19, r24	; 0x13
    2278:	3f c0       	rjmp	.+126    	; 0x22f8 <LCD_init+0x126>
	else if (__tmp > 65535)
    227a:	6d 89       	ldd	r22, Y+21	; 0x15
    227c:	7e 89       	ldd	r23, Y+22	; 0x16
    227e:	8f 89       	ldd	r24, Y+23	; 0x17
    2280:	98 8d       	ldd	r25, Y+24	; 0x18
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	4c f5       	brge	.+82     	; 0x22e4 <LCD_init+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	69 8d       	ldd	r22, Y+25	; 0x19
    2294:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2296:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2298:	9c 8d       	ldd	r25, Y+28	; 0x1c
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	9c 8b       	std	Y+20, r25	; 0x14
    22b8:	8b 8b       	std	Y+19, r24	; 0x13
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <LCD_init+0x108>
    22bc:	89 e1       	ldi	r24, 0x19	; 25
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9a 8b       	std	Y+18, r25	; 0x12
    22c2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22c4:	89 89       	ldd	r24, Y+17	; 0x11
    22c6:	9a 89       	ldd	r25, Y+18	; 0x12
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_init+0xf6>
    22cc:	9a 8b       	std	Y+18, r25	; 0x12
    22ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d0:	8b 89       	ldd	r24, Y+19	; 0x13
    22d2:	9c 89       	ldd	r25, Y+20	; 0x14
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	9c 8b       	std	Y+20, r25	; 0x14
    22d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	8b 89       	ldd	r24, Y+19	; 0x13
    22dc:	9c 89       	ldd	r25, Y+20	; 0x14
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	69 f7       	brne	.-38     	; 0x22bc <LCD_init+0xea>
    22e2:	14 c0       	rjmp	.+40     	; 0x230c <LCD_init+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	6d 89       	ldd	r22, Y+21	; 0x15
    22e6:	7e 89       	ldd	r23, Y+22	; 0x16
    22e8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ea:	98 8d       	ldd	r25, Y+24	; 0x18
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9c 8b       	std	Y+20, r25	; 0x14
    22f6:	8b 8b       	std	Y+19, r24	; 0x13
    22f8:	8b 89       	ldd	r24, Y+19	; 0x13
    22fa:	9c 89       	ldd	r25, Y+20	; 0x14
    22fc:	98 8b       	std	Y+16, r25	; 0x10
    22fe:	8f 87       	std	Y+15, r24	; 0x0f
    2300:	8f 85       	ldd	r24, Y+15	; 0x0f
    2302:	98 89       	ldd	r25, Y+16	; 0x10
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_init+0x132>
    2308:	98 8b       	std	Y+16, r25	; 0x10
    230a:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(2);
LCD_send_cmd(LCD_shift_cursor_right);
    230c:	86 e0       	ldi	r24, 0x06	; 6
    230e:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a0 e0       	ldi	r26, 0x00	; 0
    2318:	b0 e4       	ldi	r27, 0x40	; 64
    231a:	8b 87       	std	Y+11, r24	; 0x0b
    231c:	9c 87       	std	Y+12, r25	; 0x0c
    231e:	ad 87       	std	Y+13, r26	; 0x0d
    2320:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2322:	6b 85       	ldd	r22, Y+11	; 0x0b
    2324:	7c 85       	ldd	r23, Y+12	; 0x0c
    2326:	8d 85       	ldd	r24, Y+13	; 0x0d
    2328:	9e 85       	ldd	r25, Y+14	; 0x0e
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a e7       	ldi	r20, 0x7A	; 122
    2330:	53 e4       	ldi	r21, 0x43	; 67
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8f 83       	std	Y+7, r24	; 0x07
    233c:	98 87       	std	Y+8, r25	; 0x08
    233e:	a9 87       	std	Y+9, r26	; 0x09
    2340:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	2c f4       	brge	.+10     	; 0x2364 <LCD_init+0x192>
		__ticks = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	3f c0       	rjmp	.+126    	; 0x23e2 <LCD_init+0x210>
	else if (__tmp > 65535)
    2364:	6f 81       	ldd	r22, Y+7	; 0x07
    2366:	78 85       	ldd	r23, Y+8	; 0x08
    2368:	89 85       	ldd	r24, Y+9	; 0x09
    236a:	9a 85       	ldd	r25, Y+10	; 0x0a
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	4c f5       	brge	.+82     	; 0x23ce <LCD_init+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237c:	6b 85       	ldd	r22, Y+11	; 0x0b
    237e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2380:	8d 85       	ldd	r24, Y+13	; 0x0d
    2382:	9e 85       	ldd	r25, Y+14	; 0x0e
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	51 e4       	ldi	r21, 0x41	; 65
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <LCD_init+0x1f2>
    23a6:	89 e1       	ldi	r24, 0x19	; 25
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_init+0x1e0>
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	8d 81       	ldd	r24, Y+5	; 0x05
    23bc:	9e 81       	ldd	r25, Y+6	; 0x06
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	9e 81       	ldd	r25, Y+6	; 0x06
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	69 f7       	brne	.-38     	; 0x23a6 <LCD_init+0x1d4>
    23cc:	14 c0       	rjmp	.+40     	; 0x23f6 <LCD_init+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ce:	6f 81       	ldd	r22, Y+7	; 0x07
    23d0:	78 85       	ldd	r23, Y+8	; 0x08
    23d2:	89 85       	ldd	r24, Y+9	; 0x09
    23d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9e 83       	std	Y+6, r25	; 0x06
    23e0:	8d 83       	std	Y+5, r24	; 0x05
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	9e 81       	ldd	r25, Y+6	; 0x06
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	9a 81       	ldd	r25, Y+2	; 0x02
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_init+0x21c>
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
}
    23f6:	6c 96       	adiw	r28, 0x1c	; 28
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <LCD_out>:
void LCD_out(char data[]){
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	00 d0       	rcall	.+0      	; 0x240e <LCD_out+0x6>
    240e:	0f 92       	push	r0
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	9b 83       	std	Y+3, r25	; 0x03
    2416:	8a 83       	std	Y+2, r24	; 0x02
unsigned char i=0;
    2418:	19 82       	std	Y+1, r1	; 0x01
    241a:	0e c0       	rjmp	.+28     	; 0x2438 <LCD_out+0x30>
while (data[i] != 0){
LCD_send_data(data[i]);
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	9b 81       	ldd	r25, Y+3	; 0x03
    2426:	fc 01       	movw	r30, r24
    2428:	e2 0f       	add	r30, r18
    242a:	f3 1f       	adc	r31, r19
    242c:	80 81       	ld	r24, Z
    242e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <LCD_send_data>
i++;
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	8f 5f       	subi	r24, 0xFF	; 255
    2436:	89 83       	std	Y+1, r24	; 0x01
LCD_send_cmd(LCD_shift_cursor_right);
_delay_ms(2);
}
void LCD_out(char data[]){
unsigned char i=0;
while (data[i] != 0){
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	8a 81       	ldd	r24, Y+2	; 0x02
    2440:	9b 81       	ldd	r25, Y+3	; 0x03
    2442:	fc 01       	movw	r30, r24
    2444:	e2 0f       	add	r30, r18
    2446:	f3 1f       	adc	r31, r19
    2448:	80 81       	ld	r24, Z
    244a:	88 23       	and	r24, r24
    244c:	39 f7       	brne	.-50     	; 0x241c <LCD_out+0x14>
LCD_send_data(data[i]);
i++;
}
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <LCD_String_xy>:
void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	00 d0       	rcall	.+0      	; 0x2460 <LCD_String_xy+0x6>
    2460:	00 d0       	rcall	.+0      	; 0x2462 <LCD_String_xy+0x8>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	6a 83       	std	Y+2, r22	; 0x02
    246a:	5c 83       	std	Y+4, r21	; 0x04
    246c:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 1 && pos<16){
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	81 30       	cpi	r24, 0x01	; 1
    2472:	49 f4       	brne	.+18     	; 0x2486 <LCD_String_xy+0x2c>
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	80 31       	cpi	r24, 0x10	; 16
    2478:	30 f4       	brcc	.+12     	; 0x2486 <LCD_String_xy+0x2c>
	LCD_send_cmd((pos & 0x0F)|0x80);}	/* Command of first row and required position<16 */
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	8f 70       	andi	r24, 0x0F	; 15
    247e:	80 68       	ori	r24, 0x80	; 128
    2480:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
    2484:	23 c0       	rjmp	.+70     	; 0x24cc <LCD_String_xy+0x72>
	else if (row == 2 && pos<16){
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	82 30       	cpi	r24, 0x02	; 2
    248a:	49 f4       	brne	.+18     	; 0x249e <LCD_String_xy+0x44>
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	80 31       	cpi	r24, 0x10	; 16
    2490:	30 f4       	brcc	.+12     	; 0x249e <LCD_String_xy+0x44>
	LCD_send_cmd((pos & 0x0F)|0xC0);}	/* Command of second row and required position<16 */
    2492:	8a 81       	ldd	r24, Y+2	; 0x02
    2494:	8f 70       	andi	r24, 0x0F	; 15
    2496:	80 6c       	ori	r24, 0xC0	; 192
    2498:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
    249c:	17 c0       	rjmp	.+46     	; 0x24cc <LCD_String_xy+0x72>
	else if (row == 3 && pos<16){
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	83 30       	cpi	r24, 0x03	; 3
    24a2:	49 f4       	brne	.+18     	; 0x24b6 <LCD_String_xy+0x5c>
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	80 31       	cpi	r24, 0x10	; 16
    24a8:	30 f4       	brcc	.+12     	; 0x24b6 <LCD_String_xy+0x5c>
	LCD_send_cmd((pos & 0x0F)|0x94);}	/* Command of third row and required position<16 */
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	8b 70       	andi	r24, 0x0B	; 11
    24ae:	84 69       	ori	r24, 0x94	; 148
    24b0:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
    24b4:	0b c0       	rjmp	.+22     	; 0x24cc <LCD_String_xy+0x72>
	else if (row == 4 && pos<16){
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	84 30       	cpi	r24, 0x04	; 4
    24ba:	41 f4       	brne	.+16     	; 0x24cc <LCD_String_xy+0x72>
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	80 31       	cpi	r24, 0x10	; 16
    24c0:	28 f4       	brcc	.+10     	; 0x24cc <LCD_String_xy+0x72>
	LCD_send_cmd((pos & 0x0F)|0xD4);}	/* Command of Fourth row and required position<16 */
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	8b 70       	andi	r24, 0x0B	; 11
    24c6:	84 6d       	ori	r24, 0xD4	; 212
    24c8:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
	LCD_out(str);		/* Call LCD output function */
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_out>
}
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <actuator_on>:
 *      Author: Marwa
 */

#include "actuator.h"
// function for powering on different actuators
void actuator_on(uint8_t actuator_port,uint8_t actuator_pin){
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <actuator_on+0x6>
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT(actuator_port,actuator_pin);
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	02 2e       	mov	r0, r18
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <actuator_on+0x20>
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	0a 94       	dec	r0
    2504:	e2 f7       	brpl	.-8      	; 0x24fe <actuator_on+0x1c>
    2506:	98 2f       	mov	r25, r24
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	89 2b       	or	r24, r25
    250c:	89 83       	std	Y+1, r24	; 0x01
}
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <actuator_off>:
//function for powering off different actuators
void actuator_off(uint8_t actuator_port,uint8_t actuator_pin){
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	00 d0       	rcall	.+0      	; 0x251e <actuator_off+0x6>
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	6a 83       	std	Y+2, r22	; 0x02
	CLEAR_BIT(actuator_port,actuator_pin);
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	02 2e       	mov	r0, r18
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <actuator_off+0x20>
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	0a 94       	dec	r0
    253a:	e2 f7       	brpl	.-8      	; 0x2534 <actuator_off+0x1c>
    253c:	98 2f       	mov	r25, r24
    253e:	90 95       	com	r25
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	89 23       	and	r24, r25
    2544:	89 83       	std	Y+1, r24	; 0x01
}
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <main>:
void ext_interrupt();
int RTC_BCD2DEC(int val);
void RTC_Read_Clock(char read_clock_address);
void RTC_Count_down_Timer();

int main(){
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62

	//complete except timer and DHT
	ADC_init();//initializing the ADC
    2558:	0e 94 d5 07 	call	0xfaa	; 0xfaa <ADC_init>
	LCD_init();//initializing the LCD
    255c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_init>
	keypad_init();//initializing the keypad
    2560:	0e 94 c3 09 	call	0x1386	; 0x1386 <keypad_init>
	I2C_Init();
    2564:	0e 94 82 08 	call	0x1104	; 0x1104 <I2C_Init>
	ext_interrupt(); //calling the initializing of the external interrupts
    2568:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <ext_interrupt>
	//Initializing inputs and outputs
	// all leds ,fan , buzzer and peliter are inputs
	// potentiometer is input
	SET_BIT(DDRB,RED_LED);
    256c:	a7 e3       	ldi	r26, 0x37	; 55
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e7 e3       	ldi	r30, 0x37	; 55
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	80 68       	ori	r24, 0x80	; 128
    2578:	8c 93       	st	X, r24
	SET_BIT(DDRA,GREEN_LED);
    257a:	aa e3       	ldi	r26, 0x3A	; 58
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	ea e3       	ldi	r30, 0x3A	; 58
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	80 61       	ori	r24, 0x10	; 16
    2586:	8c 93       	st	X, r24
	SET_BIT(DDRC,PELITER);
    2588:	a4 e3       	ldi	r26, 0x34	; 52
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e4 e3       	ldi	r30, 0x34	; 52
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	80 68       	ori	r24, 0x80	; 128
    2594:	8c 93       	st	X, r24
	SET_BIT(DDRC,BUZZER);
    2596:	a4 e3       	ldi	r26, 0x34	; 52
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	e4 e3       	ldi	r30, 0x34	; 52
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	80 64       	ori	r24, 0x40	; 64
    25a2:	8c 93       	st	X, r24
	SET_BIT(DDRA,FAN);
    25a4:	aa e3       	ldi	r26, 0x3A	; 58
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	ea e3       	ldi	r30, 0x3A	; 58
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	80 68       	ori	r24, 0x80	; 128
    25b0:	8c 93       	st	X, r24
	CLEAR_BIT(DDRA,POTENTIOMETER);
    25b2:	aa e3       	ldi	r26, 0x3A	; 58
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	ea e3       	ldi	r30, 0x3A	; 58
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	8e 7f       	andi	r24, 0xFE	; 254
    25be:	8c 93       	st	X, r24

	//LCD commands
	LCD_send_cmd(LCD_force_cursor_begining);//set the cursor at the beginning of the LCD
    25c0:	80 ec       	ldi	r24, 0xC0	; 192
    25c2:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
	LCD_send_cmd(LCD_clear);//clear the LCD
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>

	while (1){
		startTime = 0;
    25cc:	10 92 f6 02 	sts	0x02F6, r1
    25d0:	10 92 f7 02 	sts	0x02F7, r1
    25d4:	10 92 f8 02 	sts	0x02F8, r1
    25d8:	10 92 f9 02 	sts	0x02F9, r1
		currentTime =0;
    25dc:	10 92 fa 02 	sts	0x02FA, r1
    25e0:	10 92 fb 02 	sts	0x02FB, r1
    25e4:	10 92 fc 02 	sts	0x02FC, r1
    25e8:	10 92 fd 02 	sts	0x02FD, r1
		elapsedTime= 0;
    25ec:	10 92 fe 02 	sts	0x02FE, r1
    25f0:	10 92 ff 02 	sts	0x02FF, r1
    25f4:	10 92 00 03 	sts	0x0300, r1
    25f8:	10 92 01 03 	sts	0x0301, r1
		LCD_init();//initializing the LCD
    25fc:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_init>
		LCD_send_cmd(LCD_return_home); //return home command for the LCD
    2600:	82 e0       	ldi	r24, 0x02	; 2
    2602:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
		LCD_String_xy(1,1,"WELCOME"); //print the string of the welcome message in the first row and first column
    2606:	20 e6       	ldi	r18, 0x60	; 96
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	61 e0       	ldi	r22, 0x01	; 1
    260e:	a9 01       	movw	r20, r18
    2610:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
		LCD_String_xy(2,1,"Automatic press 1");//print the string of the Automatic mode  in the second row and first column
    2614:	28 e6       	ldi	r18, 0x68	; 104
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	82 e0       	ldi	r24, 0x02	; 2
    261a:	61 e0       	ldi	r22, 0x01	; 1
    261c:	a9 01       	movw	r20, r18
    261e:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
		LCD_String_xy(3,1,"Manual press 2");//print the string of the manual mode in the third row and first column
    2622:	2a e7       	ldi	r18, 0x7A	; 122
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	83 e0       	ldi	r24, 0x03	; 3
    2628:	61 e0       	ldi	r22, 0x01	; 1
    262a:	a9 01       	movw	r20, r18
    262c:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
		switch_pressed=detect_sw(); //to detect which switch is pressed
    2630:	0e 94 d5 09 	call	0x13aa	; 0x13aa <detect_sw>
    2634:	80 93 75 03 	sts	0x0375, r24

		if(switch_pressed==1){    //mode automatic is selected
    2638:	80 91 75 03 	lds	r24, 0x0375
    263c:	81 30       	cpi	r24, 0x01	; 1
    263e:	19 f4       	brne	.+6      	; 0x2646 <main+0xf6>

			automatic(); // call automatic function
    2640:	0e 94 3d 13 	call	0x267a	; 0x267a <automatic>
    2644:	c3 cf       	rjmp	.-122    	; 0x25cc <main+0x7c>
		}
		else if(switch_pressed==2){//mode manual is selected
    2646:	80 91 75 03 	lds	r24, 0x0375
    264a:	82 30       	cpi	r24, 0x02	; 2
    264c:	09 f0       	breq	.+2      	; 0x2650 <main+0x100>
    264e:	be cf       	rjmp	.-132    	; 0x25cc <main+0x7c>

			manual(); // call manual function
    2650:	0e 94 4a 1a 	call	0x3494	; 0x3494 <manual>
    2654:	bb cf       	rjmp	.-138    	; 0x25cc <main+0x7c>

00002656 <__vector_2>:
	}

return 0; // termination of the code

}
ISR(INT1_vect){     //when interrupt 1 is triggered change start to 0 to force the system to turn of
    2656:	1f 92       	push	r1
    2658:	0f 92       	push	r0
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	0f 92       	push	r0
    265e:	11 24       	eor	r1, r1
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
	start=0;
    2668:	10 92 ef 02 	sts	0x02EF, r1
}
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	0f 90       	pop	r0
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	0f 90       	pop	r0
    2676:	1f 90       	pop	r1
    2678:	18 95       	reti

0000267a <automatic>:
void automatic(){
    267a:	af 92       	push	r10
    267c:	bf 92       	push	r11
    267e:	cf 92       	push	r12
    2680:	df 92       	push	r13
    2682:	ef 92       	push	r14
    2684:	ff 92       	push	r15
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	c6 55       	subi	r28, 0x56	; 86
    2694:	d0 40       	sbci	r29, 0x00	; 0
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
		state=1; // set state variable to 1 for automatic mode
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	80 93 ee 02 	sts	0x02EE, r24
		LCD_send_cmd(LCD_clear);//clear LCD
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
    26ac:	31 c4       	rjmp	.+2146   	; 0x2f10 <automatic+0x896>
		while(switch_pressed!=5||switch_pressed!=6||switch_pressed!=7||switch_pressed!=8||switch_pressed!=9){
		LCD_String_xy(1,1,"PLA 5  ABS 6  "); //display the message in the first row and first column
    26ae:	29 e8       	ldi	r18, 0x89	; 137
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	61 e0       	ldi	r22, 0x01	; 1
    26b6:	a9 01       	movw	r20, r18
    26b8:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
		LCD_String_xy(2,1,"TPU 7  ASA 8"); //display the message in the second row and first column
    26bc:	28 e9       	ldi	r18, 0x98	; 152
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	61 e0       	ldi	r22, 0x01	; 1
    26c4:	a9 01       	movw	r20, r18
    26c6:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
		LCD_String_xy(3,1,"PC 9"); //display the message in the third row and first column
    26ca:	25 ea       	ldi	r18, 0xA5	; 165
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	83 e0       	ldi	r24, 0x03	; 3
    26d0:	61 e0       	ldi	r22, 0x01	; 1
    26d2:	a9 01       	movw	r20, r18
    26d4:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
		switch_pressed=detect_sw(); //to detect which switch is pressed
    26d8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <detect_sw>
    26dc:	80 93 75 03 	sts	0x0375, r24
		if(switch_pressed==5){ //mode automatic is selected
    26e0:	80 91 75 03 	lds	r24, 0x0375
    26e4:	85 30       	cpi	r24, 0x05	; 5
    26e6:	09 f0       	breq	.+2      	; 0x26ea <automatic+0x70>
    26e8:	fe c0       	rjmp	.+508    	; 0x28e6 <automatic+0x26c>
			temperature=45;//setting the temperature
    26ea:	8d e2       	ldi	r24, 0x2D	; 45
    26ec:	80 93 e8 02 	sts	0x02E8, r24
			time=360;//time in second --> 6 min
    26f0:	88 e6       	ldi	r24, 0x68	; 104
    26f2:	91 e0       	ldi	r25, 0x01	; 1
    26f4:	a0 e0       	ldi	r26, 0x00	; 0
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	80 93 e9 02 	sts	0x02E9, r24
    26fc:	90 93 ea 02 	sts	0x02EA, r25
    2700:	a0 93 eb 02 	sts	0x02EB, r26
    2704:	b0 93 ec 02 	sts	0x02EC, r27
			LCD_send_cmd(LCD_clear);//clear LCD
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
			LCD_send_cmd(LCD_return_home);//return home
    270e:	82 e0       	ldi	r24, 0x02	; 2
    2710:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
			LCD_String_xy(1,1,"switch 5 is pressed");//display the message in the first row and first column
    2714:	2a ea       	ldi	r18, 0xAA	; 170
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	61 e0       	ldi	r22, 0x01	; 1
    271c:	a9 01       	movw	r20, r18
    271e:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
			LCD_String_xy(2,1,"Enabling PLA mode"); //display the message in the second row and first column
    2722:	2e eb       	ldi	r18, 0xBE	; 190
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	a9 01       	movw	r20, r18
    272c:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
			sprintf(to_be_printed_third_row,"temperature= %d C",temperature);//concatenate the strings and store them in to_be_printed_third_row global variable
    2730:	80 91 e8 02 	lds	r24, 0x02E8
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	00 d0       	rcall	.+0      	; 0x273a <automatic+0xc0>
    273a:	00 d0       	rcall	.+0      	; 0x273c <automatic+0xc2>
    273c:	00 d0       	rcall	.+0      	; 0x273e <automatic+0xc4>
    273e:	ed b7       	in	r30, 0x3d	; 61
    2740:	fe b7       	in	r31, 0x3e	; 62
    2742:	31 96       	adiw	r30, 0x01	; 1
    2744:	81 e6       	ldi	r24, 0x61	; 97
    2746:	93 e0       	ldi	r25, 0x03	; 3
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	80 83       	st	Z, r24
    274c:	80 ed       	ldi	r24, 0xD0	; 208
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	93 83       	std	Z+3, r25	; 0x03
    2752:	82 83       	std	Z+2, r24	; 0x02
    2754:	35 83       	std	Z+5, r19	; 0x05
    2756:	24 83       	std	Z+4, r18	; 0x04
    2758:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <sprintf>
    275c:	6d b7       	in	r22, 0x3d	; 61
    275e:	7e b7       	in	r23, 0x3e	; 62
    2760:	6a 5f       	subi	r22, 0xFA	; 250
    2762:	7f 4f       	sbci	r23, 0xFF	; 255
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	7e bf       	out	0x3e, r23	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	6d bf       	out	0x3d, r22	; 61
			LCD_String_xy(3,1,to_be_printed_third_row);//print the string of the temperature in the third row and first column
    276e:	21 e6       	ldi	r18, 0x61	; 97
    2770:	33 e0       	ldi	r19, 0x03	; 3
    2772:	83 e0       	ldi	r24, 0x03	; 3
    2774:	61 e0       	ldi	r22, 0x01	; 1
    2776:	a9 01       	movw	r20, r18
    2778:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
    277c:	fe 01       	movw	r30, r28
    277e:	ef 5a       	subi	r30, 0xAF	; 175
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e4       	ldi	r25, 0x40	; 64
    2786:	ac e1       	ldi	r26, 0x1C	; 28
    2788:	b6 e4       	ldi	r27, 0x46	; 70
    278a:	80 83       	st	Z, r24
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	a2 83       	std	Z+2, r26	; 0x02
    2790:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2792:	8e 01       	movw	r16, r28
    2794:	03 5b       	subi	r16, 0xB3	; 179
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	fe 01       	movw	r30, r28
    279a:	ef 5a       	subi	r30, 0xAF	; 175
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4a e7       	ldi	r20, 0x7A	; 122
    27ac:	53 e4       	ldi	r21, 0x43	; 67
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	f8 01       	movw	r30, r16
    27b8:	80 83       	st	Z, r24
    27ba:	91 83       	std	Z+1, r25	; 0x01
    27bc:	a2 83       	std	Z+2, r26	; 0x02
    27be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27c0:	fe 01       	movw	r30, r28
    27c2:	e3 5b       	subi	r30, 0xB3	; 179
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    27da:	88 23       	and	r24, r24
    27dc:	44 f4       	brge	.+16     	; 0x27ee <automatic+0x174>
		__ticks = 1;
    27de:	fe 01       	movw	r30, r28
    27e0:	e5 5b       	subi	r30, 0xB5	; 181
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
    27ec:	64 c0       	rjmp	.+200    	; 0x28b6 <automatic+0x23c>
	else if (__tmp > 65535)
    27ee:	fe 01       	movw	r30, r28
    27f0:	e3 5b       	subi	r30, 0xB3	; 179
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	60 81       	ld	r22, Z
    27f6:	71 81       	ldd	r23, Z+1	; 0x01
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	93 81       	ldd	r25, Z+3	; 0x03
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	3f ef       	ldi	r19, 0xFF	; 255
    2800:	4f e7       	ldi	r20, 0x7F	; 127
    2802:	57 e4       	ldi	r21, 0x47	; 71
    2804:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2808:	18 16       	cp	r1, r24
    280a:	0c f0       	brlt	.+2      	; 0x280e <automatic+0x194>
    280c:	43 c0       	rjmp	.+134    	; 0x2894 <automatic+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280e:	fe 01       	movw	r30, r28
    2810:	ef 5a       	subi	r30, 0xAF	; 175
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	60 81       	ld	r22, Z
    2816:	71 81       	ldd	r23, Z+1	; 0x01
    2818:	82 81       	ldd	r24, Z+2	; 0x02
    281a:	93 81       	ldd	r25, Z+3	; 0x03
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e2       	ldi	r20, 0x20	; 32
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	8e 01       	movw	r16, r28
    282e:	05 5b       	subi	r16, 0xB5	; 181
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	f8 01       	movw	r30, r16
    2840:	91 83       	std	Z+1, r25	; 0x01
    2842:	80 83       	st	Z, r24
    2844:	1f c0       	rjmp	.+62     	; 0x2884 <automatic+0x20a>
    2846:	fe 01       	movw	r30, r28
    2848:	e7 5b       	subi	r30, 0xB7	; 183
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	89 e1       	ldi	r24, 0x19	; 25
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	80 83       	st	Z, r24
    2854:	fe 01       	movw	r30, r28
    2856:	e7 5b       	subi	r30, 0xB7	; 183
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <automatic+0x1e4>
    2862:	fe 01       	movw	r30, r28
    2864:	e7 5b       	subi	r30, 0xB7	; 183
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286c:	de 01       	movw	r26, r28
    286e:	a5 5b       	subi	r26, 0xB5	; 181
    2870:	bf 4f       	sbci	r27, 0xFF	; 255
    2872:	fe 01       	movw	r30, r28
    2874:	e5 5b       	subi	r30, 0xB5	; 181
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	91 81       	ldd	r25, Z+1	; 0x01
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	11 96       	adiw	r26, 0x01	; 1
    2880:	9c 93       	st	X, r25
    2882:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2884:	fe 01       	movw	r30, r28
    2886:	e5 5b       	subi	r30, 0xB5	; 181
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	d1 f6       	brne	.-76     	; 0x2846 <automatic+0x1cc>
    2892:	57 c3       	rjmp	.+1710   	; 0x2f42 <automatic+0x8c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2894:	8e 01       	movw	r16, r28
    2896:	05 5b       	subi	r16, 0xB5	; 181
    2898:	1f 4f       	sbci	r17, 0xFF	; 255
    289a:	fe 01       	movw	r30, r28
    289c:	e3 5b       	subi	r30, 0xB3	; 179
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	60 81       	ld	r22, Z
    28a2:	71 81       	ldd	r23, Z+1	; 0x01
    28a4:	82 81       	ldd	r24, Z+2	; 0x02
    28a6:	93 81       	ldd	r25, Z+3	; 0x03
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	f8 01       	movw	r30, r16
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	80 83       	st	Z, r24
    28b6:	de 01       	movw	r26, r28
    28b8:	a9 5b       	subi	r26, 0xB9	; 185
    28ba:	bf 4f       	sbci	r27, 0xFF	; 255
    28bc:	fe 01       	movw	r30, r28
    28be:	e5 5b       	subi	r30, 0xB5	; 181
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 81       	ld	r24, Z
    28c4:	91 81       	ldd	r25, Z+1	; 0x01
    28c6:	11 96       	adiw	r26, 0x01	; 1
    28c8:	9c 93       	st	X, r25
    28ca:	8e 93       	st	-X, r24
    28cc:	fe 01       	movw	r30, r28
    28ce:	e9 5b       	subi	r30, 0xB9	; 185
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	91 81       	ldd	r25, Z+1	; 0x01
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <automatic+0x25c>
    28da:	fe 01       	movw	r30, r28
    28dc:	e9 5b       	subi	r30, 0xB9	; 185
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	80 83       	st	Z, r24
    28e4:	2e c3       	rjmp	.+1628   	; 0x2f42 <automatic+0x8c8>
			_delay_ms(10000); // delay for 10 seconds
			break;
		}
		else if(switch_pressed==6){//mode manual is selected
    28e6:	80 91 75 03 	lds	r24, 0x0375
    28ea:	86 30       	cpi	r24, 0x06	; 6
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <automatic+0x276>
    28ee:	cf c0       	rjmp	.+414    	; 0x2a8e <automatic+0x414>
			temperature=65; //setting the temperature
    28f0:	81 e4       	ldi	r24, 0x41	; 65
    28f2:	80 93 e8 02 	sts	0x02E8, r24
			time=360; //time in second --> 6 min
    28f6:	88 e6       	ldi	r24, 0x68	; 104
    28f8:	91 e0       	ldi	r25, 0x01	; 1
    28fa:	a0 e0       	ldi	r26, 0x00	; 0
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	80 93 e9 02 	sts	0x02E9, r24
    2902:	90 93 ea 02 	sts	0x02EA, r25
    2906:	a0 93 eb 02 	sts	0x02EB, r26
    290a:	b0 93 ec 02 	sts	0x02EC, r27
			LCD_send_cmd(LCD_clear);//clear LCD
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
			LCD_send_cmd(LCD_return_home);//return home
    2914:	82 e0       	ldi	r24, 0x02	; 2
    2916:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
			LCD_String_xy(1,1,"switch 6 is pressed");//display the message in the first row and first column
    291a:	22 ee       	ldi	r18, 0xE2	; 226
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	61 e0       	ldi	r22, 0x01	; 1
    2922:	a9 01       	movw	r20, r18
    2924:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
			LCD_String_xy(2,1,"Enabling ABS manual");  //display the message in the second row and first column
    2928:	26 ef       	ldi	r18, 0xF6	; 246
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	a9 01       	movw	r20, r18
    2932:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
			sprintf(to_be_printed_third_row,"temperature= %d C",temperature);//concatenate the strings and store them in to_be_printed_third_row global variable
    2936:	80 91 e8 02 	lds	r24, 0x02E8
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	00 d0       	rcall	.+0      	; 0x2940 <automatic+0x2c6>
    2940:	00 d0       	rcall	.+0      	; 0x2942 <automatic+0x2c8>
    2942:	00 d0       	rcall	.+0      	; 0x2944 <automatic+0x2ca>
    2944:	ed b7       	in	r30, 0x3d	; 61
    2946:	fe b7       	in	r31, 0x3e	; 62
    2948:	31 96       	adiw	r30, 0x01	; 1
    294a:	81 e6       	ldi	r24, 0x61	; 97
    294c:	93 e0       	ldi	r25, 0x03	; 3
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24
    2952:	80 ed       	ldi	r24, 0xD0	; 208
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	93 83       	std	Z+3, r25	; 0x03
    2958:	82 83       	std	Z+2, r24	; 0x02
    295a:	35 83       	std	Z+5, r19	; 0x05
    295c:	24 83       	std	Z+4, r18	; 0x04
    295e:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <sprintf>
    2962:	6d b7       	in	r22, 0x3d	; 61
    2964:	7e b7       	in	r23, 0x3e	; 62
    2966:	6a 5f       	subi	r22, 0xFA	; 250
    2968:	7f 4f       	sbci	r23, 0xFF	; 255
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	7e bf       	out	0x3e, r23	; 62
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	6d bf       	out	0x3d, r22	; 61
			LCD_String_xy(3,1,to_be_printed_third_row);//print the string of the temperature in the third row and first column
    2974:	21 e6       	ldi	r18, 0x61	; 97
    2976:	33 e0       	ldi	r19, 0x03	; 3
    2978:	83 e0       	ldi	r24, 0x03	; 3
    297a:	61 e0       	ldi	r22, 0x01	; 1
    297c:	a9 01       	movw	r20, r18
    297e:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
    2982:	fe 01       	movw	r30, r28
    2984:	ed 5b       	subi	r30, 0xBD	; 189
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e4       	ldi	r25, 0x40	; 64
    298c:	ac e1       	ldi	r26, 0x1C	; 28
    298e:	b6 e4       	ldi	r27, 0x46	; 70
    2990:	80 83       	st	Z, r24
    2992:	91 83       	std	Z+1, r25	; 0x01
    2994:	a2 83       	std	Z+2, r26	; 0x02
    2996:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2998:	8e 01       	movw	r16, r28
    299a:	01 5c       	subi	r16, 0xC1	; 193
    299c:	1f 4f       	sbci	r17, 0xFF	; 255
    299e:	fe 01       	movw	r30, r28
    29a0:	ed 5b       	subi	r30, 0xBD	; 189
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	60 81       	ld	r22, Z
    29a6:	71 81       	ldd	r23, Z+1	; 0x01
    29a8:	82 81       	ldd	r24, Z+2	; 0x02
    29aa:	93 81       	ldd	r25, Z+3	; 0x03
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a e7       	ldi	r20, 0x7A	; 122
    29b2:	53 e4       	ldi	r21, 0x43	; 67
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	f8 01       	movw	r30, r16
    29be:	80 83       	st	Z, r24
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	a2 83       	std	Z+2, r26	; 0x02
    29c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29c6:	fe 01       	movw	r30, r28
    29c8:	ff 96       	adiw	r30, 0x3f	; 63
    29ca:	60 81       	ld	r22, Z
    29cc:	71 81       	ldd	r23, Z+1	; 0x01
    29ce:	82 81       	ldd	r24, Z+2	; 0x02
    29d0:	93 81       	ldd	r25, Z+3	; 0x03
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <automatic+0x372>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9e af       	std	Y+62, r25	; 0x3e
    29e8:	8d af       	std	Y+61, r24	; 0x3d
    29ea:	46 c0       	rjmp	.+140    	; 0x2a78 <automatic+0x3fe>
	else if (__tmp > 65535)
    29ec:	fe 01       	movw	r30, r28
    29ee:	ff 96       	adiw	r30, 0x3f	; 63
    29f0:	60 81       	ld	r22, Z
    29f2:	71 81       	ldd	r23, Z+1	; 0x01
    29f4:	82 81       	ldd	r24, Z+2	; 0x02
    29f6:	93 81       	ldd	r25, Z+3	; 0x03
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	3f ef       	ldi	r19, 0xFF	; 255
    29fc:	4f e7       	ldi	r20, 0x7F	; 127
    29fe:	57 e4       	ldi	r21, 0x47	; 71
    2a00:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a04:	18 16       	cp	r1, r24
    2a06:	64 f5       	brge	.+88     	; 0x2a60 <automatic+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ed 5b       	subi	r30, 0xBD	; 189
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	60 81       	ld	r22, Z
    2a10:	71 81       	ldd	r23, Z+1	; 0x01
    2a12:	82 81       	ldd	r24, Z+2	; 0x02
    2a14:	93 81       	ldd	r25, Z+3	; 0x03
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	40 e2       	ldi	r20, 0x20	; 32
    2a1c:	51 e4       	ldi	r21, 0x41	; 65
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	bc 01       	movw	r22, r24
    2a28:	cd 01       	movw	r24, r26
    2a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	9e af       	std	Y+62, r25	; 0x3e
    2a34:	8d af       	std	Y+61, r24	; 0x3d
    2a36:	0f c0       	rjmp	.+30     	; 0x2a56 <automatic+0x3dc>
    2a38:	89 e1       	ldi	r24, 0x19	; 25
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9c af       	std	Y+60, r25	; 0x3c
    2a3e:	8b af       	std	Y+59, r24	; 0x3b
    2a40:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a42:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	f1 f7       	brne	.-4      	; 0x2a44 <automatic+0x3ca>
    2a48:	9c af       	std	Y+60, r25	; 0x3c
    2a4a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	9e af       	std	Y+62, r25	; 0x3e
    2a54:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a56:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a58:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	69 f7       	brne	.-38     	; 0x2a38 <automatic+0x3be>
    2a5e:	71 c2       	rjmp	.+1250   	; 0x2f42 <automatic+0x8c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a60:	fe 01       	movw	r30, r28
    2a62:	ff 96       	adiw	r30, 0x3f	; 63
    2a64:	60 81       	ld	r22, Z
    2a66:	71 81       	ldd	r23, Z+1	; 0x01
    2a68:	82 81       	ldd	r24, Z+2	; 0x02
    2a6a:	93 81       	ldd	r25, Z+3	; 0x03
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9e af       	std	Y+62, r25	; 0x3e
    2a76:	8d af       	std	Y+61, r24	; 0x3d
    2a78:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a7c:	9a af       	std	Y+58, r25	; 0x3a
    2a7e:	89 af       	std	Y+57, r24	; 0x39
    2a80:	89 ad       	ldd	r24, Y+57	; 0x39
    2a82:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <automatic+0x40a>
    2a88:	9a af       	std	Y+58, r25	; 0x3a
    2a8a:	89 af       	std	Y+57, r24	; 0x39
    2a8c:	5a c2       	rjmp	.+1204   	; 0x2f42 <automatic+0x8c8>
			_delay_ms(10000); // delay for 10 seconds
			break;
		}
		else if(switch_pressed==7){//mode manual is selected
    2a8e:	80 91 75 03 	lds	r24, 0x0375
    2a92:	87 30       	cpi	r24, 0x07	; 7
    2a94:	09 f0       	breq	.+2      	; 0x2a98 <automatic+0x41e>
    2a96:	bc c0       	rjmp	.+376    	; 0x2c10 <automatic+0x596>
			temperature=55; //setting the temperature
    2a98:	87 e3       	ldi	r24, 0x37	; 55
    2a9a:	80 93 e8 02 	sts	0x02E8, r24
			time=600;   //time in second --> 10 min
    2a9e:	88 e5       	ldi	r24, 0x58	; 88
    2aa0:	92 e0       	ldi	r25, 0x02	; 2
    2aa2:	a0 e0       	ldi	r26, 0x00	; 0
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	80 93 e9 02 	sts	0x02E9, r24
    2aaa:	90 93 ea 02 	sts	0x02EA, r25
    2aae:	a0 93 eb 02 	sts	0x02EB, r26
    2ab2:	b0 93 ec 02 	sts	0x02EC, r27
			LCD_send_cmd(LCD_clear);//clear LCD
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
			LCD_send_cmd(LCD_return_home);//return home
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
			LCD_String_xy(1,1,"switch 7 is pressed"); //display the message in the first row and first column
    2ac2:	2a e0       	ldi	r18, 0x0A	; 10
    2ac4:	31 e0       	ldi	r19, 0x01	; 1
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	61 e0       	ldi	r22, 0x01	; 1
    2aca:	a9 01       	movw	r20, r18
    2acc:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
			LCD_String_xy(2,1,"Enabling TPU manual");//display the message in the second row and first column
    2ad0:	2e e1       	ldi	r18, 0x1E	; 30
    2ad2:	31 e0       	ldi	r19, 0x01	; 1
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	a9 01       	movw	r20, r18
    2ada:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
			sprintf(to_be_printed_third_row,"temperature= %d C",temperature);//concatenate the strings and store them in to_be_printed_third_row global variable
    2ade:	80 91 e8 02 	lds	r24, 0x02E8
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	00 d0       	rcall	.+0      	; 0x2ae8 <automatic+0x46e>
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <automatic+0x470>
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <automatic+0x472>
    2aec:	ed b7       	in	r30, 0x3d	; 61
    2aee:	fe b7       	in	r31, 0x3e	; 62
    2af0:	31 96       	adiw	r30, 0x01	; 1
    2af2:	81 e6       	ldi	r24, 0x61	; 97
    2af4:	93 e0       	ldi	r25, 0x03	; 3
    2af6:	91 83       	std	Z+1, r25	; 0x01
    2af8:	80 83       	st	Z, r24
    2afa:	80 ed       	ldi	r24, 0xD0	; 208
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	93 83       	std	Z+3, r25	; 0x03
    2b00:	82 83       	std	Z+2, r24	; 0x02
    2b02:	35 83       	std	Z+5, r19	; 0x05
    2b04:	24 83       	std	Z+4, r18	; 0x04
    2b06:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <sprintf>
    2b0a:	6d b7       	in	r22, 0x3d	; 61
    2b0c:	7e b7       	in	r23, 0x3e	; 62
    2b0e:	6a 5f       	subi	r22, 0xFA	; 250
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	7e bf       	out	0x3e, r23	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	6d bf       	out	0x3d, r22	; 61
			LCD_String_xy(3,1,to_be_printed_third_row);//print the string of the temperature in the third row and first column
    2b1c:	21 e6       	ldi	r18, 0x61	; 97
    2b1e:	33 e0       	ldi	r19, 0x03	; 3
    2b20:	83 e0       	ldi	r24, 0x03	; 3
    2b22:	61 e0       	ldi	r22, 0x01	; 1
    2b24:	a9 01       	movw	r20, r18
    2b26:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	90 e4       	ldi	r25, 0x40	; 64
    2b2e:	ac e1       	ldi	r26, 0x1C	; 28
    2b30:	b6 e4       	ldi	r27, 0x46	; 70
    2b32:	8d ab       	std	Y+53, r24	; 0x35
    2b34:	9e ab       	std	Y+54, r25	; 0x36
    2b36:	af ab       	std	Y+55, r26	; 0x37
    2b38:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b3c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b3e:	8f a9       	ldd	r24, Y+55	; 0x37
    2b40:	98 ad       	ldd	r25, Y+56	; 0x38
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	4a e7       	ldi	r20, 0x7A	; 122
    2b48:	53 e4       	ldi	r21, 0x43	; 67
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	89 ab       	std	Y+49, r24	; 0x31
    2b54:	9a ab       	std	Y+50, r25	; 0x32
    2b56:	ab ab       	std	Y+51, r26	; 0x33
    2b58:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b60:	9c a9       	ldd	r25, Y+52	; 0x34
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e8       	ldi	r20, 0x80	; 128
    2b68:	5f e3       	ldi	r21, 0x3F	; 63
    2b6a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b6e:	88 23       	and	r24, r24
    2b70:	2c f4       	brge	.+10     	; 0x2b7c <automatic+0x502>
		__ticks = 1;
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	98 ab       	std	Y+48, r25	; 0x30
    2b78:	8f a7       	std	Y+47, r24	; 0x2f
    2b7a:	3f c0       	rjmp	.+126    	; 0x2bfa <automatic+0x580>
	else if (__tmp > 65535)
    2b7c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b7e:	7a a9       	ldd	r23, Y+50	; 0x32
    2b80:	8b a9       	ldd	r24, Y+51	; 0x33
    2b82:	9c a9       	ldd	r25, Y+52	; 0x34
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	3f ef       	ldi	r19, 0xFF	; 255
    2b88:	4f e7       	ldi	r20, 0x7F	; 127
    2b8a:	57 e4       	ldi	r21, 0x47	; 71
    2b8c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b90:	18 16       	cp	r1, r24
    2b92:	4c f5       	brge	.+82     	; 0x2be6 <automatic+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b94:	6d a9       	ldd	r22, Y+53	; 0x35
    2b96:	7e a9       	ldd	r23, Y+54	; 0x36
    2b98:	8f a9       	ldd	r24, Y+55	; 0x37
    2b9a:	98 ad       	ldd	r25, Y+56	; 0x38
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e2       	ldi	r20, 0x20	; 32
    2ba2:	51 e4       	ldi	r21, 0x41	; 65
    2ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	bc 01       	movw	r22, r24
    2bae:	cd 01       	movw	r24, r26
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	98 ab       	std	Y+48, r25	; 0x30
    2bba:	8f a7       	std	Y+47, r24	; 0x2f
    2bbc:	0f c0       	rjmp	.+30     	; 0x2bdc <automatic+0x562>
    2bbe:	89 e1       	ldi	r24, 0x19	; 25
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	9e a7       	std	Y+46, r25	; 0x2e
    2bc4:	8d a7       	std	Y+45, r24	; 0x2d
    2bc6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bc8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <automatic+0x550>
    2bce:	9e a7       	std	Y+46, r25	; 0x2e
    2bd0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd4:	98 a9       	ldd	r25, Y+48	; 0x30
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	98 ab       	std	Y+48, r25	; 0x30
    2bda:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bde:	98 a9       	ldd	r25, Y+48	; 0x30
    2be0:	00 97       	sbiw	r24, 0x00	; 0
    2be2:	69 f7       	brne	.-38     	; 0x2bbe <automatic+0x544>
    2be4:	ae c1       	rjmp	.+860    	; 0x2f42 <automatic+0x8c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be6:	69 a9       	ldd	r22, Y+49	; 0x31
    2be8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bea:	8b a9       	ldd	r24, Y+51	; 0x33
    2bec:	9c a9       	ldd	r25, Y+52	; 0x34
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	98 ab       	std	Y+48, r25	; 0x30
    2bf8:	8f a7       	std	Y+47, r24	; 0x2f
    2bfa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bfc:	98 a9       	ldd	r25, Y+48	; 0x30
    2bfe:	9c a7       	std	Y+44, r25	; 0x2c
    2c00:	8b a7       	std	Y+43, r24	; 0x2b
    2c02:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c04:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <automatic+0x58c>
    2c0a:	9c a7       	std	Y+44, r25	; 0x2c
    2c0c:	8b a7       	std	Y+43, r24	; 0x2b
    2c0e:	99 c1       	rjmp	.+818    	; 0x2f42 <automatic+0x8c8>
			_delay_ms(10000); // delay for 10 seconds
			break;
		}
		else if(switch_pressed==8){//mode manual is selected
    2c10:	80 91 75 03 	lds	r24, 0x0375
    2c14:	88 30       	cpi	r24, 0x08	; 8
    2c16:	09 f0       	breq	.+2      	; 0x2c1a <automatic+0x5a0>
    2c18:	bb c0       	rjmp	.+374    	; 0x2d90 <automatic+0x716>
			temperature=80; //setting the temperature
    2c1a:	80 e5       	ldi	r24, 0x50	; 80
    2c1c:	80 93 e8 02 	sts	0x02E8, r24
			time=240;  //time in second --> 4 min
    2c20:	80 ef       	ldi	r24, 0xF0	; 240
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	a0 e0       	ldi	r26, 0x00	; 0
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	80 93 e9 02 	sts	0x02E9, r24
    2c2c:	90 93 ea 02 	sts	0x02EA, r25
    2c30:	a0 93 eb 02 	sts	0x02EB, r26
    2c34:	b0 93 ec 02 	sts	0x02EC, r27
			LCD_send_cmd(LCD_clear);//clear LCD
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
			LCD_send_cmd(LCD_return_home);//return home
    2c3e:	82 e0       	ldi	r24, 0x02	; 2
    2c40:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
			LCD_String_xy(1,1,"switch 8 is pressed");//display the message in the first row and first column
    2c44:	22 e3       	ldi	r18, 0x32	; 50
    2c46:	31 e0       	ldi	r19, 0x01	; 1
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	61 e0       	ldi	r22, 0x01	; 1
    2c4c:	a9 01       	movw	r20, r18
    2c4e:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
			LCD_String_xy(2,1,"Enabling ASA manual");//display the message in the second row and first column
    2c52:	26 e4       	ldi	r18, 0x46	; 70
    2c54:	31 e0       	ldi	r19, 0x01	; 1
    2c56:	82 e0       	ldi	r24, 0x02	; 2
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	a9 01       	movw	r20, r18
    2c5c:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
			sprintf(to_be_printed_third_row,"temperature= %d C",temperature);//concatenate the strings and store them in to_be_printed_third_row global variable
    2c60:	80 91 e8 02 	lds	r24, 0x02E8
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	00 d0       	rcall	.+0      	; 0x2c6a <automatic+0x5f0>
    2c6a:	00 d0       	rcall	.+0      	; 0x2c6c <automatic+0x5f2>
    2c6c:	00 d0       	rcall	.+0      	; 0x2c6e <automatic+0x5f4>
    2c6e:	ed b7       	in	r30, 0x3d	; 61
    2c70:	fe b7       	in	r31, 0x3e	; 62
    2c72:	31 96       	adiw	r30, 0x01	; 1
    2c74:	81 e6       	ldi	r24, 0x61	; 97
    2c76:	93 e0       	ldi	r25, 0x03	; 3
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
    2c7c:	80 ed       	ldi	r24, 0xD0	; 208
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	93 83       	std	Z+3, r25	; 0x03
    2c82:	82 83       	std	Z+2, r24	; 0x02
    2c84:	35 83       	std	Z+5, r19	; 0x05
    2c86:	24 83       	std	Z+4, r18	; 0x04
    2c88:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <sprintf>
    2c8c:	8d b7       	in	r24, 0x3d	; 61
    2c8e:	9e b7       	in	r25, 0x3e	; 62
    2c90:	06 96       	adiw	r24, 0x06	; 6
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	9e bf       	out	0x3e, r25	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	8d bf       	out	0x3d, r24	; 61
			LCD_String_xy(3,1,to_be_printed_third_row);//print the string of the temperature in the third row and first column
    2c9c:	21 e6       	ldi	r18, 0x61	; 97
    2c9e:	33 e0       	ldi	r19, 0x03	; 3
    2ca0:	83 e0       	ldi	r24, 0x03	; 3
    2ca2:	61 e0       	ldi	r22, 0x01	; 1
    2ca4:	a9 01       	movw	r20, r18
    2ca6:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e4       	ldi	r25, 0x40	; 64
    2cae:	ac e1       	ldi	r26, 0x1C	; 28
    2cb0:	b6 e4       	ldi	r27, 0x46	; 70
    2cb2:	8f a3       	std	Y+39, r24	; 0x27
    2cb4:	98 a7       	std	Y+40, r25	; 0x28
    2cb6:	a9 a7       	std	Y+41, r26	; 0x29
    2cb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cba:	6f a1       	ldd	r22, Y+39	; 0x27
    2cbc:	78 a5       	ldd	r23, Y+40	; 0x28
    2cbe:	89 a5       	ldd	r24, Y+41	; 0x29
    2cc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	4a e7       	ldi	r20, 0x7A	; 122
    2cc8:	53 e4       	ldi	r21, 0x43	; 67
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8b a3       	std	Y+35, r24	; 0x23
    2cd4:	9c a3       	std	Y+36, r25	; 0x24
    2cd6:	ad a3       	std	Y+37, r26	; 0x25
    2cd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cda:	6b a1       	ldd	r22, Y+35	; 0x23
    2cdc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cde:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e8       	ldi	r20, 0x80	; 128
    2ce8:	5f e3       	ldi	r21, 0x3F	; 63
    2cea:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2cee:	88 23       	and	r24, r24
    2cf0:	2c f4       	brge	.+10     	; 0x2cfc <automatic+0x682>
		__ticks = 1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	9a a3       	std	Y+34, r25	; 0x22
    2cf8:	89 a3       	std	Y+33, r24	; 0x21
    2cfa:	3f c0       	rjmp	.+126    	; 0x2d7a <automatic+0x700>
	else if (__tmp > 65535)
    2cfc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cfe:	7c a1       	ldd	r23, Y+36	; 0x24
    2d00:	8d a1       	ldd	r24, Y+37	; 0x25
    2d02:	9e a1       	ldd	r25, Y+38	; 0x26
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	3f ef       	ldi	r19, 0xFF	; 255
    2d08:	4f e7       	ldi	r20, 0x7F	; 127
    2d0a:	57 e4       	ldi	r21, 0x47	; 71
    2d0c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	4c f5       	brge	.+82     	; 0x2d66 <automatic+0x6ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d14:	6f a1       	ldd	r22, Y+39	; 0x27
    2d16:	78 a5       	ldd	r23, Y+40	; 0x28
    2d18:	89 a5       	ldd	r24, Y+41	; 0x29
    2d1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e2       	ldi	r20, 0x20	; 32
    2d22:	51 e4       	ldi	r21, 0x41	; 65
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	9a a3       	std	Y+34, r25	; 0x22
    2d3a:	89 a3       	std	Y+33, r24	; 0x21
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <automatic+0x6e2>
    2d3e:	89 e1       	ldi	r24, 0x19	; 25
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	98 a3       	std	Y+32, r25	; 0x20
    2d44:	8f 8f       	std	Y+31, r24	; 0x1f
    2d46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d48:	98 a1       	ldd	r25, Y+32	; 0x20
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <automatic+0x6d0>
    2d4e:	98 a3       	std	Y+32, r25	; 0x20
    2d50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	89 a1       	ldd	r24, Y+33	; 0x21
    2d54:	9a a1       	ldd	r25, Y+34	; 0x22
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9a a3       	std	Y+34, r25	; 0x22
    2d5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	69 f7       	brne	.-38     	; 0x2d3e <automatic+0x6c4>
    2d64:	ee c0       	rjmp	.+476    	; 0x2f42 <automatic+0x8c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	6b a1       	ldd	r22, Y+35	; 0x23
    2d68:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9a a3       	std	Y+34, r25	; 0x22
    2d78:	89 a3       	std	Y+33, r24	; 0x21
    2d7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d80:	8d 8f       	std	Y+29, r24	; 0x1d
    2d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <automatic+0x70c>
    2d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    2d8c:	8d 8f       	std	Y+29, r24	; 0x1d
    2d8e:	d9 c0       	rjmp	.+434    	; 0x2f42 <automatic+0x8c8>
			_delay_ms(10000); // delay for 10 seconds
          break;
		}
		else if(switch_pressed==9){//mode manual is selected
    2d90:	80 91 75 03 	lds	r24, 0x0375
    2d94:	89 30       	cpi	r24, 0x09	; 9
    2d96:	09 f0       	breq	.+2      	; 0x2d9a <automatic+0x720>
    2d98:	bb c0       	rjmp	.+374    	; 0x2f10 <automatic+0x896>
				temperature=85; //setting the temperature
    2d9a:	85 e5       	ldi	r24, 0x55	; 85
    2d9c:	80 93 e8 02 	sts	0x02E8, r24
				time=300;    //time in second --> 5 min
    2da0:	8c e2       	ldi	r24, 0x2C	; 44
    2da2:	91 e0       	ldi	r25, 0x01	; 1
    2da4:	a0 e0       	ldi	r26, 0x00	; 0
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	80 93 e9 02 	sts	0x02E9, r24
    2dac:	90 93 ea 02 	sts	0x02EA, r25
    2db0:	a0 93 eb 02 	sts	0x02EB, r26
    2db4:	b0 93 ec 02 	sts	0x02EC, r27
				LCD_send_cmd(LCD_clear);//clear LCD
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
				LCD_send_cmd(LCD_return_home);//return home
    2dbe:	82 e0       	ldi	r24, 0x02	; 2
    2dc0:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
				LCD_String_xy(1,1,"switch 9 is pressed"); //display the message in the first row and first column
    2dc4:	2a e5       	ldi	r18, 0x5A	; 90
    2dc6:	31 e0       	ldi	r19, 0x01	; 1
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	61 e0       	ldi	r22, 0x01	; 1
    2dcc:	a9 01       	movw	r20, r18
    2dce:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
				LCD_String_xy(2,1,"Enabling PC manual");//display the message in the second row and first column
    2dd2:	2e e6       	ldi	r18, 0x6E	; 110
    2dd4:	31 e0       	ldi	r19, 0x01	; 1
    2dd6:	82 e0       	ldi	r24, 0x02	; 2
    2dd8:	61 e0       	ldi	r22, 0x01	; 1
    2dda:	a9 01       	movw	r20, r18
    2ddc:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
				sprintf(to_be_printed_third_row,"temperature= %d C",temperature);//concatenate the strings and store them in to_be_printed_third_row global variable
    2de0:	80 91 e8 02 	lds	r24, 0x02E8
    2de4:	28 2f       	mov	r18, r24
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <automatic+0x770>
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <automatic+0x772>
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <automatic+0x774>
    2dee:	ed b7       	in	r30, 0x3d	; 61
    2df0:	fe b7       	in	r31, 0x3e	; 62
    2df2:	31 96       	adiw	r30, 0x01	; 1
    2df4:	81 e6       	ldi	r24, 0x61	; 97
    2df6:	93 e0       	ldi	r25, 0x03	; 3
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	80 83       	st	Z, r24
    2dfc:	80 ed       	ldi	r24, 0xD0	; 208
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	93 83       	std	Z+3, r25	; 0x03
    2e02:	82 83       	std	Z+2, r24	; 0x02
    2e04:	35 83       	std	Z+5, r19	; 0x05
    2e06:	24 83       	std	Z+4, r18	; 0x04
    2e08:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <sprintf>
    2e0c:	ed b7       	in	r30, 0x3d	; 61
    2e0e:	fe b7       	in	r31, 0x3e	; 62
    2e10:	36 96       	adiw	r30, 0x06	; 6
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	fe bf       	out	0x3e, r31	; 62
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	ed bf       	out	0x3d, r30	; 61
				LCD_String_xy(3,1,to_be_printed_third_row);//print the string of the temperature in the third row and first column
    2e1c:	21 e6       	ldi	r18, 0x61	; 97
    2e1e:	33 e0       	ldi	r19, 0x03	; 3
    2e20:	83 e0       	ldi	r24, 0x03	; 3
    2e22:	61 e0       	ldi	r22, 0x01	; 1
    2e24:	a9 01       	movw	r20, r18
    2e26:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	90 e4       	ldi	r25, 0x40	; 64
    2e2e:	ac e1       	ldi	r26, 0x1C	; 28
    2e30:	b6 e4       	ldi	r27, 0x46	; 70
    2e32:	89 8f       	std	Y+25, r24	; 0x19
    2e34:	9a 8f       	std	Y+26, r25	; 0x1a
    2e36:	ab 8f       	std	Y+27, r26	; 0x1b
    2e38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2e3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	4a e7       	ldi	r20, 0x7A	; 122
    2e48:	53 e4       	ldi	r21, 0x43	; 67
    2e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	8d 8b       	std	Y+21, r24	; 0x15
    2e54:	9e 8b       	std	Y+22, r25	; 0x16
    2e56:	af 8b       	std	Y+23, r26	; 0x17
    2e58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e60:	98 8d       	ldd	r25, Y+24	; 0x18
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	40 e8       	ldi	r20, 0x80	; 128
    2e68:	5f e3       	ldi	r21, 0x3F	; 63
    2e6a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e6e:	88 23       	and	r24, r24
    2e70:	2c f4       	brge	.+10     	; 0x2e7c <automatic+0x802>
		__ticks = 1;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	9c 8b       	std	Y+20, r25	; 0x14
    2e78:	8b 8b       	std	Y+19, r24	; 0x13
    2e7a:	3f c0       	rjmp	.+126    	; 0x2efa <automatic+0x880>
	else if (__tmp > 65535)
    2e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e80:	8f 89       	ldd	r24, Y+23	; 0x17
    2e82:	98 8d       	ldd	r25, Y+24	; 0x18
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	3f ef       	ldi	r19, 0xFF	; 255
    2e88:	4f e7       	ldi	r20, 0x7F	; 127
    2e8a:	57 e4       	ldi	r21, 0x47	; 71
    2e8c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e90:	18 16       	cp	r1, r24
    2e92:	4c f5       	brge	.+82     	; 0x2ee6 <automatic+0x86c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e94:	69 8d       	ldd	r22, Y+25	; 0x19
    2e96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e2       	ldi	r20, 0x20	; 32
    2ea2:	51 e4       	ldi	r21, 0x41	; 65
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	bc 01       	movw	r22, r24
    2eae:	cd 01       	movw	r24, r26
    2eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	9c 8b       	std	Y+20, r25	; 0x14
    2eba:	8b 8b       	std	Y+19, r24	; 0x13
    2ebc:	0f c0       	rjmp	.+30     	; 0x2edc <automatic+0x862>
    2ebe:	89 e1       	ldi	r24, 0x19	; 25
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	9a 8b       	std	Y+18, r25	; 0x12
    2ec4:	89 8b       	std	Y+17, r24	; 0x11
    2ec6:	89 89       	ldd	r24, Y+17	; 0x11
    2ec8:	9a 89       	ldd	r25, Y+18	; 0x12
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <automatic+0x850>
    2ece:	9a 8b       	std	Y+18, r25	; 0x12
    2ed0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	9c 8b       	std	Y+20, r25	; 0x14
    2eda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2edc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ede:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	69 f7       	brne	.-38     	; 0x2ebe <automatic+0x844>
    2ee4:	2e c0       	rjmp	.+92     	; 0x2f42 <automatic+0x8c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ee8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eea:	8f 89       	ldd	r24, Y+23	; 0x17
    2eec:	98 8d       	ldd	r25, Y+24	; 0x18
    2eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	9c 8b       	std	Y+20, r25	; 0x14
    2ef8:	8b 8b       	std	Y+19, r24	; 0x13
    2efa:	8b 89       	ldd	r24, Y+19	; 0x13
    2efc:	9c 89       	ldd	r25, Y+20	; 0x14
    2efe:	98 8b       	std	Y+16, r25	; 0x10
    2f00:	8f 87       	std	Y+15, r24	; 0x0f
    2f02:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f04:	98 89       	ldd	r25, Y+16	; 0x10
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <automatic+0x88c>
    2f0a:	98 8b       	std	Y+16, r25	; 0x10
    2f0c:	8f 87       	std	Y+15, r24	; 0x0f
    2f0e:	19 c0       	rjmp	.+50     	; 0x2f42 <automatic+0x8c8>
	start=0;
}
void automatic(){
		state=1; // set state variable to 1 for automatic mode
		LCD_send_cmd(LCD_clear);//clear LCD
		while(switch_pressed!=5||switch_pressed!=6||switch_pressed!=7||switch_pressed!=8||switch_pressed!=9){
    2f10:	80 91 75 03 	lds	r24, 0x0375
    2f14:	85 30       	cpi	r24, 0x05	; 5
    2f16:	09 f0       	breq	.+2      	; 0x2f1a <automatic+0x8a0>
    2f18:	ca cb       	rjmp	.-2156   	; 0x26ae <automatic+0x34>
    2f1a:	80 91 75 03 	lds	r24, 0x0375
    2f1e:	86 30       	cpi	r24, 0x06	; 6
    2f20:	09 f0       	breq	.+2      	; 0x2f24 <automatic+0x8aa>
    2f22:	c5 cb       	rjmp	.-2166   	; 0x26ae <automatic+0x34>
    2f24:	80 91 75 03 	lds	r24, 0x0375
    2f28:	87 30       	cpi	r24, 0x07	; 7
    2f2a:	09 f0       	breq	.+2      	; 0x2f2e <automatic+0x8b4>
    2f2c:	c0 cb       	rjmp	.-2176   	; 0x26ae <automatic+0x34>
    2f2e:	80 91 75 03 	lds	r24, 0x0375
    2f32:	88 30       	cpi	r24, 0x08	; 8
    2f34:	09 f0       	breq	.+2      	; 0x2f38 <automatic+0x8be>
    2f36:	bb cb       	rjmp	.-2186   	; 0x26ae <automatic+0x34>
    2f38:	80 91 75 03 	lds	r24, 0x0375
    2f3c:	89 30       	cpi	r24, 0x09	; 9
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <automatic+0x8c8>
    2f40:	b6 cb       	rjmp	.-2196   	; 0x26ae <automatic+0x34>
				LCD_String_xy(3,1,to_be_printed_third_row);//print the string of the temperature in the third row and first column
				_delay_ms(10000); // delay for 10 seconds
			break;
			}
	}
		LCD_send_cmd(LCD_clear);//clear LCD
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
    2f48:	19 c0       	rjmp	.+50     	; 0x2f7c <automatic+0x902>

		// press start button to open device
		while(switch_pressed!=3){
			LCD_String_xy(1,1,"Press start ");//display the message in the first row and column
    2f4a:	21 e8       	ldi	r18, 0x81	; 129
    2f4c:	31 e0       	ldi	r19, 0x01	; 1
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	61 e0       	ldi	r22, 0x01	; 1
    2f52:	a9 01       	movw	r20, r18
    2f54:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
			switch_pressed=detect_sw();//to detect which switch is pressed
    2f58:	0e 94 d5 09 	call	0x13aa	; 0x13aa <detect_sw>
    2f5c:	80 93 75 03 	sts	0x0375, r24
			if(switch_pressed==3){
    2f60:	80 91 75 03 	lds	r24, 0x0375
    2f64:	83 30       	cpi	r24, 0x03	; 3
    2f66:	51 f4       	brne	.+20     	; 0x2f7c <automatic+0x902>
				start=1; // switch start flag to 1
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	80 93 ef 02 	sts	0x02EF, r24
				LCD_send_cmd(LCD_clear);//clear LCD
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
				LCD_send_cmd(LCD_return_home);//return home
    2f74:	82 e0       	ldi	r24, 0x02	; 2
    2f76:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
    2f7a:	04 c0       	rjmp	.+8      	; 0x2f84 <automatic+0x90a>
			}
	}
		LCD_send_cmd(LCD_clear);//clear LCD

		// press start button to open device
		while(switch_pressed!=3){
    2f7c:	80 91 75 03 	lds	r24, 0x0375
    2f80:	83 30       	cpi	r24, 0x03	; 3
    2f82:	19 f7       	brne	.-58     	; 0x2f4a <automatic+0x8d0>
				LCD_send_cmd(LCD_clear);//clear LCD
				LCD_send_cmd(LCD_return_home);//return home
				break;
			}
		}
		RTC_Read_Clock(0); //read an instance of time to represent start time
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	0e 94 65 1d 	call	0x3aca	; 0x3aca <RTC_Read_Clock>
		startTime = second + (minute*60);
    2f8a:	80 91 03 03 	lds	r24, 0x0303
    2f8e:	48 2f       	mov	r20, r24
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	80 91 19 03 	lds	r24, 0x0319
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	8c e3       	ldi	r24, 0x3C	; 60
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	26 9f       	mul	r18, r22
    2fa2:	c0 01       	movw	r24, r0
    2fa4:	27 9f       	mul	r18, r23
    2fa6:	90 0d       	add	r25, r0
    2fa8:	36 9f       	mul	r19, r22
    2faa:	90 0d       	add	r25, r0
    2fac:	11 24       	eor	r1, r1
    2fae:	84 0f       	add	r24, r20
    2fb0:	95 1f       	adc	r25, r21
    2fb2:	aa 27       	eor	r26, r26
    2fb4:	97 fd       	sbrc	r25, 7
    2fb6:	a0 95       	com	r26
    2fb8:	ba 2f       	mov	r27, r26
    2fba:	80 93 f6 02 	sts	0x02F6, r24
    2fbe:	90 93 f7 02 	sts	0x02F7, r25
    2fc2:	a0 93 f8 02 	sts	0x02F8, r26
    2fc6:	b0 93 f9 02 	sts	0x02F9, r27
    2fca:	b1 c1       	rjmp	.+866    	; 0x332e <automatic+0xcb4>
		while(start==1){  // if start button is pressed
					SET_BIT(PORTA,GREEN_LED); // green led will open
    2fcc:	ab e3       	ldi	r26, 0x3B	; 59
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	eb e3       	ldi	r30, 0x3B	; 59
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	80 61       	ori	r24, 0x10	; 16
    2fd8:	8c 93       	st	X, r24
					//dht read
					temp=ADC_read(lm35);
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <ADC_read>
    2fe0:	90 93 f3 02 	sts	0x02F3, r25
    2fe4:	80 93 f2 02 	sts	0x02F2, r24
					current_temperature= temp/2.01;
    2fe8:	80 91 f2 02 	lds	r24, 0x02F2
    2fec:	90 91 f3 02 	lds	r25, 0x02F3
    2ff0:	cc 01       	movw	r24, r24
    2ff2:	a0 e0       	ldi	r26, 0x00	; 0
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	27 ed       	ldi	r18, 0xD7	; 215
    3008:	33 ea       	ldi	r19, 0xA3	; 163
    300a:	40 e0       	ldi	r20, 0x00	; 0
    300c:	50 e4       	ldi	r21, 0x40	; 64
    300e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	bc 01       	movw	r22, r24
    3018:	cd 01       	movw	r24, r26
    301a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	80 93 ed 02 	sts	0x02ED, r24
					//timer start
					RTC_Read_Clock(0);
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	0e 94 65 1d 	call	0x3aca	; 0x3aca <RTC_Read_Clock>
					RTC_Count_down_Timer();
    302c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <RTC_Count_down_Timer>
				sprintf(to_be_printed_second_row,"temperature= %d C",current_temperature);//concatenate the strings and store them in to_be_printed global variable
    3030:	80 91 ed 02 	lds	r24, 0x02ED
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	00 d0       	rcall	.+0      	; 0x303a <automatic+0x9c0>
    303a:	00 d0       	rcall	.+0      	; 0x303c <automatic+0x9c2>
    303c:	00 d0       	rcall	.+0      	; 0x303e <automatic+0x9c4>
    303e:	ed b7       	in	r30, 0x3d	; 61
    3040:	fe b7       	in	r31, 0x3e	; 62
    3042:	31 96       	adiw	r30, 0x01	; 1
    3044:	85 e0       	ldi	r24, 0x05	; 5
    3046:	93 e0       	ldi	r25, 0x03	; 3
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	80 83       	st	Z, r24
    304c:	80 ed       	ldi	r24, 0xD0	; 208
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	93 83       	std	Z+3, r25	; 0x03
    3052:	82 83       	std	Z+2, r24	; 0x02
    3054:	35 83       	std	Z+5, r19	; 0x05
    3056:	24 83       	std	Z+4, r18	; 0x04
    3058:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <sprintf>
    305c:	8d b7       	in	r24, 0x3d	; 61
    305e:	9e b7       	in	r25, 0x3e	; 62
    3060:	06 96       	adiw	r24, 0x06	; 6
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	9e bf       	out	0x3e, r25	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	8d bf       	out	0x3d, r24	; 61
				LCD_String_xy(2,1,to_be_printed_second_row);//print the string of the temperature in the second row and first column
    306c:	25 e0       	ldi	r18, 0x05	; 5
    306e:	33 e0       	ldi	r19, 0x03	; 3
    3070:	82 e0       	ldi	r24, 0x02	; 2
    3072:	61 e0       	ldi	r22, 0x01	; 1
    3074:	a9 01       	movw	r20, r18
    3076:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
				LCD_String_xy(3,1,"press 4 for stop");//print the string of stopping message  in the third row and first column
    307a:	2e e8       	ldi	r18, 0x8E	; 142
    307c:	31 e0       	ldi	r19, 0x01	; 1
    307e:	83 e0       	ldi	r24, 0x03	; 3
    3080:	61 e0       	ldi	r22, 0x01	; 1
    3082:	a9 01       	movw	r20, r18
    3084:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
				if(current_temperature<temperature-0.1*temperature){ // condition to test if dht senses temperature smaller than the setting one-temperature*tolerance
    3088:	80 91 ed 02 	lds	r24, 0x02ED
    308c:	88 2f       	mov	r24, r24
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	aa 27       	eor	r26, r26
    3092:	97 fd       	sbrc	r25, 7
    3094:	a0 95       	com	r26
    3096:	ba 2f       	mov	r27, r26
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    30a0:	5b 01       	movw	r10, r22
    30a2:	6c 01       	movw	r12, r24
    30a4:	80 91 e8 02 	lds	r24, 0x02E8
    30a8:	88 2f       	mov	r24, r24
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	aa 27       	eor	r26, r26
    30ae:	97 fd       	sbrc	r25, 7
    30b0:	a0 95       	com	r26
    30b2:	ba 2f       	mov	r27, r26
    30b4:	bc 01       	movw	r22, r24
    30b6:	cd 01       	movw	r24, r26
    30b8:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    30bc:	7b 01       	movw	r14, r22
    30be:	8c 01       	movw	r16, r24
    30c0:	80 91 e8 02 	lds	r24, 0x02E8
    30c4:	88 2f       	mov	r24, r24
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	aa 27       	eor	r26, r26
    30ca:	97 fd       	sbrc	r25, 7
    30cc:	a0 95       	com	r26
    30ce:	ba 2f       	mov	r27, r26
    30d0:	bc 01       	movw	r22, r24
    30d2:	cd 01       	movw	r24, r26
    30d4:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	bc 01       	movw	r22, r24
    30de:	cd 01       	movw	r24, r26
    30e0:	2d ec       	ldi	r18, 0xCD	; 205
    30e2:	3c ec       	ldi	r19, 0xCC	; 204
    30e4:	4c ec       	ldi	r20, 0xCC	; 204
    30e6:	5d eb       	ldi	r21, 0xBD	; 189
    30e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	9c 01       	movw	r18, r24
    30f2:	ad 01       	movw	r20, r26
    30f4:	c8 01       	movw	r24, r16
    30f6:	b7 01       	movw	r22, r14
    30f8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	9c 01       	movw	r18, r24
    3102:	ad 01       	movw	r20, r26
    3104:	c6 01       	movw	r24, r12
    3106:	b5 01       	movw	r22, r10
    3108:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    310c:	88 23       	and	r24, r24
    310e:	6c f4       	brge	.+26     	; 0x312a <automatic+0xab0>
					actuator_on(PORTC,PELITER); // turn on peliter
    3110:	e5 e3       	ldi	r30, 0x35	; 53
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	67 e0       	ldi	r22, 0x07	; 7
    3118:	0e 94 71 12 	call	0x24e2	; 0x24e2 <actuator_on>
					actuator_on(PORTA,FAN);    // turn on fan
    311c:	eb e3       	ldi	r30, 0x3B	; 59
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	80 81       	ld	r24, Z
    3122:	67 e0       	ldi	r22, 0x07	; 7
    3124:	0e 94 71 12 	call	0x24e2	; 0x24e2 <actuator_on>
    3128:	02 c1       	rjmp	.+516    	; 0x332e <automatic+0xcb4>
				}
				else if(current_temperature>=temperature-0.1*temperature&&current_temperature<=temperature+0.1*temperature){ // condition to test if dht senses temperature greater than or equal the setting one-temperature*tolerance and smaller than or equal to the setting one+temperature*tolerance
    312a:	80 91 ed 02 	lds	r24, 0x02ED
    312e:	88 2f       	mov	r24, r24
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	aa 27       	eor	r26, r26
    3134:	97 fd       	sbrc	r25, 7
    3136:	a0 95       	com	r26
    3138:	ba 2f       	mov	r27, r26
    313a:	bc 01       	movw	r22, r24
    313c:	cd 01       	movw	r24, r26
    313e:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3142:	5b 01       	movw	r10, r22
    3144:	6c 01       	movw	r12, r24
    3146:	80 91 e8 02 	lds	r24, 0x02E8
    314a:	88 2f       	mov	r24, r24
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	aa 27       	eor	r26, r26
    3150:	97 fd       	sbrc	r25, 7
    3152:	a0 95       	com	r26
    3154:	ba 2f       	mov	r27, r26
    3156:	bc 01       	movw	r22, r24
    3158:	cd 01       	movw	r24, r26
    315a:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    315e:	7b 01       	movw	r14, r22
    3160:	8c 01       	movw	r16, r24
    3162:	80 91 e8 02 	lds	r24, 0x02E8
    3166:	88 2f       	mov	r24, r24
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	aa 27       	eor	r26, r26
    316c:	97 fd       	sbrc	r25, 7
    316e:	a0 95       	com	r26
    3170:	ba 2f       	mov	r27, r26
    3172:	bc 01       	movw	r22, r24
    3174:	cd 01       	movw	r24, r26
    3176:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	2d ec       	ldi	r18, 0xCD	; 205
    3184:	3c ec       	ldi	r19, 0xCC	; 204
    3186:	4c ec       	ldi	r20, 0xCC	; 204
    3188:	5d eb       	ldi	r21, 0xBD	; 189
    318a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	9c 01       	movw	r18, r24
    3194:	ad 01       	movw	r20, r26
    3196:	c8 01       	movw	r24, r16
    3198:	b7 01       	movw	r22, r14
    319a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	9c 01       	movw	r18, r24
    31a4:	ad 01       	movw	r20, r26
    31a6:	67 96       	adiw	r28, 0x17	; 23
    31a8:	1f ae       	std	Y+63, r1	; 0x3f
    31aa:	67 97       	sbiw	r28, 0x17	; 23
    31ac:	c6 01       	movw	r24, r12
    31ae:	b5 01       	movw	r22, r10
    31b0:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    31b4:	88 23       	and	r24, r24
    31b6:	24 f0       	brlt	.+8      	; 0x31c0 <automatic+0xb46>
    31b8:	91 e0       	ldi	r25, 0x01	; 1
    31ba:	67 96       	adiw	r28, 0x17	; 23
    31bc:	9f af       	std	Y+63, r25	; 0x3f
    31be:	67 97       	sbiw	r28, 0x17	; 23
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	67 96       	adiw	r28, 0x17	; 23
    31c4:	ef ad       	ldd	r30, Y+63	; 0x3f
    31c6:	67 97       	sbiw	r28, 0x17	; 23
    31c8:	8e 27       	eor	r24, r30
    31ca:	88 23       	and	r24, r24
    31cc:	09 f0       	breq	.+2      	; 0x31d0 <automatic+0xb56>
    31ce:	5f c0       	rjmp	.+190    	; 0x328e <automatic+0xc14>
    31d0:	80 91 ed 02 	lds	r24, 0x02ED
    31d4:	88 2f       	mov	r24, r24
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	aa 27       	eor	r26, r26
    31da:	97 fd       	sbrc	r25, 7
    31dc:	a0 95       	com	r26
    31de:	ba 2f       	mov	r27, r26
    31e0:	bc 01       	movw	r22, r24
    31e2:	cd 01       	movw	r24, r26
    31e4:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    31e8:	5b 01       	movw	r10, r22
    31ea:	6c 01       	movw	r12, r24
    31ec:	80 91 e8 02 	lds	r24, 0x02E8
    31f0:	88 2f       	mov	r24, r24
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	aa 27       	eor	r26, r26
    31f6:	97 fd       	sbrc	r25, 7
    31f8:	a0 95       	com	r26
    31fa:	ba 2f       	mov	r27, r26
    31fc:	bc 01       	movw	r22, r24
    31fe:	cd 01       	movw	r24, r26
    3200:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3204:	7b 01       	movw	r14, r22
    3206:	8c 01       	movw	r16, r24
    3208:	80 91 e8 02 	lds	r24, 0x02E8
    320c:	88 2f       	mov	r24, r24
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	aa 27       	eor	r26, r26
    3212:	97 fd       	sbrc	r25, 7
    3214:	a0 95       	com	r26
    3216:	ba 2f       	mov	r27, r26
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	bc 01       	movw	r22, r24
    3226:	cd 01       	movw	r24, r26
    3228:	2d ec       	ldi	r18, 0xCD	; 205
    322a:	3c ec       	ldi	r19, 0xCC	; 204
    322c:	4c ec       	ldi	r20, 0xCC	; 204
    322e:	5d e3       	ldi	r21, 0x3D	; 61
    3230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	9c 01       	movw	r18, r24
    323a:	ad 01       	movw	r20, r26
    323c:	c8 01       	movw	r24, r16
    323e:	b7 01       	movw	r22, r14
    3240:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	9c 01       	movw	r18, r24
    324a:	ad 01       	movw	r20, r26
    324c:	66 96       	adiw	r28, 0x16	; 22
    324e:	1f ae       	std	Y+63, r1	; 0x3f
    3250:	66 97       	sbiw	r28, 0x16	; 22
    3252:	c6 01       	movw	r24, r12
    3254:	b5 01       	movw	r22, r10
    3256:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    325a:	18 16       	cp	r1, r24
    325c:	24 f0       	brlt	.+8      	; 0x3266 <automatic+0xbec>
    325e:	f1 e0       	ldi	r31, 0x01	; 1
    3260:	66 96       	adiw	r28, 0x16	; 22
    3262:	ff af       	std	Y+63, r31	; 0x3f
    3264:	66 97       	sbiw	r28, 0x16	; 22
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	66 96       	adiw	r28, 0x16	; 22
    326a:	6f ad       	ldd	r22, Y+63	; 0x3f
    326c:	66 97       	sbiw	r28, 0x16	; 22
    326e:	86 27       	eor	r24, r22
    3270:	88 23       	and	r24, r24
    3272:	69 f4       	brne	.+26     	; 0x328e <automatic+0xc14>
					actuator_off(PORTC,PELITER); // turn off peliter
    3274:	e5 e3       	ldi	r30, 0x35	; 53
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	67 e0       	ldi	r22, 0x07	; 7
    327c:	0e 94 8c 12 	call	0x2518	; 0x2518 <actuator_off>
					actuator_on(PORTA,FAN); // turn on fan
    3280:	eb e3       	ldi	r30, 0x3B	; 59
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	67 e0       	ldi	r22, 0x07	; 7
    3288:	0e 94 71 12 	call	0x24e2	; 0x24e2 <actuator_on>
    328c:	50 c0       	rjmp	.+160    	; 0x332e <automatic+0xcb4>
				}
				else if(current_temperature== temperature-0.01*temperature){ // test if current temperature is equal to the setting temperature-temperature *tolerance
    328e:	80 91 ed 02 	lds	r24, 0x02ED
    3292:	88 2f       	mov	r24, r24
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	aa 27       	eor	r26, r26
    3298:	97 fd       	sbrc	r25, 7
    329a:	a0 95       	com	r26
    329c:	ba 2f       	mov	r27, r26
    329e:	bc 01       	movw	r22, r24
    32a0:	cd 01       	movw	r24, r26
    32a2:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    32a6:	5b 01       	movw	r10, r22
    32a8:	6c 01       	movw	r12, r24
    32aa:	80 91 e8 02 	lds	r24, 0x02E8
    32ae:	88 2f       	mov	r24, r24
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	aa 27       	eor	r26, r26
    32b4:	97 fd       	sbrc	r25, 7
    32b6:	a0 95       	com	r26
    32b8:	ba 2f       	mov	r27, r26
    32ba:	bc 01       	movw	r22, r24
    32bc:	cd 01       	movw	r24, r26
    32be:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    32c2:	7b 01       	movw	r14, r22
    32c4:	8c 01       	movw	r16, r24
    32c6:	80 91 e8 02 	lds	r24, 0x02E8
    32ca:	88 2f       	mov	r24, r24
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	aa 27       	eor	r26, r26
    32d0:	97 fd       	sbrc	r25, 7
    32d2:	a0 95       	com	r26
    32d4:	ba 2f       	mov	r27, r26
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	2a e0       	ldi	r18, 0x0A	; 10
    32e8:	37 ed       	ldi	r19, 0xD7	; 215
    32ea:	43 e2       	ldi	r20, 0x23	; 35
    32ec:	5c eb       	ldi	r21, 0xBC	; 188
    32ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	9c 01       	movw	r18, r24
    32f8:	ad 01       	movw	r20, r26
    32fa:	c8 01       	movw	r24, r16
    32fc:	b7 01       	movw	r22, r14
    32fe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	9c 01       	movw	r18, r24
    3308:	ad 01       	movw	r20, r26
    330a:	c6 01       	movw	r24, r12
    330c:	b5 01       	movw	r22, r10
    330e:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3312:	88 23       	and	r24, r24
    3314:	61 f4       	brne	.+24     	; 0x332e <automatic+0xcb4>
					actuator_off(PORTC,PELITER); // turn off peliter
    3316:	e5 e3       	ldi	r30, 0x35	; 53
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	80 81       	ld	r24, Z
    331c:	67 e0       	ldi	r22, 0x07	; 7
    331e:	0e 94 8c 12 	call	0x2518	; 0x2518 <actuator_off>
					actuator_off(PORTA,FAN); // turn off fan
    3322:	eb e3       	ldi	r30, 0x3B	; 59
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	80 81       	ld	r24, Z
    3328:	67 e0       	ldi	r22, 0x07	; 7
    332a:	0e 94 8c 12 	call	0x2518	; 0x2518 <actuator_off>
				break;
			}
		}
		RTC_Read_Clock(0); //read an instance of time to represent start time
		startTime = second + (minute*60);
		while(start==1){  // if start button is pressed
    332e:	80 91 ef 02 	lds	r24, 0x02EF
    3332:	81 30       	cpi	r24, 0x01	; 1
    3334:	09 f4       	brne	.+2      	; 0x3338 <automatic+0xcbe>
    3336:	4a ce       	rjmp	.-876    	; 0x2fcc <automatic+0x952>
					actuator_off(PORTC,PELITER); // turn off peliter
					actuator_off(PORTA,FAN); // turn off fan
				}
			}
				 // operation is terminated
					actuator_off(PORTA,FAN);  // turn off fan
    3338:	eb e3       	ldi	r30, 0x3B	; 59
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	80 81       	ld	r24, Z
    333e:	67 e0       	ldi	r22, 0x07	; 7
    3340:	0e 94 8c 12 	call	0x2518	; 0x2518 <actuator_off>
					actuator_off(PORTC,PELITER); // turn off peliter
    3344:	e5 e3       	ldi	r30, 0x35	; 53
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	67 e0       	ldi	r22, 0x07	; 7
    334c:	0e 94 8c 12 	call	0x2518	; 0x2518 <actuator_off>
					SET_BIT(PORTB,RED_LED); // turn on red led
    3350:	a8 e3       	ldi	r26, 0x38	; 56
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	e8 e3       	ldi	r30, 0x38	; 56
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	80 68       	ori	r24, 0x80	; 128
    335c:	8c 93       	st	X, r24
					SET_BIT(PORTC,BUZZER); // turn on buzzer
    335e:	a5 e3       	ldi	r26, 0x35	; 53
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	e5 e3       	ldi	r30, 0x35	; 53
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	80 64       	ori	r24, 0x40	; 64
    336a:	8c 93       	st	X, r24
					LCD_send_cmd(LCD_clear);//clear LCD
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
					LCD_send_cmd(LCD_return_home);//return home
    3372:	82 e0       	ldi	r24, 0x02	; 2
    3374:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
					LCD_String_xy(1,1,"Finishing");//print the string of finishing message in the first row and column
    3378:	2f e9       	ldi	r18, 0x9F	; 159
    337a:	31 e0       	ldi	r19, 0x01	; 1
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	61 e0       	ldi	r22, 0x01	; 1
    3380:	a9 01       	movw	r20, r18
    3382:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e4       	ldi	r25, 0x40	; 64
    338a:	ac e1       	ldi	r26, 0x1C	; 28
    338c:	b6 e4       	ldi	r27, 0x46	; 70
    338e:	8b 87       	std	Y+11, r24	; 0x0b
    3390:	9c 87       	std	Y+12, r25	; 0x0c
    3392:	ad 87       	std	Y+13, r26	; 0x0d
    3394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3396:	6b 85       	ldd	r22, Y+11	; 0x0b
    3398:	7c 85       	ldd	r23, Y+12	; 0x0c
    339a:	8d 85       	ldd	r24, Y+13	; 0x0d
    339c:	9e 85       	ldd	r25, Y+14	; 0x0e
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a e7       	ldi	r20, 0x7A	; 122
    33a4:	53 e4       	ldi	r21, 0x43	; 67
    33a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	8f 83       	std	Y+7, r24	; 0x07
    33b0:	98 87       	std	Y+8, r25	; 0x08
    33b2:	a9 87       	std	Y+9, r26	; 0x09
    33b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33b6:	6f 81       	ldd	r22, Y+7	; 0x07
    33b8:	78 85       	ldd	r23, Y+8	; 0x08
    33ba:	89 85       	ldd	r24, Y+9	; 0x09
    33bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <automatic+0xd5e>
		__ticks = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9e 83       	std	Y+6, r25	; 0x06
    33d4:	8d 83       	std	Y+5, r24	; 0x05
    33d6:	3f c0       	rjmp	.+126    	; 0x3456 <automatic+0xddc>
	else if (__tmp > 65535)
    33d8:	6f 81       	ldd	r22, Y+7	; 0x07
    33da:	78 85       	ldd	r23, Y+8	; 0x08
    33dc:	89 85       	ldd	r24, Y+9	; 0x09
    33de:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	4c f5       	brge	.+82     	; 0x3442 <automatic+0xdc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9e 83       	std	Y+6, r25	; 0x06
    3416:	8d 83       	std	Y+5, r24	; 0x05
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <automatic+0xdbe>
    341a:	89 e1       	ldi	r24, 0x19	; 25
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	9c 83       	std	Y+4, r25	; 0x04
    3420:	8b 83       	std	Y+3, r24	; 0x03
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	9c 81       	ldd	r25, Y+4	; 0x04
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <automatic+0xdac>
    342a:	9c 83       	std	Y+4, r25	; 0x04
    342c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342e:	8d 81       	ldd	r24, Y+5	; 0x05
    3430:	9e 81       	ldd	r25, Y+6	; 0x06
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3438:	8d 81       	ldd	r24, Y+5	; 0x05
    343a:	9e 81       	ldd	r25, Y+6	; 0x06
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	69 f7       	brne	.-38     	; 0x341a <automatic+0xda0>
    3440:	14 c0       	rjmp	.+40     	; 0x346a <automatic+0xdf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	6f 81       	ldd	r22, Y+7	; 0x07
    3444:	78 85       	ldd	r23, Y+8	; 0x08
    3446:	89 85       	ldd	r24, Y+9	; 0x09
    3448:	9a 85       	ldd	r25, Y+10	; 0x0a
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <automatic+0xde8>
    3466:	9a 83       	std	Y+2, r25	; 0x02
    3468:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(10000); // delay for 10 seconds
					LCD_send_cmd(LCD_clear);//clear LCD
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>

}
    3470:	ca 5a       	subi	r28, 0xAA	; 170
    3472:	df 4f       	sbci	r29, 0xFF	; 255
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	cf 91       	pop	r28
    3480:	df 91       	pop	r29
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	df 90       	pop	r13
    348c:	cf 90       	pop	r12
    348e:	bf 90       	pop	r11
    3490:	af 90       	pop	r10
    3492:	08 95       	ret

00003494 <manual>:
void manual(){
    3494:	af 92       	push	r10
    3496:	bf 92       	push	r11
    3498:	cf 92       	push	r12
    349a:	df 92       	push	r13
    349c:	ef 92       	push	r14
    349e:	ff 92       	push	r15
    34a0:	0f 93       	push	r16
    34a2:	1f 93       	push	r17
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
    34ac:	60 97       	sbiw	r28, 0x10	; 16
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
	state=0;
    34b8:	10 92 ee 02 	sts	0x02EE, r1
	LCD_send_cmd(LCD_clear);//clear the LCD
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
    34c2:	55 c0       	rjmp	.+170    	; 0x356e <manual+0xda>

	while(switch_pressed!=3){

	LCD_String_xy(1,1," Use pot to set ");//display the message in the first row and first column
    34c4:	29 ea       	ldi	r18, 0xA9	; 169
    34c6:	31 e0       	ldi	r19, 0x01	; 1
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	61 e0       	ldi	r22, 0x01	; 1
    34cc:	a9 01       	movw	r20, r18
    34ce:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
	LCD_String_xy(2,1,"temperature");//display the message in the second row and first column
    34d2:	2a eb       	ldi	r18, 0xBA	; 186
    34d4:	31 e0       	ldi	r19, 0x01	; 1
    34d6:	82 e0       	ldi	r24, 0x02	; 2
    34d8:	61 e0       	ldi	r22, 0x01	; 1
    34da:	a9 01       	movw	r20, r18
    34dc:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
	pot_reading=ADC_read(POTENTIOMETER);//get reading of ADC and update mapped_value which is pot reading
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <ADC_read>
    34e6:	90 93 f1 02 	sts	0x02F1, r25
    34ea:	80 93 f0 02 	sts	0x02F0, r24
		    	                            //and also the ADC 10Bit reading value from 0 to 1024 according to Pot reading
	temperature=mapping(pot_reading); // mapping pot reading to temperature values in degree celsius
    34ee:	80 91 f0 02 	lds	r24, 0x02F0
    34f2:	90 91 f1 02 	lds	r25, 0x02F1
    34f6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <mapping>
    34fa:	80 93 e8 02 	sts	0x02E8, r24
	sprintf(to_be_printed_third_row,"temperature= %d C",temperature); //concatenate the strings and store them in to_be_printed_third_row global variable
    34fe:	80 91 e8 02 	lds	r24, 0x02E8
    3502:	28 2f       	mov	r18, r24
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	00 d0       	rcall	.+0      	; 0x3508 <manual+0x74>
    3508:	00 d0       	rcall	.+0      	; 0x350a <manual+0x76>
    350a:	00 d0       	rcall	.+0      	; 0x350c <manual+0x78>
    350c:	ed b7       	in	r30, 0x3d	; 61
    350e:	fe b7       	in	r31, 0x3e	; 62
    3510:	31 96       	adiw	r30, 0x01	; 1
    3512:	81 e6       	ldi	r24, 0x61	; 97
    3514:	93 e0       	ldi	r25, 0x03	; 3
    3516:	91 83       	std	Z+1, r25	; 0x01
    3518:	80 83       	st	Z, r24
    351a:	80 ed       	ldi	r24, 0xD0	; 208
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	93 83       	std	Z+3, r25	; 0x03
    3520:	82 83       	std	Z+2, r24	; 0x02
    3522:	35 83       	std	Z+5, r19	; 0x05
    3524:	24 83       	std	Z+4, r18	; 0x04
    3526:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <sprintf>
    352a:	8d b7       	in	r24, 0x3d	; 61
    352c:	9e b7       	in	r25, 0x3e	; 62
    352e:	06 96       	adiw	r24, 0x06	; 6
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	f8 94       	cli
    3534:	9e bf       	out	0x3e, r25	; 62
    3536:	0f be       	out	0x3f, r0	; 63
    3538:	8d bf       	out	0x3d, r24	; 61
	LCD_String_xy(3,1,to_be_printed_third_row);//print the string of the temperature in the third row and first column
    353a:	21 e6       	ldi	r18, 0x61	; 97
    353c:	33 e0       	ldi	r19, 0x03	; 3
    353e:	83 e0       	ldi	r24, 0x03	; 3
    3540:	61 e0       	ldi	r22, 0x01	; 1
    3542:	a9 01       	movw	r20, r18
    3544:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
	LCD_String_xy(4,1,"Press start");//print the string of the pressing start  in the fourth row and first column
    3548:	26 ec       	ldi	r18, 0xC6	; 198
    354a:	31 e0       	ldi	r19, 0x01	; 1
    354c:	84 e0       	ldi	r24, 0x04	; 4
    354e:	61 e0       	ldi	r22, 0x01	; 1
    3550:	a9 01       	movw	r20, r18
    3552:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
	switch_pressed=detect_sw();//to detect which switch is pressed
    3556:	0e 94 d5 09 	call	0x13aa	; 0x13aa <detect_sw>
    355a:	80 93 75 03 	sts	0x0375, r24
	if(switch_pressed==3){ // to turn on our device if switch 3 is pressed
    355e:	80 91 75 03 	lds	r24, 0x0375
    3562:	83 30       	cpi	r24, 0x03	; 3
    3564:	21 f4       	brne	.+8      	; 0x356e <manual+0xda>
		start=1;
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	80 93 ef 02 	sts	0x02EF, r24
    356c:	05 c0       	rjmp	.+10     	; 0x3578 <manual+0xe4>
}
void manual(){
	state=0;
	LCD_send_cmd(LCD_clear);//clear the LCD

	while(switch_pressed!=3){
    356e:	80 91 75 03 	lds	r24, 0x0375
    3572:	83 30       	cpi	r24, 0x03	; 3
    3574:	09 f0       	breq	.+2      	; 0x3578 <manual+0xe4>
    3576:	a6 cf       	rjmp	.-180    	; 0x34c4 <manual+0x30>
	if(switch_pressed==3){ // to turn on our device if switch 3 is pressed
		start=1;
		break; // get out from the main while loop
	}
}
	LCD_send_cmd(LCD_clear);//clear the LCD
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
    357e:	a2 c1       	rjmp	.+836    	; 0x38c4 <manual+0x430>

	while(start==1){  // if start button is pressed
		LCD_init();//initializing the LCD
    3580:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_init>
		//dht read
				SET_BIT(PORTA,GREEN_LED); // green led will open
    3584:	ab e3       	ldi	r26, 0x3B	; 59
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	eb e3       	ldi	r30, 0x3B	; 59
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	80 61       	ori	r24, 0x10	; 16
    3590:	8c 93       	st	X, r24
				temp=ADC_read(lm35);
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <ADC_read>
    3598:	90 93 f3 02 	sts	0x02F3, r25
    359c:	80 93 f2 02 	sts	0x02F2, r24
				current_temperature= temp/2.01;
    35a0:	80 91 f2 02 	lds	r24, 0x02F2
    35a4:	90 91 f3 02 	lds	r25, 0x02F3
    35a8:	cc 01       	movw	r24, r24
    35aa:	a0 e0       	ldi	r26, 0x00	; 0
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	bc 01       	movw	r22, r24
    35b0:	cd 01       	movw	r24, r26
    35b2:	0e 94 67 05 	call	0xace	; 0xace <__floatunsisf>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	27 ed       	ldi	r18, 0xD7	; 215
    35c0:	33 ea       	ldi	r19, 0xA3	; 163
    35c2:	40 e0       	ldi	r20, 0x00	; 0
    35c4:	50 e4       	ldi	r21, 0x40	; 64
    35c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	bc 01       	movw	r22, r24
    35d0:	cd 01       	movw	r24, r26
    35d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	80 93 ed 02 	sts	0x02ED, r24
			sprintf(to_be_printed_second_row,"temperature= %d C",current_temperature);//concatenate the strings and store them in to_be_printed global variable
    35de:	80 91 ed 02 	lds	r24, 0x02ED
    35e2:	28 2f       	mov	r18, r24
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	00 d0       	rcall	.+0      	; 0x35e8 <manual+0x154>
    35e8:	00 d0       	rcall	.+0      	; 0x35ea <manual+0x156>
    35ea:	00 d0       	rcall	.+0      	; 0x35ec <manual+0x158>
    35ec:	ed b7       	in	r30, 0x3d	; 61
    35ee:	fe b7       	in	r31, 0x3e	; 62
    35f0:	31 96       	adiw	r30, 0x01	; 1
    35f2:	85 e0       	ldi	r24, 0x05	; 5
    35f4:	93 e0       	ldi	r25, 0x03	; 3
    35f6:	91 83       	std	Z+1, r25	; 0x01
    35f8:	80 83       	st	Z, r24
    35fa:	80 ed       	ldi	r24, 0xD0	; 208
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	93 83       	std	Z+3, r25	; 0x03
    3600:	82 83       	std	Z+2, r24	; 0x02
    3602:	35 83       	std	Z+5, r19	; 0x05
    3604:	24 83       	std	Z+4, r18	; 0x04
    3606:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <sprintf>
    360a:	8d b7       	in	r24, 0x3d	; 61
    360c:	9e b7       	in	r25, 0x3e	; 62
    360e:	06 96       	adiw	r24, 0x06	; 6
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	9e bf       	out	0x3e, r25	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	8d bf       	out	0x3d, r24	; 61
			LCD_String_xy(2,1,to_be_printed_second_row);//print the string of the temperature in the second row and first column
    361a:	25 e0       	ldi	r18, 0x05	; 5
    361c:	33 e0       	ldi	r19, 0x03	; 3
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	61 e0       	ldi	r22, 0x01	; 1
    3622:	a9 01       	movw	r20, r18
    3624:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
			LCD_String_xy(3,1,"press 4 for stop");//print the string of stopping message  in the third row and first column
    3628:	2e e8       	ldi	r18, 0x8E	; 142
    362a:	31 e0       	ldi	r19, 0x01	; 1
    362c:	83 e0       	ldi	r24, 0x03	; 3
    362e:	61 e0       	ldi	r22, 0x01	; 1
    3630:	a9 01       	movw	r20, r18
    3632:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
			if(current_temperature<temperature-0.1*temperature){ // condition to test if dht senses temperature smaller than the setting one-temperature*tolerance
    3636:	80 91 ed 02 	lds	r24, 0x02ED
    363a:	88 2f       	mov	r24, r24
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	aa 27       	eor	r26, r26
    3640:	97 fd       	sbrc	r25, 7
    3642:	a0 95       	com	r26
    3644:	ba 2f       	mov	r27, r26
    3646:	bc 01       	movw	r22, r24
    3648:	cd 01       	movw	r24, r26
    364a:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    364e:	5b 01       	movw	r10, r22
    3650:	6c 01       	movw	r12, r24
    3652:	80 91 e8 02 	lds	r24, 0x02E8
    3656:	88 2f       	mov	r24, r24
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	aa 27       	eor	r26, r26
    365c:	97 fd       	sbrc	r25, 7
    365e:	a0 95       	com	r26
    3660:	ba 2f       	mov	r27, r26
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    366a:	7b 01       	movw	r14, r22
    366c:	8c 01       	movw	r16, r24
    366e:	80 91 e8 02 	lds	r24, 0x02E8
    3672:	88 2f       	mov	r24, r24
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	aa 27       	eor	r26, r26
    3678:	97 fd       	sbrc	r25, 7
    367a:	a0 95       	com	r26
    367c:	ba 2f       	mov	r27, r26
    367e:	bc 01       	movw	r22, r24
    3680:	cd 01       	movw	r24, r26
    3682:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	2d ec       	ldi	r18, 0xCD	; 205
    3690:	3c ec       	ldi	r19, 0xCC	; 204
    3692:	4c ec       	ldi	r20, 0xCC	; 204
    3694:	5d eb       	ldi	r21, 0xBD	; 189
    3696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	9c 01       	movw	r18, r24
    36a0:	ad 01       	movw	r20, r26
    36a2:	c8 01       	movw	r24, r16
    36a4:	b7 01       	movw	r22, r14
    36a6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	9c 01       	movw	r18, r24
    36b0:	ad 01       	movw	r20, r26
    36b2:	c6 01       	movw	r24, r12
    36b4:	b5 01       	movw	r22, r10
    36b6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    36ba:	88 23       	and	r24, r24
    36bc:	6c f4       	brge	.+26     	; 0x36d8 <manual+0x244>
				actuator_on(PORTC,PELITER); // turn on peliter
    36be:	e5 e3       	ldi	r30, 0x35	; 53
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	80 81       	ld	r24, Z
    36c4:	67 e0       	ldi	r22, 0x07	; 7
    36c6:	0e 94 71 12 	call	0x24e2	; 0x24e2 <actuator_on>
				actuator_on(PORTA,FAN);    // turn on fan
    36ca:	eb e3       	ldi	r30, 0x3B	; 59
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	80 81       	ld	r24, Z
    36d0:	67 e0       	ldi	r22, 0x07	; 7
    36d2:	0e 94 71 12 	call	0x24e2	; 0x24e2 <actuator_on>
    36d6:	f6 c0       	rjmp	.+492    	; 0x38c4 <manual+0x430>
			}
			else if(current_temperature>=temperature-0.1*temperature&&current_temperature<=temperature+0.1*temperature){ // condition to test if dht senses temperature greater than or equal the setting one-temperature*tolerance and smaller than or equal to the setting one+temperature*tolerance
    36d8:	80 91 ed 02 	lds	r24, 0x02ED
    36dc:	88 2f       	mov	r24, r24
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	aa 27       	eor	r26, r26
    36e2:	97 fd       	sbrc	r25, 7
    36e4:	a0 95       	com	r26
    36e6:	ba 2f       	mov	r27, r26
    36e8:	bc 01       	movw	r22, r24
    36ea:	cd 01       	movw	r24, r26
    36ec:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    36f0:	5b 01       	movw	r10, r22
    36f2:	6c 01       	movw	r12, r24
    36f4:	80 91 e8 02 	lds	r24, 0x02E8
    36f8:	88 2f       	mov	r24, r24
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	aa 27       	eor	r26, r26
    36fe:	97 fd       	sbrc	r25, 7
    3700:	a0 95       	com	r26
    3702:	ba 2f       	mov	r27, r26
    3704:	bc 01       	movw	r22, r24
    3706:	cd 01       	movw	r24, r26
    3708:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    370c:	7b 01       	movw	r14, r22
    370e:	8c 01       	movw	r16, r24
    3710:	80 91 e8 02 	lds	r24, 0x02E8
    3714:	88 2f       	mov	r24, r24
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	aa 27       	eor	r26, r26
    371a:	97 fd       	sbrc	r25, 7
    371c:	a0 95       	com	r26
    371e:	ba 2f       	mov	r27, r26
    3720:	bc 01       	movw	r22, r24
    3722:	cd 01       	movw	r24, r26
    3724:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	bc 01       	movw	r22, r24
    372e:	cd 01       	movw	r24, r26
    3730:	2d ec       	ldi	r18, 0xCD	; 205
    3732:	3c ec       	ldi	r19, 0xCC	; 204
    3734:	4c ec       	ldi	r20, 0xCC	; 204
    3736:	5d eb       	ldi	r21, 0xBD	; 189
    3738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	9c 01       	movw	r18, r24
    3742:	ad 01       	movw	r20, r26
    3744:	c8 01       	movw	r24, r16
    3746:	b7 01       	movw	r22, r14
    3748:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	9c 01       	movw	r18, r24
    3752:	ad 01       	movw	r20, r26
    3754:	18 8a       	std	Y+16, r1	; 0x10
    3756:	c6 01       	movw	r24, r12
    3758:	b5 01       	movw	r22, r10
    375a:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
    375e:	88 23       	and	r24, r24
    3760:	14 f0       	brlt	.+4      	; 0x3766 <manual+0x2d2>
    3762:	91 e0       	ldi	r25, 0x01	; 1
    3764:	98 8b       	std	Y+16, r25	; 0x10
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	98 89       	ldd	r25, Y+16	; 0x10
    376a:	89 27       	eor	r24, r25
    376c:	88 23       	and	r24, r24
    376e:	09 f0       	breq	.+2      	; 0x3772 <manual+0x2de>
    3770:	59 c0       	rjmp	.+178    	; 0x3824 <manual+0x390>
    3772:	80 91 ed 02 	lds	r24, 0x02ED
    3776:	88 2f       	mov	r24, r24
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	aa 27       	eor	r26, r26
    377c:	97 fd       	sbrc	r25, 7
    377e:	a0 95       	com	r26
    3780:	ba 2f       	mov	r27, r26
    3782:	bc 01       	movw	r22, r24
    3784:	cd 01       	movw	r24, r26
    3786:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    378a:	5b 01       	movw	r10, r22
    378c:	6c 01       	movw	r12, r24
    378e:	80 91 e8 02 	lds	r24, 0x02E8
    3792:	88 2f       	mov	r24, r24
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	aa 27       	eor	r26, r26
    3798:	97 fd       	sbrc	r25, 7
    379a:	a0 95       	com	r26
    379c:	ba 2f       	mov	r27, r26
    379e:	bc 01       	movw	r22, r24
    37a0:	cd 01       	movw	r24, r26
    37a2:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    37a6:	7b 01       	movw	r14, r22
    37a8:	8c 01       	movw	r16, r24
    37aa:	80 91 e8 02 	lds	r24, 0x02E8
    37ae:	88 2f       	mov	r24, r24
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	aa 27       	eor	r26, r26
    37b4:	97 fd       	sbrc	r25, 7
    37b6:	a0 95       	com	r26
    37b8:	ba 2f       	mov	r27, r26
    37ba:	bc 01       	movw	r22, r24
    37bc:	cd 01       	movw	r24, r26
    37be:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	bc 01       	movw	r22, r24
    37c8:	cd 01       	movw	r24, r26
    37ca:	2d ec       	ldi	r18, 0xCD	; 205
    37cc:	3c ec       	ldi	r19, 0xCC	; 204
    37ce:	4c ec       	ldi	r20, 0xCC	; 204
    37d0:	5d e3       	ldi	r21, 0x3D	; 61
    37d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	9c 01       	movw	r18, r24
    37dc:	ad 01       	movw	r20, r26
    37de:	c8 01       	movw	r24, r16
    37e0:	b7 01       	movw	r22, r14
    37e2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	9c 01       	movw	r18, r24
    37ec:	ad 01       	movw	r20, r26
    37ee:	1f 86       	std	Y+15, r1	; 0x0f
    37f0:	c6 01       	movw	r24, r12
    37f2:	b5 01       	movw	r22, r10
    37f4:	0e 94 85 04 	call	0x90a	; 0x90a <__lesf2>
    37f8:	18 16       	cp	r1, r24
    37fa:	14 f0       	brlt	.+4      	; 0x3800 <manual+0x36c>
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	8f 87       	std	Y+15, r24	; 0x0f
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	9f 85       	ldd	r25, Y+15	; 0x0f
    3804:	89 27       	eor	r24, r25
    3806:	88 23       	and	r24, r24
    3808:	69 f4       	brne	.+26     	; 0x3824 <manual+0x390>
				actuator_off(PORTC,PELITER); // turn off peliter
    380a:	e5 e3       	ldi	r30, 0x35	; 53
    380c:	f0 e0       	ldi	r31, 0x00	; 0
    380e:	80 81       	ld	r24, Z
    3810:	67 e0       	ldi	r22, 0x07	; 7
    3812:	0e 94 8c 12 	call	0x2518	; 0x2518 <actuator_off>
				actuator_on(PORTA,FAN); // turn on fan
    3816:	eb e3       	ldi	r30, 0x3B	; 59
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	80 81       	ld	r24, Z
    381c:	67 e0       	ldi	r22, 0x07	; 7
    381e:	0e 94 71 12 	call	0x24e2	; 0x24e2 <actuator_on>
    3822:	50 c0       	rjmp	.+160    	; 0x38c4 <manual+0x430>
			}
			else if(current_temperature== temperature-0.01*temperature){ // test if current temperature is equal to the setting temperature-temperature *tolerance
    3824:	80 91 ed 02 	lds	r24, 0x02ED
    3828:	88 2f       	mov	r24, r24
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	aa 27       	eor	r26, r26
    382e:	97 fd       	sbrc	r25, 7
    3830:	a0 95       	com	r26
    3832:	ba 2f       	mov	r27, r26
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    383c:	5b 01       	movw	r10, r22
    383e:	6c 01       	movw	r12, r24
    3840:	80 91 e8 02 	lds	r24, 0x02E8
    3844:	88 2f       	mov	r24, r24
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	aa 27       	eor	r26, r26
    384a:	97 fd       	sbrc	r25, 7
    384c:	a0 95       	com	r26
    384e:	ba 2f       	mov	r27, r26
    3850:	bc 01       	movw	r22, r24
    3852:	cd 01       	movw	r24, r26
    3854:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3858:	7b 01       	movw	r14, r22
    385a:	8c 01       	movw	r16, r24
    385c:	80 91 e8 02 	lds	r24, 0x02E8
    3860:	88 2f       	mov	r24, r24
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	aa 27       	eor	r26, r26
    3866:	97 fd       	sbrc	r25, 7
    3868:	a0 95       	com	r26
    386a:	ba 2f       	mov	r27, r26
    386c:	bc 01       	movw	r22, r24
    386e:	cd 01       	movw	r24, r26
    3870:	0e 94 b5 04 	call	0x96a	; 0x96a <__floatsisf>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	bc 01       	movw	r22, r24
    387a:	cd 01       	movw	r24, r26
    387c:	2a e0       	ldi	r18, 0x0A	; 10
    387e:	37 ed       	ldi	r19, 0xD7	; 215
    3880:	43 e2       	ldi	r20, 0x23	; 35
    3882:	5c eb       	ldi	r21, 0xBC	; 188
    3884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	9c 01       	movw	r18, r24
    388e:	ad 01       	movw	r20, r26
    3890:	c8 01       	movw	r24, r16
    3892:	b7 01       	movw	r22, r14
    3894:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	9c 01       	movw	r18, r24
    389e:	ad 01       	movw	r20, r26
    38a0:	c6 01       	movw	r24, r12
    38a2:	b5 01       	movw	r22, r10
    38a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    38a8:	88 23       	and	r24, r24
    38aa:	61 f4       	brne	.+24     	; 0x38c4 <manual+0x430>
				actuator_off(PORTC,PELITER); // turn off peliter
    38ac:	e5 e3       	ldi	r30, 0x35	; 53
    38ae:	f0 e0       	ldi	r31, 0x00	; 0
    38b0:	80 81       	ld	r24, Z
    38b2:	67 e0       	ldi	r22, 0x07	; 7
    38b4:	0e 94 8c 12 	call	0x2518	; 0x2518 <actuator_off>
				actuator_off(PORTA,FAN); // turn off fan
    38b8:	eb e3       	ldi	r30, 0x3B	; 59
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	80 81       	ld	r24, Z
    38be:	67 e0       	ldi	r22, 0x07	; 7
    38c0:	0e 94 8c 12 	call	0x2518	; 0x2518 <actuator_off>
		break; // get out from the main while loop
	}
}
	LCD_send_cmd(LCD_clear);//clear the LCD

	while(start==1){  // if start button is pressed
    38c4:	80 91 ef 02 	lds	r24, 0x02EF
    38c8:	81 30       	cpi	r24, 0x01	; 1
    38ca:	09 f4       	brne	.+2      	; 0x38ce <manual+0x43a>
    38cc:	59 ce       	rjmp	.-846    	; 0x3580 <manual+0xec>
				actuator_off(PORTA,FAN); // turn off fan
			}

		}
			 // if timer is finished and operation is terminated
				actuator_off(PORTA,FAN);  // turn off fan
    38ce:	eb e3       	ldi	r30, 0x3B	; 59
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	80 81       	ld	r24, Z
    38d4:	67 e0       	ldi	r22, 0x07	; 7
    38d6:	0e 94 8c 12 	call	0x2518	; 0x2518 <actuator_off>
				actuator_off(PORTC,PELITER); // turn off peliter
    38da:	e5 e3       	ldi	r30, 0x35	; 53
    38dc:	f0 e0       	ldi	r31, 0x00	; 0
    38de:	80 81       	ld	r24, Z
    38e0:	67 e0       	ldi	r22, 0x07	; 7
    38e2:	0e 94 8c 12 	call	0x2518	; 0x2518 <actuator_off>
				SET_BIT(PORTB,RED_LED); // turn on red led
    38e6:	a8 e3       	ldi	r26, 0x38	; 56
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e8 e3       	ldi	r30, 0x38	; 56
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	80 68       	ori	r24, 0x80	; 128
    38f2:	8c 93       	st	X, r24
				SET_BIT(PORTC,BUZZER); // turn on buzzer
    38f4:	a5 e3       	ldi	r26, 0x35	; 53
    38f6:	b0 e0       	ldi	r27, 0x00	; 0
    38f8:	e5 e3       	ldi	r30, 0x35	; 53
    38fa:	f0 e0       	ldi	r31, 0x00	; 0
    38fc:	80 81       	ld	r24, Z
    38fe:	80 64       	ori	r24, 0x40	; 64
    3900:	8c 93       	st	X, r24
				LCD_send_cmd(LCD_clear);//clear LCD
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
				LCD_send_cmd(LCD_return_home);//return home
    3908:	82 e0       	ldi	r24, 0x02	; 2
    390a:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
				LCD_String_xy(1,1,"Finishing");//print the string of finishing message in the first row and column
    390e:	2f e9       	ldi	r18, 0x9F	; 159
    3910:	31 e0       	ldi	r19, 0x01	; 1
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	61 e0       	ldi	r22, 0x01	; 1
    3916:	a9 01       	movw	r20, r18
    3918:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	90 e4       	ldi	r25, 0x40	; 64
    3920:	ac e1       	ldi	r26, 0x1C	; 28
    3922:	b6 e4       	ldi	r27, 0x46	; 70
    3924:	8b 87       	std	Y+11, r24	; 0x0b
    3926:	9c 87       	std	Y+12, r25	; 0x0c
    3928:	ad 87       	std	Y+13, r26	; 0x0d
    392a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    392c:	6b 85       	ldd	r22, Y+11	; 0x0b
    392e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3930:	8d 85       	ldd	r24, Y+13	; 0x0d
    3932:	9e 85       	ldd	r25, Y+14	; 0x0e
    3934:	20 e0       	ldi	r18, 0x00	; 0
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	4a e7       	ldi	r20, 0x7A	; 122
    393a:	53 e4       	ldi	r21, 0x43	; 67
    393c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	8f 83       	std	Y+7, r24	; 0x07
    3946:	98 87       	std	Y+8, r25	; 0x08
    3948:	a9 87       	std	Y+9, r26	; 0x09
    394a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    394c:	6f 81       	ldd	r22, Y+7	; 0x07
    394e:	78 85       	ldd	r23, Y+8	; 0x08
    3950:	89 85       	ldd	r24, Y+9	; 0x09
    3952:	9a 85       	ldd	r25, Y+10	; 0x0a
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	40 e8       	ldi	r20, 0x80	; 128
    395a:	5f e3       	ldi	r21, 0x3F	; 63
    395c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3960:	88 23       	and	r24, r24
    3962:	2c f4       	brge	.+10     	; 0x396e <manual+0x4da>
		__ticks = 1;
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	9e 83       	std	Y+6, r25	; 0x06
    396a:	8d 83       	std	Y+5, r24	; 0x05
    396c:	3f c0       	rjmp	.+126    	; 0x39ec <manual+0x558>
	else if (__tmp > 65535)
    396e:	6f 81       	ldd	r22, Y+7	; 0x07
    3970:	78 85       	ldd	r23, Y+8	; 0x08
    3972:	89 85       	ldd	r24, Y+9	; 0x09
    3974:	9a 85       	ldd	r25, Y+10	; 0x0a
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	3f ef       	ldi	r19, 0xFF	; 255
    397a:	4f e7       	ldi	r20, 0x7F	; 127
    397c:	57 e4       	ldi	r21, 0x47	; 71
    397e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3982:	18 16       	cp	r1, r24
    3984:	4c f5       	brge	.+82     	; 0x39d8 <manual+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3986:	6b 85       	ldd	r22, Y+11	; 0x0b
    3988:	7c 85       	ldd	r23, Y+12	; 0x0c
    398a:	8d 85       	ldd	r24, Y+13	; 0x0d
    398c:	9e 85       	ldd	r25, Y+14	; 0x0e
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	40 e2       	ldi	r20, 0x20	; 32
    3994:	51 e4       	ldi	r21, 0x41	; 65
    3996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	bc 01       	movw	r22, r24
    39a0:	cd 01       	movw	r24, r26
    39a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	9e 83       	std	Y+6, r25	; 0x06
    39ac:	8d 83       	std	Y+5, r24	; 0x05
    39ae:	0f c0       	rjmp	.+30     	; 0x39ce <manual+0x53a>
    39b0:	89 e1       	ldi	r24, 0x19	; 25
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	9c 83       	std	Y+4, r25	; 0x04
    39b6:	8b 83       	std	Y+3, r24	; 0x03
    39b8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ba:	9c 81       	ldd	r25, Y+4	; 0x04
    39bc:	01 97       	sbiw	r24, 0x01	; 1
    39be:	f1 f7       	brne	.-4      	; 0x39bc <manual+0x528>
    39c0:	9c 83       	std	Y+4, r25	; 0x04
    39c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c4:	8d 81       	ldd	r24, Y+5	; 0x05
    39c6:	9e 81       	ldd	r25, Y+6	; 0x06
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	9e 83       	std	Y+6, r25	; 0x06
    39cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ce:	8d 81       	ldd	r24, Y+5	; 0x05
    39d0:	9e 81       	ldd	r25, Y+6	; 0x06
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	69 f7       	brne	.-38     	; 0x39b0 <manual+0x51c>
    39d6:	14 c0       	rjmp	.+40     	; 0x3a00 <manual+0x56c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d8:	6f 81       	ldd	r22, Y+7	; 0x07
    39da:	78 85       	ldd	r23, Y+8	; 0x08
    39dc:	89 85       	ldd	r24, Y+9	; 0x09
    39de:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	9e 83       	std	Y+6, r25	; 0x06
    39ea:	8d 83       	std	Y+5, r24	; 0x05
    39ec:	8d 81       	ldd	r24, Y+5	; 0x05
    39ee:	9e 81       	ldd	r25, Y+6	; 0x06
    39f0:	9a 83       	std	Y+2, r25	; 0x02
    39f2:	89 83       	std	Y+1, r24	; 0x01
    39f4:	89 81       	ldd	r24, Y+1	; 0x01
    39f6:	9a 81       	ldd	r25, Y+2	; 0x02
    39f8:	01 97       	sbiw	r24, 0x01	; 1
    39fa:	f1 f7       	brne	.-4      	; 0x39f8 <manual+0x564>
    39fc:	9a 83       	std	Y+2, r25	; 0x02
    39fe:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10000); // delay for 10 seconds
				LCD_send_cmd(LCD_clear);//clear LCD
    3a00:	81 e0       	ldi	r24, 0x01	; 1
    3a02:	0e 94 df 0a 	call	0x15be	; 0x15be <LCD_send_cmd>
				CLEAR_BIT(PORTB,RED_LED); // turn on red led
    3a06:	a8 e3       	ldi	r26, 0x38	; 56
    3a08:	b0 e0       	ldi	r27, 0x00	; 0
    3a0a:	e8 e3       	ldi	r30, 0x38	; 56
    3a0c:	f0 e0       	ldi	r31, 0x00	; 0
    3a0e:	80 81       	ld	r24, Z
    3a10:	8f 77       	andi	r24, 0x7F	; 127
    3a12:	8c 93       	st	X, r24
				CLEAR_BIT(PORTC,BUZZER); // turn on red led
    3a14:	a5 e3       	ldi	r26, 0x35	; 53
    3a16:	b0 e0       	ldi	r27, 0x00	; 0
    3a18:	e5 e3       	ldi	r30, 0x35	; 53
    3a1a:	f0 e0       	ldi	r31, 0x00	; 0
    3a1c:	80 81       	ld	r24, Z
    3a1e:	8f 7b       	andi	r24, 0xBF	; 191
    3a20:	8c 93       	st	X, r24
}
    3a22:	60 96       	adiw	r28, 0x10	; 16
    3a24:	0f b6       	in	r0, 0x3f	; 63
    3a26:	f8 94       	cli
    3a28:	de bf       	out	0x3e, r29	; 62
    3a2a:	0f be       	out	0x3f, r0	; 63
    3a2c:	cd bf       	out	0x3d, r28	; 61
    3a2e:	cf 91       	pop	r28
    3a30:	df 91       	pop	r29
    3a32:	1f 91       	pop	r17
    3a34:	0f 91       	pop	r16
    3a36:	ff 90       	pop	r15
    3a38:	ef 90       	pop	r14
    3a3a:	df 90       	pop	r13
    3a3c:	cf 90       	pop	r12
    3a3e:	bf 90       	pop	r11
    3a40:	af 90       	pop	r10
    3a42:	08 95       	ret

00003a44 <ext_interrupt>:
// external interrupt definition
void ext_interrupt(){
    3a44:	df 93       	push	r29
    3a46:	cf 93       	push	r28
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,7);// initializing interrupt 1
    3a4c:	ab e5       	ldi	r26, 0x5B	; 91
    3a4e:	b0 e0       	ldi	r27, 0x00	; 0
    3a50:	eb e5       	ldi	r30, 0x5B	; 91
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	80 81       	ld	r24, Z
    3a56:	80 68       	ori	r24, 0x80	; 128
    3a58:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,2);//The low level of INT1 (when pressing the assigned pushbutton) generates an interrupt request (bit 2,3)
    3a5a:	a5 e5       	ldi	r26, 0x55	; 85
    3a5c:	b0 e0       	ldi	r27, 0x00	; 0
    3a5e:	e5 e5       	ldi	r30, 0x55	; 85
    3a60:	f0 e0       	ldi	r31, 0x00	; 0
    3a62:	80 81       	ld	r24, Z
    3a64:	8b 7f       	andi	r24, 0xFB	; 251
    3a66:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,3);
    3a68:	a5 e5       	ldi	r26, 0x55	; 85
    3a6a:	b0 e0       	ldi	r27, 0x00	; 0
    3a6c:	e5 e5       	ldi	r30, 0x55	; 85
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	80 81       	ld	r24, Z
    3a72:	87 7f       	andi	r24, 0xF7	; 247
    3a74:	8c 93       	st	X, r24
	sei();//set global interrupt enable
    3a76:	78 94       	sei
}
    3a78:	cf 91       	pop	r28
    3a7a:	df 91       	pop	r29
    3a7c:	08 95       	ret

00003a7e <RTC_BCD2DEC>:


int RTC_BCD2DEC(int val)
{
    3a7e:	df 93       	push	r29
    3a80:	cf 93       	push	r28
    3a82:	00 d0       	rcall	.+0      	; 0x3a84 <RTC_BCD2DEC+0x6>
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	9a 83       	std	Y+2, r25	; 0x02
    3a8a:	89 83       	std	Y+1, r24	; 0x01
	return (val - 6*(val>>4));
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a90:	9c 01       	movw	r18, r24
    3a92:	35 95       	asr	r19
    3a94:	27 95       	ror	r18
    3a96:	35 95       	asr	r19
    3a98:	27 95       	ror	r18
    3a9a:	35 95       	asr	r19
    3a9c:	27 95       	ror	r18
    3a9e:	35 95       	asr	r19
    3aa0:	27 95       	ror	r18
    3aa2:	c9 01       	movw	r24, r18
    3aa4:	88 0f       	add	r24, r24
    3aa6:	99 1f       	adc	r25, r25
    3aa8:	82 0f       	add	r24, r18
    3aaa:	93 1f       	adc	r25, r19
    3aac:	88 0f       	add	r24, r24
    3aae:	99 1f       	adc	r25, r25
    3ab0:	22 27       	eor	r18, r18
    3ab2:	33 27       	eor	r19, r19
    3ab4:	28 1b       	sub	r18, r24
    3ab6:	39 0b       	sbc	r19, r25
    3ab8:	89 81       	ldd	r24, Y+1	; 0x01
    3aba:	9a 81       	ldd	r25, Y+2	; 0x02
    3abc:	82 0f       	add	r24, r18
    3abe:	93 1f       	adc	r25, r19
}
    3ac0:	0f 90       	pop	r0
    3ac2:	0f 90       	pop	r0
    3ac4:	cf 91       	pop	r28
    3ac6:	df 91       	pop	r29
    3ac8:	08 95       	ret

00003aca <RTC_Read_Clock>:

void RTC_Read_Clock(char read_clock_address)
{
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	0f 92       	push	r0
    3ad0:	cd b7       	in	r28, 0x3d	; 61
    3ad2:	de b7       	in	r29, 0x3e	; 62
    3ad4:	89 83       	std	Y+1, r24	; 0x01
	I2C_Start(Device_Write_address);/* Start I2C communication with RTC */
    3ad6:	80 ed       	ldi	r24, 0xD0	; 208
    3ad8:	0e 94 a6 08 	call	0x114c	; 0x114c <I2C_Start>
	I2C_Write(read_clock_address);	/* Write address to read */
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	0e 94 70 09 	call	0x12e0	; 0x12e0 <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);/* Repeated start with device read address */
    3ae2:	81 ed       	ldi	r24, 0xD1	; 209
    3ae4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <I2C_Repeated_Start>

	second = I2C_Read_Ack();	/* Read second */
    3ae8:	0e 94 9d 09 	call	0x133a	; 0x133a <I2C_Read_Ack>
    3aec:	80 93 03 03 	sts	0x0303, r24
	second = RTC_BCD2DEC(second);
    3af0:	80 91 03 03 	lds	r24, 0x0303
    3af4:	88 2f       	mov	r24, r24
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <RTC_BCD2DEC>
    3afc:	80 93 03 03 	sts	0x0303, r24
	minute = I2C_Read_Ack();	/* Read minute */
    3b00:	0e 94 9d 09 	call	0x133a	; 0x133a <I2C_Read_Ack>
    3b04:	80 93 19 03 	sts	0x0319, r24
	minute = RTC_BCD2DEC(minute);
    3b08:	80 91 19 03 	lds	r24, 0x0319
    3b0c:	88 2f       	mov	r24, r24
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <RTC_BCD2DEC>
    3b14:	80 93 19 03 	sts	0x0319, r24
	hour = I2C_Read_Nack();		/* Read hour with Nack */
    3b18:	0e 94 b0 09 	call	0x1360	; 0x1360 <I2C_Read_Nack>
    3b1c:	80 93 60 03 	sts	0x0360, r24
	hour = RTC_BCD2DEC(hour);
    3b20:	80 91 60 03 	lds	r24, 0x0360
    3b24:	88 2f       	mov	r24, r24
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <RTC_BCD2DEC>
    3b2c:	80 93 60 03 	sts	0x0360, r24
	I2C_Stop();			/* Stop i2C communication */
    3b30:	0e 94 28 09 	call	0x1250	; 0x1250 <I2C_Stop>
}
    3b34:	0f 90       	pop	r0
    3b36:	cf 91       	pop	r28
    3b38:	df 91       	pop	r29
    3b3a:	08 95       	ret

00003b3c <RTC_Count_down_Timer>:

void RTC_Count_down_Timer()
{
    3b3c:	ef 92       	push	r14
    3b3e:	ff 92       	push	r15
    3b40:	0f 93       	push	r16
    3b42:	1f 93       	push	r17
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	00 d0       	rcall	.+0      	; 0x3b4a <RTC_Count_down_Timer+0xe>
    3b4a:	00 d0       	rcall	.+0      	; 0x3b4c <RTC_Count_down_Timer+0x10>
    3b4c:	cd b7       	in	r28, 0x3d	; 61
    3b4e:	de b7       	in	r29, 0x3e	; 62
	currentTime = second + (minute*60);
    3b50:	80 91 03 03 	lds	r24, 0x0303
    3b54:	48 2f       	mov	r20, r24
    3b56:	50 e0       	ldi	r21, 0x00	; 0
    3b58:	80 91 19 03 	lds	r24, 0x0319
    3b5c:	28 2f       	mov	r18, r24
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	8c e3       	ldi	r24, 0x3C	; 60
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	7c 01       	movw	r14, r24
    3b66:	2e 9d       	mul	r18, r14
    3b68:	c0 01       	movw	r24, r0
    3b6a:	2f 9d       	mul	r18, r15
    3b6c:	90 0d       	add	r25, r0
    3b6e:	3e 9d       	mul	r19, r14
    3b70:	90 0d       	add	r25, r0
    3b72:	11 24       	eor	r1, r1
    3b74:	84 0f       	add	r24, r20
    3b76:	95 1f       	adc	r25, r21
    3b78:	aa 27       	eor	r26, r26
    3b7a:	97 fd       	sbrc	r25, 7
    3b7c:	a0 95       	com	r26
    3b7e:	ba 2f       	mov	r27, r26
    3b80:	80 93 fa 02 	sts	0x02FA, r24
    3b84:	90 93 fb 02 	sts	0x02FB, r25
    3b88:	a0 93 fc 02 	sts	0x02FC, r26
    3b8c:	b0 93 fd 02 	sts	0x02FD, r27
	elapsedTime = (currentTime - startTime);
    3b90:	20 91 fa 02 	lds	r18, 0x02FA
    3b94:	30 91 fb 02 	lds	r19, 0x02FB
    3b98:	40 91 fc 02 	lds	r20, 0x02FC
    3b9c:	50 91 fd 02 	lds	r21, 0x02FD
    3ba0:	80 91 f6 02 	lds	r24, 0x02F6
    3ba4:	90 91 f7 02 	lds	r25, 0x02F7
    3ba8:	a0 91 f8 02 	lds	r26, 0x02F8
    3bac:	b0 91 f9 02 	lds	r27, 0x02F9
    3bb0:	79 01       	movw	r14, r18
    3bb2:	8a 01       	movw	r16, r20
    3bb4:	e8 1a       	sub	r14, r24
    3bb6:	f9 0a       	sbc	r15, r25
    3bb8:	0a 0b       	sbc	r16, r26
    3bba:	1b 0b       	sbc	r17, r27
    3bbc:	d8 01       	movw	r26, r16
    3bbe:	c7 01       	movw	r24, r14
    3bc0:	80 93 fe 02 	sts	0x02FE, r24
    3bc4:	90 93 ff 02 	sts	0x02FF, r25
    3bc8:	a0 93 00 03 	sts	0x0300, r26
    3bcc:	b0 93 01 03 	sts	0x0301, r27
	if(elapsedTime <= time)
    3bd0:	20 91 fe 02 	lds	r18, 0x02FE
    3bd4:	30 91 ff 02 	lds	r19, 0x02FF
    3bd8:	40 91 00 03 	lds	r20, 0x0300
    3bdc:	50 91 01 03 	lds	r21, 0x0301
    3be0:	80 91 e9 02 	lds	r24, 0x02E9
    3be4:	90 91 ea 02 	lds	r25, 0x02EA
    3be8:	a0 91 eb 02 	lds	r26, 0x02EB
    3bec:	b0 91 ec 02 	lds	r27, 0x02EC
    3bf0:	82 17       	cp	r24, r18
    3bf2:	93 07       	cpc	r25, r19
    3bf4:	a4 07       	cpc	r26, r20
    3bf6:	b5 07       	cpc	r27, r21
    3bf8:	08 f4       	brcc	.+2      	; 0x3bfc <RTC_Count_down_Timer+0xc0>
    3bfa:	78 c0       	rjmp	.+240    	; 0x3cec <RTC_Count_down_Timer+0x1b0>
	{
		 unsigned long remainingTime = time - elapsedTime;
    3bfc:	20 91 e9 02 	lds	r18, 0x02E9
    3c00:	30 91 ea 02 	lds	r19, 0x02EA
    3c04:	40 91 eb 02 	lds	r20, 0x02EB
    3c08:	50 91 ec 02 	lds	r21, 0x02EC
    3c0c:	80 91 fe 02 	lds	r24, 0x02FE
    3c10:	90 91 ff 02 	lds	r25, 0x02FF
    3c14:	a0 91 00 03 	lds	r26, 0x0300
    3c18:	b0 91 01 03 	lds	r27, 0x0301
    3c1c:	79 01       	movw	r14, r18
    3c1e:	8a 01       	movw	r16, r20
    3c20:	e8 1a       	sub	r14, r24
    3c22:	f9 0a       	sbc	r15, r25
    3c24:	0a 0b       	sbc	r16, r26
    3c26:	1b 0b       	sbc	r17, r27
    3c28:	d8 01       	movw	r26, r16
    3c2a:	c7 01       	movw	r24, r14
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    3c2e:	9a 83       	std	Y+2, r25	; 0x02
    3c30:	ab 83       	std	Y+3, r26	; 0x03
    3c32:	bc 83       	std	Y+4, r27	; 0x04
		 closeMM = remainingTime / 60;
    3c34:	89 81       	ldd	r24, Y+1	; 0x01
    3c36:	9a 81       	ldd	r25, Y+2	; 0x02
    3c38:	ab 81       	ldd	r26, Y+3	; 0x03
    3c3a:	bc 81       	ldd	r27, Y+4	; 0x04
    3c3c:	2c e3       	ldi	r18, 0x3C	; 60
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	40 e0       	ldi	r20, 0x00	; 0
    3c42:	50 e0       	ldi	r21, 0x00	; 0
    3c44:	bc 01       	movw	r22, r24
    3c46:	cd 01       	movw	r24, r26
    3c48:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__udivmodsi4>
    3c4c:	da 01       	movw	r26, r20
    3c4e:	c9 01       	movw	r24, r18
    3c50:	80 93 02 03 	sts	0x0302, r24
		 closeSS = remainingTime % 60;
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	9a 81       	ldd	r25, Y+2	; 0x02
    3c58:	ab 81       	ldd	r26, Y+3	; 0x03
    3c5a:	bc 81       	ldd	r27, Y+4	; 0x04
    3c5c:	2c e3       	ldi	r18, 0x3C	; 60
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	40 e0       	ldi	r20, 0x00	; 0
    3c62:	50 e0       	ldi	r21, 0x00	; 0
    3c64:	bc 01       	movw	r22, r24
    3c66:	cd 01       	movw	r24, r26
    3c68:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__udivmodsi4>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	80 93 04 03 	sts	0x0304, r24
		 sprintf(buffer_1, "Timer: %d:%d", closeMM,closeSS);
    3c74:	80 91 02 03 	lds	r24, 0x0302
    3c78:	28 2f       	mov	r18, r24
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	80 91 04 03 	lds	r24, 0x0304
    3c80:	48 2f       	mov	r20, r24
    3c82:	50 e0       	ldi	r21, 0x00	; 0
    3c84:	0d b7       	in	r16, 0x3d	; 61
    3c86:	1e b7       	in	r17, 0x3e	; 62
    3c88:	08 50       	subi	r16, 0x08	; 8
    3c8a:	10 40       	sbci	r17, 0x00	; 0
    3c8c:	0f b6       	in	r0, 0x3f	; 63
    3c8e:	f8 94       	cli
    3c90:	1e bf       	out	0x3e, r17	; 62
    3c92:	0f be       	out	0x3f, r0	; 63
    3c94:	0d bf       	out	0x3d, r16	; 61
    3c96:	ed b7       	in	r30, 0x3d	; 61
    3c98:	fe b7       	in	r31, 0x3e	; 62
    3c9a:	31 96       	adiw	r30, 0x01	; 1
    3c9c:	8a e1       	ldi	r24, 0x1A	; 26
    3c9e:	93 e0       	ldi	r25, 0x03	; 3
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	80 83       	st	Z, r24
    3ca4:	82 ed       	ldi	r24, 0xD2	; 210
    3ca6:	91 e0       	ldi	r25, 0x01	; 1
    3ca8:	93 83       	std	Z+3, r25	; 0x03
    3caa:	82 83       	std	Z+2, r24	; 0x02
    3cac:	35 83       	std	Z+5, r19	; 0x05
    3cae:	24 83       	std	Z+4, r18	; 0x04
    3cb0:	57 83       	std	Z+7, r21	; 0x07
    3cb2:	46 83       	std	Z+6, r20	; 0x06
    3cb4:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <sprintf>
    3cb8:	6d b7       	in	r22, 0x3d	; 61
    3cba:	7e b7       	in	r23, 0x3e	; 62
    3cbc:	68 5f       	subi	r22, 0xF8	; 248
    3cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	f8 94       	cli
    3cc4:	7e bf       	out	0x3e, r23	; 62
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	6d bf       	out	0x3d, r22	; 61
		 LCD_String_xy (1, 1, buffer_1);
    3cca:	2a e1       	ldi	r18, 0x1A	; 26
    3ccc:	33 e0       	ldi	r19, 0x03	; 3
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	61 e0       	ldi	r22, 0x01	; 1
    3cd2:	a9 01       	movw	r20, r18
    3cd4:	0e 94 2d 12 	call	0x245a	; 0x245a <LCD_String_xy>
		 if (remainingTime == 0) {
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	9a 81       	ldd	r25, Y+2	; 0x02
    3cdc:	ab 81       	ldd	r26, Y+3	; 0x03
    3cde:	bc 81       	ldd	r27, Y+4	; 0x04
    3ce0:	00 97       	sbiw	r24, 0x00	; 0
    3ce2:	a1 05       	cpc	r26, r1
    3ce4:	b1 05       	cpc	r27, r1
    3ce6:	11 f4       	brne	.+4      	; 0x3cec <RTC_Count_down_Timer+0x1b0>
			 start =0;
    3ce8:	10 92 ef 02 	sts	0x02EF, r1
		 }
	}


}
    3cec:	0f 90       	pop	r0
    3cee:	0f 90       	pop	r0
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	cf 91       	pop	r28
    3cf6:	df 91       	pop	r29
    3cf8:	1f 91       	pop	r17
    3cfa:	0f 91       	pop	r16
    3cfc:	ff 90       	pop	r15
    3cfe:	ef 90       	pop	r14
    3d00:	08 95       	ret

00003d02 <__mulsi3>:
    3d02:	62 9f       	mul	r22, r18
    3d04:	d0 01       	movw	r26, r0
    3d06:	73 9f       	mul	r23, r19
    3d08:	f0 01       	movw	r30, r0
    3d0a:	82 9f       	mul	r24, r18
    3d0c:	e0 0d       	add	r30, r0
    3d0e:	f1 1d       	adc	r31, r1
    3d10:	64 9f       	mul	r22, r20
    3d12:	e0 0d       	add	r30, r0
    3d14:	f1 1d       	adc	r31, r1
    3d16:	92 9f       	mul	r25, r18
    3d18:	f0 0d       	add	r31, r0
    3d1a:	83 9f       	mul	r24, r19
    3d1c:	f0 0d       	add	r31, r0
    3d1e:	74 9f       	mul	r23, r20
    3d20:	f0 0d       	add	r31, r0
    3d22:	65 9f       	mul	r22, r21
    3d24:	f0 0d       	add	r31, r0
    3d26:	99 27       	eor	r25, r25
    3d28:	72 9f       	mul	r23, r18
    3d2a:	b0 0d       	add	r27, r0
    3d2c:	e1 1d       	adc	r30, r1
    3d2e:	f9 1f       	adc	r31, r25
    3d30:	63 9f       	mul	r22, r19
    3d32:	b0 0d       	add	r27, r0
    3d34:	e1 1d       	adc	r30, r1
    3d36:	f9 1f       	adc	r31, r25
    3d38:	bd 01       	movw	r22, r26
    3d3a:	cf 01       	movw	r24, r30
    3d3c:	11 24       	eor	r1, r1
    3d3e:	08 95       	ret

00003d40 <__udivmodsi4>:
    3d40:	a1 e2       	ldi	r26, 0x21	; 33
    3d42:	1a 2e       	mov	r1, r26
    3d44:	aa 1b       	sub	r26, r26
    3d46:	bb 1b       	sub	r27, r27
    3d48:	fd 01       	movw	r30, r26
    3d4a:	0d c0       	rjmp	.+26     	; 0x3d66 <__udivmodsi4_ep>

00003d4c <__udivmodsi4_loop>:
    3d4c:	aa 1f       	adc	r26, r26
    3d4e:	bb 1f       	adc	r27, r27
    3d50:	ee 1f       	adc	r30, r30
    3d52:	ff 1f       	adc	r31, r31
    3d54:	a2 17       	cp	r26, r18
    3d56:	b3 07       	cpc	r27, r19
    3d58:	e4 07       	cpc	r30, r20
    3d5a:	f5 07       	cpc	r31, r21
    3d5c:	20 f0       	brcs	.+8      	; 0x3d66 <__udivmodsi4_ep>
    3d5e:	a2 1b       	sub	r26, r18
    3d60:	b3 0b       	sbc	r27, r19
    3d62:	e4 0b       	sbc	r30, r20
    3d64:	f5 0b       	sbc	r31, r21

00003d66 <__udivmodsi4_ep>:
    3d66:	66 1f       	adc	r22, r22
    3d68:	77 1f       	adc	r23, r23
    3d6a:	88 1f       	adc	r24, r24
    3d6c:	99 1f       	adc	r25, r25
    3d6e:	1a 94       	dec	r1
    3d70:	69 f7       	brne	.-38     	; 0x3d4c <__udivmodsi4_loop>
    3d72:	60 95       	com	r22
    3d74:	70 95       	com	r23
    3d76:	80 95       	com	r24
    3d78:	90 95       	com	r25
    3d7a:	9b 01       	movw	r18, r22
    3d7c:	ac 01       	movw	r20, r24
    3d7e:	bd 01       	movw	r22, r26
    3d80:	cf 01       	movw	r24, r30
    3d82:	08 95       	ret

00003d84 <__prologue_saves__>:
    3d84:	2f 92       	push	r2
    3d86:	3f 92       	push	r3
    3d88:	4f 92       	push	r4
    3d8a:	5f 92       	push	r5
    3d8c:	6f 92       	push	r6
    3d8e:	7f 92       	push	r7
    3d90:	8f 92       	push	r8
    3d92:	9f 92       	push	r9
    3d94:	af 92       	push	r10
    3d96:	bf 92       	push	r11
    3d98:	cf 92       	push	r12
    3d9a:	df 92       	push	r13
    3d9c:	ef 92       	push	r14
    3d9e:	ff 92       	push	r15
    3da0:	0f 93       	push	r16
    3da2:	1f 93       	push	r17
    3da4:	cf 93       	push	r28
    3da6:	df 93       	push	r29
    3da8:	cd b7       	in	r28, 0x3d	; 61
    3daa:	de b7       	in	r29, 0x3e	; 62
    3dac:	ca 1b       	sub	r28, r26
    3dae:	db 0b       	sbc	r29, r27
    3db0:	0f b6       	in	r0, 0x3f	; 63
    3db2:	f8 94       	cli
    3db4:	de bf       	out	0x3e, r29	; 62
    3db6:	0f be       	out	0x3f, r0	; 63
    3db8:	cd bf       	out	0x3d, r28	; 61
    3dba:	09 94       	ijmp

00003dbc <__epilogue_restores__>:
    3dbc:	2a 88       	ldd	r2, Y+18	; 0x12
    3dbe:	39 88       	ldd	r3, Y+17	; 0x11
    3dc0:	48 88       	ldd	r4, Y+16	; 0x10
    3dc2:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dc4:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dc6:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dc8:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dca:	9b 84       	ldd	r9, Y+11	; 0x0b
    3dcc:	aa 84       	ldd	r10, Y+10	; 0x0a
    3dce:	b9 84       	ldd	r11, Y+9	; 0x09
    3dd0:	c8 84       	ldd	r12, Y+8	; 0x08
    3dd2:	df 80       	ldd	r13, Y+7	; 0x07
    3dd4:	ee 80       	ldd	r14, Y+6	; 0x06
    3dd6:	fd 80       	ldd	r15, Y+5	; 0x05
    3dd8:	0c 81       	ldd	r16, Y+4	; 0x04
    3dda:	1b 81       	ldd	r17, Y+3	; 0x03
    3ddc:	aa 81       	ldd	r26, Y+2	; 0x02
    3dde:	b9 81       	ldd	r27, Y+1	; 0x01
    3de0:	ce 0f       	add	r28, r30
    3de2:	d1 1d       	adc	r29, r1
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	ed 01       	movw	r28, r26
    3df0:	08 95       	ret

00003df2 <sprintf>:
    3df2:	ae e0       	ldi	r26, 0x0E	; 14
    3df4:	b0 e0       	ldi	r27, 0x00	; 0
    3df6:	ef ef       	ldi	r30, 0xFF	; 255
    3df8:	fe e1       	ldi	r31, 0x1E	; 30
    3dfa:	0c 94 d0 1e 	jmp	0x3da0	; 0x3da0 <__prologue_saves__+0x1c>
    3dfe:	0d 89       	ldd	r16, Y+21	; 0x15
    3e00:	1e 89       	ldd	r17, Y+22	; 0x16
    3e02:	86 e0       	ldi	r24, 0x06	; 6
    3e04:	8c 83       	std	Y+4, r24	; 0x04
    3e06:	1a 83       	std	Y+2, r17	; 0x02
    3e08:	09 83       	std	Y+1, r16	; 0x01
    3e0a:	8f ef       	ldi	r24, 0xFF	; 255
    3e0c:	9f e7       	ldi	r25, 0x7F	; 127
    3e0e:	9e 83       	std	Y+6, r25	; 0x06
    3e10:	8d 83       	std	Y+5, r24	; 0x05
    3e12:	9e 01       	movw	r18, r28
    3e14:	27 5e       	subi	r18, 0xE7	; 231
    3e16:	3f 4f       	sbci	r19, 0xFF	; 255
    3e18:	ce 01       	movw	r24, r28
    3e1a:	01 96       	adiw	r24, 0x01	; 1
    3e1c:	6f 89       	ldd	r22, Y+23	; 0x17
    3e1e:	78 8d       	ldd	r23, Y+24	; 0x18
    3e20:	a9 01       	movw	r20, r18
    3e22:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <vfprintf>
    3e26:	2f 81       	ldd	r18, Y+7	; 0x07
    3e28:	38 85       	ldd	r19, Y+8	; 0x08
    3e2a:	02 0f       	add	r16, r18
    3e2c:	13 1f       	adc	r17, r19
    3e2e:	f8 01       	movw	r30, r16
    3e30:	10 82       	st	Z, r1
    3e32:	2e 96       	adiw	r28, 0x0e	; 14
    3e34:	e4 e0       	ldi	r30, 0x04	; 4
    3e36:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <__epilogue_restores__+0x1c>

00003e3a <vfprintf>:
    3e3a:	ab e0       	ldi	r26, 0x0B	; 11
    3e3c:	b0 e0       	ldi	r27, 0x00	; 0
    3e3e:	e3 e2       	ldi	r30, 0x23	; 35
    3e40:	ff e1       	ldi	r31, 0x1F	; 31
    3e42:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <__prologue_saves__>
    3e46:	3c 01       	movw	r6, r24
    3e48:	2b 01       	movw	r4, r22
    3e4a:	5a 01       	movw	r10, r20
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	17 82       	std	Z+7, r1	; 0x07
    3e50:	16 82       	std	Z+6, r1	; 0x06
    3e52:	83 81       	ldd	r24, Z+3	; 0x03
    3e54:	81 fd       	sbrc	r24, 1
    3e56:	03 c0       	rjmp	.+6      	; 0x3e5e <vfprintf+0x24>
    3e58:	6f ef       	ldi	r22, 0xFF	; 255
    3e5a:	7f ef       	ldi	r23, 0xFF	; 255
    3e5c:	c6 c1       	rjmp	.+908    	; 0x41ea <vfprintf+0x3b0>
    3e5e:	9a e0       	ldi	r25, 0x0A	; 10
    3e60:	89 2e       	mov	r8, r25
    3e62:	1e 01       	movw	r2, r28
    3e64:	08 94       	sec
    3e66:	21 1c       	adc	r2, r1
    3e68:	31 1c       	adc	r3, r1
    3e6a:	f3 01       	movw	r30, r6
    3e6c:	23 81       	ldd	r18, Z+3	; 0x03
    3e6e:	f2 01       	movw	r30, r4
    3e70:	23 fd       	sbrc	r18, 3
    3e72:	85 91       	lpm	r24, Z+
    3e74:	23 ff       	sbrs	r18, 3
    3e76:	81 91       	ld	r24, Z+
    3e78:	2f 01       	movw	r4, r30
    3e7a:	88 23       	and	r24, r24
    3e7c:	09 f4       	brne	.+2      	; 0x3e80 <vfprintf+0x46>
    3e7e:	b2 c1       	rjmp	.+868    	; 0x41e4 <vfprintf+0x3aa>
    3e80:	85 32       	cpi	r24, 0x25	; 37
    3e82:	39 f4       	brne	.+14     	; 0x3e92 <vfprintf+0x58>
    3e84:	23 fd       	sbrc	r18, 3
    3e86:	85 91       	lpm	r24, Z+
    3e88:	23 ff       	sbrs	r18, 3
    3e8a:	81 91       	ld	r24, Z+
    3e8c:	2f 01       	movw	r4, r30
    3e8e:	85 32       	cpi	r24, 0x25	; 37
    3e90:	29 f4       	brne	.+10     	; 0x3e9c <vfprintf+0x62>
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	b3 01       	movw	r22, r6
    3e96:	0e 94 10 21 	call	0x4220	; 0x4220 <fputc>
    3e9a:	e7 cf       	rjmp	.-50     	; 0x3e6a <vfprintf+0x30>
    3e9c:	98 2f       	mov	r25, r24
    3e9e:	ff 24       	eor	r15, r15
    3ea0:	ee 24       	eor	r14, r14
    3ea2:	99 24       	eor	r9, r9
    3ea4:	ff e1       	ldi	r31, 0x1F	; 31
    3ea6:	ff 15       	cp	r31, r15
    3ea8:	d0 f0       	brcs	.+52     	; 0x3ede <vfprintf+0xa4>
    3eaa:	9b 32       	cpi	r25, 0x2B	; 43
    3eac:	69 f0       	breq	.+26     	; 0x3ec8 <vfprintf+0x8e>
    3eae:	9c 32       	cpi	r25, 0x2C	; 44
    3eb0:	28 f4       	brcc	.+10     	; 0x3ebc <vfprintf+0x82>
    3eb2:	90 32       	cpi	r25, 0x20	; 32
    3eb4:	59 f0       	breq	.+22     	; 0x3ecc <vfprintf+0x92>
    3eb6:	93 32       	cpi	r25, 0x23	; 35
    3eb8:	91 f4       	brne	.+36     	; 0x3ede <vfprintf+0xa4>
    3eba:	0e c0       	rjmp	.+28     	; 0x3ed8 <vfprintf+0x9e>
    3ebc:	9d 32       	cpi	r25, 0x2D	; 45
    3ebe:	49 f0       	breq	.+18     	; 0x3ed2 <vfprintf+0x98>
    3ec0:	90 33       	cpi	r25, 0x30	; 48
    3ec2:	69 f4       	brne	.+26     	; 0x3ede <vfprintf+0xa4>
    3ec4:	41 e0       	ldi	r20, 0x01	; 1
    3ec6:	24 c0       	rjmp	.+72     	; 0x3f10 <vfprintf+0xd6>
    3ec8:	52 e0       	ldi	r21, 0x02	; 2
    3eca:	f5 2a       	or	r15, r21
    3ecc:	84 e0       	ldi	r24, 0x04	; 4
    3ece:	f8 2a       	or	r15, r24
    3ed0:	28 c0       	rjmp	.+80     	; 0x3f22 <vfprintf+0xe8>
    3ed2:	98 e0       	ldi	r25, 0x08	; 8
    3ed4:	f9 2a       	or	r15, r25
    3ed6:	25 c0       	rjmp	.+74     	; 0x3f22 <vfprintf+0xe8>
    3ed8:	e0 e1       	ldi	r30, 0x10	; 16
    3eda:	fe 2a       	or	r15, r30
    3edc:	22 c0       	rjmp	.+68     	; 0x3f22 <vfprintf+0xe8>
    3ede:	f7 fc       	sbrc	r15, 7
    3ee0:	29 c0       	rjmp	.+82     	; 0x3f34 <vfprintf+0xfa>
    3ee2:	89 2f       	mov	r24, r25
    3ee4:	80 53       	subi	r24, 0x30	; 48
    3ee6:	8a 30       	cpi	r24, 0x0A	; 10
    3ee8:	70 f4       	brcc	.+28     	; 0x3f06 <vfprintf+0xcc>
    3eea:	f6 fe       	sbrs	r15, 6
    3eec:	05 c0       	rjmp	.+10     	; 0x3ef8 <vfprintf+0xbe>
    3eee:	98 9c       	mul	r9, r8
    3ef0:	90 2c       	mov	r9, r0
    3ef2:	11 24       	eor	r1, r1
    3ef4:	98 0e       	add	r9, r24
    3ef6:	15 c0       	rjmp	.+42     	; 0x3f22 <vfprintf+0xe8>
    3ef8:	e8 9c       	mul	r14, r8
    3efa:	e0 2c       	mov	r14, r0
    3efc:	11 24       	eor	r1, r1
    3efe:	e8 0e       	add	r14, r24
    3f00:	f0 e2       	ldi	r31, 0x20	; 32
    3f02:	ff 2a       	or	r15, r31
    3f04:	0e c0       	rjmp	.+28     	; 0x3f22 <vfprintf+0xe8>
    3f06:	9e 32       	cpi	r25, 0x2E	; 46
    3f08:	29 f4       	brne	.+10     	; 0x3f14 <vfprintf+0xda>
    3f0a:	f6 fc       	sbrc	r15, 6
    3f0c:	6b c1       	rjmp	.+726    	; 0x41e4 <vfprintf+0x3aa>
    3f0e:	40 e4       	ldi	r20, 0x40	; 64
    3f10:	f4 2a       	or	r15, r20
    3f12:	07 c0       	rjmp	.+14     	; 0x3f22 <vfprintf+0xe8>
    3f14:	9c 36       	cpi	r25, 0x6C	; 108
    3f16:	19 f4       	brne	.+6      	; 0x3f1e <vfprintf+0xe4>
    3f18:	50 e8       	ldi	r21, 0x80	; 128
    3f1a:	f5 2a       	or	r15, r21
    3f1c:	02 c0       	rjmp	.+4      	; 0x3f22 <vfprintf+0xe8>
    3f1e:	98 36       	cpi	r25, 0x68	; 104
    3f20:	49 f4       	brne	.+18     	; 0x3f34 <vfprintf+0xfa>
    3f22:	f2 01       	movw	r30, r4
    3f24:	23 fd       	sbrc	r18, 3
    3f26:	95 91       	lpm	r25, Z+
    3f28:	23 ff       	sbrs	r18, 3
    3f2a:	91 91       	ld	r25, Z+
    3f2c:	2f 01       	movw	r4, r30
    3f2e:	99 23       	and	r25, r25
    3f30:	09 f0       	breq	.+2      	; 0x3f34 <vfprintf+0xfa>
    3f32:	b8 cf       	rjmp	.-144    	; 0x3ea4 <vfprintf+0x6a>
    3f34:	89 2f       	mov	r24, r25
    3f36:	85 54       	subi	r24, 0x45	; 69
    3f38:	83 30       	cpi	r24, 0x03	; 3
    3f3a:	18 f0       	brcs	.+6      	; 0x3f42 <vfprintf+0x108>
    3f3c:	80 52       	subi	r24, 0x20	; 32
    3f3e:	83 30       	cpi	r24, 0x03	; 3
    3f40:	38 f4       	brcc	.+14     	; 0x3f50 <vfprintf+0x116>
    3f42:	44 e0       	ldi	r20, 0x04	; 4
    3f44:	50 e0       	ldi	r21, 0x00	; 0
    3f46:	a4 0e       	add	r10, r20
    3f48:	b5 1e       	adc	r11, r21
    3f4a:	5f e3       	ldi	r21, 0x3F	; 63
    3f4c:	59 83       	std	Y+1, r21	; 0x01
    3f4e:	0f c0       	rjmp	.+30     	; 0x3f6e <vfprintf+0x134>
    3f50:	93 36       	cpi	r25, 0x63	; 99
    3f52:	31 f0       	breq	.+12     	; 0x3f60 <vfprintf+0x126>
    3f54:	93 37       	cpi	r25, 0x73	; 115
    3f56:	79 f0       	breq	.+30     	; 0x3f76 <vfprintf+0x13c>
    3f58:	93 35       	cpi	r25, 0x53	; 83
    3f5a:	09 f0       	breq	.+2      	; 0x3f5e <vfprintf+0x124>
    3f5c:	56 c0       	rjmp	.+172    	; 0x400a <vfprintf+0x1d0>
    3f5e:	20 c0       	rjmp	.+64     	; 0x3fa0 <vfprintf+0x166>
    3f60:	f5 01       	movw	r30, r10
    3f62:	80 81       	ld	r24, Z
    3f64:	89 83       	std	Y+1, r24	; 0x01
    3f66:	42 e0       	ldi	r20, 0x02	; 2
    3f68:	50 e0       	ldi	r21, 0x00	; 0
    3f6a:	a4 0e       	add	r10, r20
    3f6c:	b5 1e       	adc	r11, r21
    3f6e:	61 01       	movw	r12, r2
    3f70:	01 e0       	ldi	r16, 0x01	; 1
    3f72:	10 e0       	ldi	r17, 0x00	; 0
    3f74:	12 c0       	rjmp	.+36     	; 0x3f9a <vfprintf+0x160>
    3f76:	f5 01       	movw	r30, r10
    3f78:	c0 80       	ld	r12, Z
    3f7a:	d1 80       	ldd	r13, Z+1	; 0x01
    3f7c:	f6 fc       	sbrc	r15, 6
    3f7e:	03 c0       	rjmp	.+6      	; 0x3f86 <vfprintf+0x14c>
    3f80:	6f ef       	ldi	r22, 0xFF	; 255
    3f82:	7f ef       	ldi	r23, 0xFF	; 255
    3f84:	02 c0       	rjmp	.+4      	; 0x3f8a <vfprintf+0x150>
    3f86:	69 2d       	mov	r22, r9
    3f88:	70 e0       	ldi	r23, 0x00	; 0
    3f8a:	42 e0       	ldi	r20, 0x02	; 2
    3f8c:	50 e0       	ldi	r21, 0x00	; 0
    3f8e:	a4 0e       	add	r10, r20
    3f90:	b5 1e       	adc	r11, r21
    3f92:	c6 01       	movw	r24, r12
    3f94:	0e 94 05 21 	call	0x420a	; 0x420a <strnlen>
    3f98:	8c 01       	movw	r16, r24
    3f9a:	5f e7       	ldi	r21, 0x7F	; 127
    3f9c:	f5 22       	and	r15, r21
    3f9e:	14 c0       	rjmp	.+40     	; 0x3fc8 <vfprintf+0x18e>
    3fa0:	f5 01       	movw	r30, r10
    3fa2:	c0 80       	ld	r12, Z
    3fa4:	d1 80       	ldd	r13, Z+1	; 0x01
    3fa6:	f6 fc       	sbrc	r15, 6
    3fa8:	03 c0       	rjmp	.+6      	; 0x3fb0 <vfprintf+0x176>
    3faa:	6f ef       	ldi	r22, 0xFF	; 255
    3fac:	7f ef       	ldi	r23, 0xFF	; 255
    3fae:	02 c0       	rjmp	.+4      	; 0x3fb4 <vfprintf+0x17a>
    3fb0:	69 2d       	mov	r22, r9
    3fb2:	70 e0       	ldi	r23, 0x00	; 0
    3fb4:	42 e0       	ldi	r20, 0x02	; 2
    3fb6:	50 e0       	ldi	r21, 0x00	; 0
    3fb8:	a4 0e       	add	r10, r20
    3fba:	b5 1e       	adc	r11, r21
    3fbc:	c6 01       	movw	r24, r12
    3fbe:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <strnlen_P>
    3fc2:	8c 01       	movw	r16, r24
    3fc4:	50 e8       	ldi	r21, 0x80	; 128
    3fc6:	f5 2a       	or	r15, r21
    3fc8:	f3 fe       	sbrs	r15, 3
    3fca:	07 c0       	rjmp	.+14     	; 0x3fda <vfprintf+0x1a0>
    3fcc:	1a c0       	rjmp	.+52     	; 0x4002 <vfprintf+0x1c8>
    3fce:	80 e2       	ldi	r24, 0x20	; 32
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	b3 01       	movw	r22, r6
    3fd4:	0e 94 10 21 	call	0x4220	; 0x4220 <fputc>
    3fd8:	ea 94       	dec	r14
    3fda:	8e 2d       	mov	r24, r14
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	08 17       	cp	r16, r24
    3fe0:	19 07       	cpc	r17, r25
    3fe2:	a8 f3       	brcs	.-22     	; 0x3fce <vfprintf+0x194>
    3fe4:	0e c0       	rjmp	.+28     	; 0x4002 <vfprintf+0x1c8>
    3fe6:	f6 01       	movw	r30, r12
    3fe8:	f7 fc       	sbrc	r15, 7
    3fea:	85 91       	lpm	r24, Z+
    3fec:	f7 fe       	sbrs	r15, 7
    3fee:	81 91       	ld	r24, Z+
    3ff0:	6f 01       	movw	r12, r30
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	b3 01       	movw	r22, r6
    3ff6:	0e 94 10 21 	call	0x4220	; 0x4220 <fputc>
    3ffa:	e1 10       	cpse	r14, r1
    3ffc:	ea 94       	dec	r14
    3ffe:	01 50       	subi	r16, 0x01	; 1
    4000:	10 40       	sbci	r17, 0x00	; 0
    4002:	01 15       	cp	r16, r1
    4004:	11 05       	cpc	r17, r1
    4006:	79 f7       	brne	.-34     	; 0x3fe6 <vfprintf+0x1ac>
    4008:	ea c0       	rjmp	.+468    	; 0x41de <vfprintf+0x3a4>
    400a:	94 36       	cpi	r25, 0x64	; 100
    400c:	11 f0       	breq	.+4      	; 0x4012 <vfprintf+0x1d8>
    400e:	99 36       	cpi	r25, 0x69	; 105
    4010:	69 f5       	brne	.+90     	; 0x406c <vfprintf+0x232>
    4012:	f7 fe       	sbrs	r15, 7
    4014:	08 c0       	rjmp	.+16     	; 0x4026 <vfprintf+0x1ec>
    4016:	f5 01       	movw	r30, r10
    4018:	20 81       	ld	r18, Z
    401a:	31 81       	ldd	r19, Z+1	; 0x01
    401c:	42 81       	ldd	r20, Z+2	; 0x02
    401e:	53 81       	ldd	r21, Z+3	; 0x03
    4020:	84 e0       	ldi	r24, 0x04	; 4
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0a c0       	rjmp	.+20     	; 0x403a <vfprintf+0x200>
    4026:	f5 01       	movw	r30, r10
    4028:	80 81       	ld	r24, Z
    402a:	91 81       	ldd	r25, Z+1	; 0x01
    402c:	9c 01       	movw	r18, r24
    402e:	44 27       	eor	r20, r20
    4030:	37 fd       	sbrc	r19, 7
    4032:	40 95       	com	r20
    4034:	54 2f       	mov	r21, r20
    4036:	82 e0       	ldi	r24, 0x02	; 2
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	a8 0e       	add	r10, r24
    403c:	b9 1e       	adc	r11, r25
    403e:	9f e6       	ldi	r25, 0x6F	; 111
    4040:	f9 22       	and	r15, r25
    4042:	57 ff       	sbrs	r21, 7
    4044:	09 c0       	rjmp	.+18     	; 0x4058 <vfprintf+0x21e>
    4046:	50 95       	com	r21
    4048:	40 95       	com	r20
    404a:	30 95       	com	r19
    404c:	21 95       	neg	r18
    404e:	3f 4f       	sbci	r19, 0xFF	; 255
    4050:	4f 4f       	sbci	r20, 0xFF	; 255
    4052:	5f 4f       	sbci	r21, 0xFF	; 255
    4054:	e0 e8       	ldi	r30, 0x80	; 128
    4056:	fe 2a       	or	r15, r30
    4058:	ca 01       	movw	r24, r20
    405a:	b9 01       	movw	r22, r18
    405c:	a1 01       	movw	r20, r2
    405e:	2a e0       	ldi	r18, 0x0A	; 10
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	0e 94 3c 21 	call	0x4278	; 0x4278 <__ultoa_invert>
    4066:	d8 2e       	mov	r13, r24
    4068:	d2 18       	sub	r13, r2
    406a:	40 c0       	rjmp	.+128    	; 0x40ec <vfprintf+0x2b2>
    406c:	95 37       	cpi	r25, 0x75	; 117
    406e:	29 f4       	brne	.+10     	; 0x407a <vfprintf+0x240>
    4070:	1f 2d       	mov	r17, r15
    4072:	1f 7e       	andi	r17, 0xEF	; 239
    4074:	2a e0       	ldi	r18, 0x0A	; 10
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	1d c0       	rjmp	.+58     	; 0x40b4 <vfprintf+0x27a>
    407a:	1f 2d       	mov	r17, r15
    407c:	19 7f       	andi	r17, 0xF9	; 249
    407e:	9f 36       	cpi	r25, 0x6F	; 111
    4080:	61 f0       	breq	.+24     	; 0x409a <vfprintf+0x260>
    4082:	90 37       	cpi	r25, 0x70	; 112
    4084:	20 f4       	brcc	.+8      	; 0x408e <vfprintf+0x254>
    4086:	98 35       	cpi	r25, 0x58	; 88
    4088:	09 f0       	breq	.+2      	; 0x408c <vfprintf+0x252>
    408a:	ac c0       	rjmp	.+344    	; 0x41e4 <vfprintf+0x3aa>
    408c:	0f c0       	rjmp	.+30     	; 0x40ac <vfprintf+0x272>
    408e:	90 37       	cpi	r25, 0x70	; 112
    4090:	39 f0       	breq	.+14     	; 0x40a0 <vfprintf+0x266>
    4092:	98 37       	cpi	r25, 0x78	; 120
    4094:	09 f0       	breq	.+2      	; 0x4098 <vfprintf+0x25e>
    4096:	a6 c0       	rjmp	.+332    	; 0x41e4 <vfprintf+0x3aa>
    4098:	04 c0       	rjmp	.+8      	; 0x40a2 <vfprintf+0x268>
    409a:	28 e0       	ldi	r18, 0x08	; 8
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	0a c0       	rjmp	.+20     	; 0x40b4 <vfprintf+0x27a>
    40a0:	10 61       	ori	r17, 0x10	; 16
    40a2:	14 fd       	sbrc	r17, 4
    40a4:	14 60       	ori	r17, 0x04	; 4
    40a6:	20 e1       	ldi	r18, 0x10	; 16
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	04 c0       	rjmp	.+8      	; 0x40b4 <vfprintf+0x27a>
    40ac:	14 fd       	sbrc	r17, 4
    40ae:	16 60       	ori	r17, 0x06	; 6
    40b0:	20 e1       	ldi	r18, 0x10	; 16
    40b2:	32 e0       	ldi	r19, 0x02	; 2
    40b4:	17 ff       	sbrs	r17, 7
    40b6:	08 c0       	rjmp	.+16     	; 0x40c8 <vfprintf+0x28e>
    40b8:	f5 01       	movw	r30, r10
    40ba:	60 81       	ld	r22, Z
    40bc:	71 81       	ldd	r23, Z+1	; 0x01
    40be:	82 81       	ldd	r24, Z+2	; 0x02
    40c0:	93 81       	ldd	r25, Z+3	; 0x03
    40c2:	44 e0       	ldi	r20, 0x04	; 4
    40c4:	50 e0       	ldi	r21, 0x00	; 0
    40c6:	08 c0       	rjmp	.+16     	; 0x40d8 <vfprintf+0x29e>
    40c8:	f5 01       	movw	r30, r10
    40ca:	80 81       	ld	r24, Z
    40cc:	91 81       	ldd	r25, Z+1	; 0x01
    40ce:	bc 01       	movw	r22, r24
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	42 e0       	ldi	r20, 0x02	; 2
    40d6:	50 e0       	ldi	r21, 0x00	; 0
    40d8:	a4 0e       	add	r10, r20
    40da:	b5 1e       	adc	r11, r21
    40dc:	a1 01       	movw	r20, r2
    40de:	0e 94 3c 21 	call	0x4278	; 0x4278 <__ultoa_invert>
    40e2:	d8 2e       	mov	r13, r24
    40e4:	d2 18       	sub	r13, r2
    40e6:	8f e7       	ldi	r24, 0x7F	; 127
    40e8:	f8 2e       	mov	r15, r24
    40ea:	f1 22       	and	r15, r17
    40ec:	f6 fe       	sbrs	r15, 6
    40ee:	0b c0       	rjmp	.+22     	; 0x4106 <vfprintf+0x2cc>
    40f0:	5e ef       	ldi	r21, 0xFE	; 254
    40f2:	f5 22       	and	r15, r21
    40f4:	d9 14       	cp	r13, r9
    40f6:	38 f4       	brcc	.+14     	; 0x4106 <vfprintf+0x2cc>
    40f8:	f4 fe       	sbrs	r15, 4
    40fa:	07 c0       	rjmp	.+14     	; 0x410a <vfprintf+0x2d0>
    40fc:	f2 fc       	sbrc	r15, 2
    40fe:	05 c0       	rjmp	.+10     	; 0x410a <vfprintf+0x2d0>
    4100:	8f ee       	ldi	r24, 0xEF	; 239
    4102:	f8 22       	and	r15, r24
    4104:	02 c0       	rjmp	.+4      	; 0x410a <vfprintf+0x2d0>
    4106:	1d 2d       	mov	r17, r13
    4108:	01 c0       	rjmp	.+2      	; 0x410c <vfprintf+0x2d2>
    410a:	19 2d       	mov	r17, r9
    410c:	f4 fe       	sbrs	r15, 4
    410e:	0d c0       	rjmp	.+26     	; 0x412a <vfprintf+0x2f0>
    4110:	fe 01       	movw	r30, r28
    4112:	ed 0d       	add	r30, r13
    4114:	f1 1d       	adc	r31, r1
    4116:	80 81       	ld	r24, Z
    4118:	80 33       	cpi	r24, 0x30	; 48
    411a:	19 f4       	brne	.+6      	; 0x4122 <vfprintf+0x2e8>
    411c:	99 ee       	ldi	r25, 0xE9	; 233
    411e:	f9 22       	and	r15, r25
    4120:	08 c0       	rjmp	.+16     	; 0x4132 <vfprintf+0x2f8>
    4122:	1f 5f       	subi	r17, 0xFF	; 255
    4124:	f2 fe       	sbrs	r15, 2
    4126:	05 c0       	rjmp	.+10     	; 0x4132 <vfprintf+0x2f8>
    4128:	03 c0       	rjmp	.+6      	; 0x4130 <vfprintf+0x2f6>
    412a:	8f 2d       	mov	r24, r15
    412c:	86 78       	andi	r24, 0x86	; 134
    412e:	09 f0       	breq	.+2      	; 0x4132 <vfprintf+0x2f8>
    4130:	1f 5f       	subi	r17, 0xFF	; 255
    4132:	0f 2d       	mov	r16, r15
    4134:	f3 fc       	sbrc	r15, 3
    4136:	14 c0       	rjmp	.+40     	; 0x4160 <vfprintf+0x326>
    4138:	f0 fe       	sbrs	r15, 0
    413a:	0f c0       	rjmp	.+30     	; 0x415a <vfprintf+0x320>
    413c:	1e 15       	cp	r17, r14
    413e:	10 f0       	brcs	.+4      	; 0x4144 <vfprintf+0x30a>
    4140:	9d 2c       	mov	r9, r13
    4142:	0b c0       	rjmp	.+22     	; 0x415a <vfprintf+0x320>
    4144:	9d 2c       	mov	r9, r13
    4146:	9e 0c       	add	r9, r14
    4148:	91 1a       	sub	r9, r17
    414a:	1e 2d       	mov	r17, r14
    414c:	06 c0       	rjmp	.+12     	; 0x415a <vfprintf+0x320>
    414e:	80 e2       	ldi	r24, 0x20	; 32
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	b3 01       	movw	r22, r6
    4154:	0e 94 10 21 	call	0x4220	; 0x4220 <fputc>
    4158:	1f 5f       	subi	r17, 0xFF	; 255
    415a:	1e 15       	cp	r17, r14
    415c:	c0 f3       	brcs	.-16     	; 0x414e <vfprintf+0x314>
    415e:	04 c0       	rjmp	.+8      	; 0x4168 <vfprintf+0x32e>
    4160:	1e 15       	cp	r17, r14
    4162:	10 f4       	brcc	.+4      	; 0x4168 <vfprintf+0x32e>
    4164:	e1 1a       	sub	r14, r17
    4166:	01 c0       	rjmp	.+2      	; 0x416a <vfprintf+0x330>
    4168:	ee 24       	eor	r14, r14
    416a:	04 ff       	sbrs	r16, 4
    416c:	0f c0       	rjmp	.+30     	; 0x418c <vfprintf+0x352>
    416e:	80 e3       	ldi	r24, 0x30	; 48
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	b3 01       	movw	r22, r6
    4174:	0e 94 10 21 	call	0x4220	; 0x4220 <fputc>
    4178:	02 ff       	sbrs	r16, 2
    417a:	1d c0       	rjmp	.+58     	; 0x41b6 <vfprintf+0x37c>
    417c:	01 fd       	sbrc	r16, 1
    417e:	03 c0       	rjmp	.+6      	; 0x4186 <vfprintf+0x34c>
    4180:	88 e7       	ldi	r24, 0x78	; 120
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	0e c0       	rjmp	.+28     	; 0x41a2 <vfprintf+0x368>
    4186:	88 e5       	ldi	r24, 0x58	; 88
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	0b c0       	rjmp	.+22     	; 0x41a2 <vfprintf+0x368>
    418c:	80 2f       	mov	r24, r16
    418e:	86 78       	andi	r24, 0x86	; 134
    4190:	91 f0       	breq	.+36     	; 0x41b6 <vfprintf+0x37c>
    4192:	01 ff       	sbrs	r16, 1
    4194:	02 c0       	rjmp	.+4      	; 0x419a <vfprintf+0x360>
    4196:	8b e2       	ldi	r24, 0x2B	; 43
    4198:	01 c0       	rjmp	.+2      	; 0x419c <vfprintf+0x362>
    419a:	80 e2       	ldi	r24, 0x20	; 32
    419c:	f7 fc       	sbrc	r15, 7
    419e:	8d e2       	ldi	r24, 0x2D	; 45
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	b3 01       	movw	r22, r6
    41a4:	0e 94 10 21 	call	0x4220	; 0x4220 <fputc>
    41a8:	06 c0       	rjmp	.+12     	; 0x41b6 <vfprintf+0x37c>
    41aa:	80 e3       	ldi	r24, 0x30	; 48
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	b3 01       	movw	r22, r6
    41b0:	0e 94 10 21 	call	0x4220	; 0x4220 <fputc>
    41b4:	9a 94       	dec	r9
    41b6:	d9 14       	cp	r13, r9
    41b8:	c0 f3       	brcs	.-16     	; 0x41aa <vfprintf+0x370>
    41ba:	da 94       	dec	r13
    41bc:	f1 01       	movw	r30, r2
    41be:	ed 0d       	add	r30, r13
    41c0:	f1 1d       	adc	r31, r1
    41c2:	80 81       	ld	r24, Z
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	b3 01       	movw	r22, r6
    41c8:	0e 94 10 21 	call	0x4220	; 0x4220 <fputc>
    41cc:	dd 20       	and	r13, r13
    41ce:	a9 f7       	brne	.-22     	; 0x41ba <vfprintf+0x380>
    41d0:	06 c0       	rjmp	.+12     	; 0x41de <vfprintf+0x3a4>
    41d2:	80 e2       	ldi	r24, 0x20	; 32
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	b3 01       	movw	r22, r6
    41d8:	0e 94 10 21 	call	0x4220	; 0x4220 <fputc>
    41dc:	ea 94       	dec	r14
    41de:	ee 20       	and	r14, r14
    41e0:	c1 f7       	brne	.-16     	; 0x41d2 <vfprintf+0x398>
    41e2:	43 ce       	rjmp	.-890    	; 0x3e6a <vfprintf+0x30>
    41e4:	f3 01       	movw	r30, r6
    41e6:	66 81       	ldd	r22, Z+6	; 0x06
    41e8:	77 81       	ldd	r23, Z+7	; 0x07
    41ea:	cb 01       	movw	r24, r22
    41ec:	2b 96       	adiw	r28, 0x0b	; 11
    41ee:	e2 e1       	ldi	r30, 0x12	; 18
    41f0:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__epilogue_restores__>

000041f4 <strnlen_P>:
    41f4:	fc 01       	movw	r30, r24
    41f6:	05 90       	lpm	r0, Z+
    41f8:	61 50       	subi	r22, 0x01	; 1
    41fa:	70 40       	sbci	r23, 0x00	; 0
    41fc:	01 10       	cpse	r0, r1
    41fe:	d8 f7       	brcc	.-10     	; 0x41f6 <strnlen_P+0x2>
    4200:	80 95       	com	r24
    4202:	90 95       	com	r25
    4204:	8e 0f       	add	r24, r30
    4206:	9f 1f       	adc	r25, r31
    4208:	08 95       	ret

0000420a <strnlen>:
    420a:	fc 01       	movw	r30, r24
    420c:	61 50       	subi	r22, 0x01	; 1
    420e:	70 40       	sbci	r23, 0x00	; 0
    4210:	01 90       	ld	r0, Z+
    4212:	01 10       	cpse	r0, r1
    4214:	d8 f7       	brcc	.-10     	; 0x420c <strnlen+0x2>
    4216:	80 95       	com	r24
    4218:	90 95       	com	r25
    421a:	8e 0f       	add	r24, r30
    421c:	9f 1f       	adc	r25, r31
    421e:	08 95       	ret

00004220 <fputc>:
    4220:	0f 93       	push	r16
    4222:	1f 93       	push	r17
    4224:	cf 93       	push	r28
    4226:	df 93       	push	r29
    4228:	8c 01       	movw	r16, r24
    422a:	eb 01       	movw	r28, r22
    422c:	8b 81       	ldd	r24, Y+3	; 0x03
    422e:	81 ff       	sbrs	r24, 1
    4230:	1b c0       	rjmp	.+54     	; 0x4268 <fputc+0x48>
    4232:	82 ff       	sbrs	r24, 2
    4234:	0d c0       	rjmp	.+26     	; 0x4250 <fputc+0x30>
    4236:	2e 81       	ldd	r18, Y+6	; 0x06
    4238:	3f 81       	ldd	r19, Y+7	; 0x07
    423a:	8c 81       	ldd	r24, Y+4	; 0x04
    423c:	9d 81       	ldd	r25, Y+5	; 0x05
    423e:	28 17       	cp	r18, r24
    4240:	39 07       	cpc	r19, r25
    4242:	64 f4       	brge	.+24     	; 0x425c <fputc+0x3c>
    4244:	e8 81       	ld	r30, Y
    4246:	f9 81       	ldd	r31, Y+1	; 0x01
    4248:	01 93       	st	Z+, r16
    424a:	f9 83       	std	Y+1, r31	; 0x01
    424c:	e8 83       	st	Y, r30
    424e:	06 c0       	rjmp	.+12     	; 0x425c <fputc+0x3c>
    4250:	e8 85       	ldd	r30, Y+8	; 0x08
    4252:	f9 85       	ldd	r31, Y+9	; 0x09
    4254:	80 2f       	mov	r24, r16
    4256:	09 95       	icall
    4258:	89 2b       	or	r24, r25
    425a:	31 f4       	brne	.+12     	; 0x4268 <fputc+0x48>
    425c:	8e 81       	ldd	r24, Y+6	; 0x06
    425e:	9f 81       	ldd	r25, Y+7	; 0x07
    4260:	01 96       	adiw	r24, 0x01	; 1
    4262:	9f 83       	std	Y+7, r25	; 0x07
    4264:	8e 83       	std	Y+6, r24	; 0x06
    4266:	02 c0       	rjmp	.+4      	; 0x426c <fputc+0x4c>
    4268:	0f ef       	ldi	r16, 0xFF	; 255
    426a:	1f ef       	ldi	r17, 0xFF	; 255
    426c:	c8 01       	movw	r24, r16
    426e:	df 91       	pop	r29
    4270:	cf 91       	pop	r28
    4272:	1f 91       	pop	r17
    4274:	0f 91       	pop	r16
    4276:	08 95       	ret

00004278 <__ultoa_invert>:
    4278:	fa 01       	movw	r30, r20
    427a:	aa 27       	eor	r26, r26
    427c:	28 30       	cpi	r18, 0x08	; 8
    427e:	51 f1       	breq	.+84     	; 0x42d4 <__ultoa_invert+0x5c>
    4280:	20 31       	cpi	r18, 0x10	; 16
    4282:	81 f1       	breq	.+96     	; 0x42e4 <__ultoa_invert+0x6c>
    4284:	e8 94       	clt
    4286:	6f 93       	push	r22
    4288:	6e 7f       	andi	r22, 0xFE	; 254
    428a:	6e 5f       	subi	r22, 0xFE	; 254
    428c:	7f 4f       	sbci	r23, 0xFF	; 255
    428e:	8f 4f       	sbci	r24, 0xFF	; 255
    4290:	9f 4f       	sbci	r25, 0xFF	; 255
    4292:	af 4f       	sbci	r26, 0xFF	; 255
    4294:	b1 e0       	ldi	r27, 0x01	; 1
    4296:	3e d0       	rcall	.+124    	; 0x4314 <__ultoa_invert+0x9c>
    4298:	b4 e0       	ldi	r27, 0x04	; 4
    429a:	3c d0       	rcall	.+120    	; 0x4314 <__ultoa_invert+0x9c>
    429c:	67 0f       	add	r22, r23
    429e:	78 1f       	adc	r23, r24
    42a0:	89 1f       	adc	r24, r25
    42a2:	9a 1f       	adc	r25, r26
    42a4:	a1 1d       	adc	r26, r1
    42a6:	68 0f       	add	r22, r24
    42a8:	79 1f       	adc	r23, r25
    42aa:	8a 1f       	adc	r24, r26
    42ac:	91 1d       	adc	r25, r1
    42ae:	a1 1d       	adc	r26, r1
    42b0:	6a 0f       	add	r22, r26
    42b2:	71 1d       	adc	r23, r1
    42b4:	81 1d       	adc	r24, r1
    42b6:	91 1d       	adc	r25, r1
    42b8:	a1 1d       	adc	r26, r1
    42ba:	20 d0       	rcall	.+64     	; 0x42fc <__ultoa_invert+0x84>
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <__ultoa_invert+0x48>
    42be:	68 94       	set
    42c0:	3f 91       	pop	r19
    42c2:	2a e0       	ldi	r18, 0x0A	; 10
    42c4:	26 9f       	mul	r18, r22
    42c6:	11 24       	eor	r1, r1
    42c8:	30 19       	sub	r19, r0
    42ca:	30 5d       	subi	r19, 0xD0	; 208
    42cc:	31 93       	st	Z+, r19
    42ce:	de f6       	brtc	.-74     	; 0x4286 <__ultoa_invert+0xe>
    42d0:	cf 01       	movw	r24, r30
    42d2:	08 95       	ret
    42d4:	46 2f       	mov	r20, r22
    42d6:	47 70       	andi	r20, 0x07	; 7
    42d8:	40 5d       	subi	r20, 0xD0	; 208
    42da:	41 93       	st	Z+, r20
    42dc:	b3 e0       	ldi	r27, 0x03	; 3
    42de:	0f d0       	rcall	.+30     	; 0x42fe <__ultoa_invert+0x86>
    42e0:	c9 f7       	brne	.-14     	; 0x42d4 <__ultoa_invert+0x5c>
    42e2:	f6 cf       	rjmp	.-20     	; 0x42d0 <__ultoa_invert+0x58>
    42e4:	46 2f       	mov	r20, r22
    42e6:	4f 70       	andi	r20, 0x0F	; 15
    42e8:	40 5d       	subi	r20, 0xD0	; 208
    42ea:	4a 33       	cpi	r20, 0x3A	; 58
    42ec:	18 f0       	brcs	.+6      	; 0x42f4 <__ultoa_invert+0x7c>
    42ee:	49 5d       	subi	r20, 0xD9	; 217
    42f0:	31 fd       	sbrc	r19, 1
    42f2:	40 52       	subi	r20, 0x20	; 32
    42f4:	41 93       	st	Z+, r20
    42f6:	02 d0       	rcall	.+4      	; 0x42fc <__ultoa_invert+0x84>
    42f8:	a9 f7       	brne	.-22     	; 0x42e4 <__ultoa_invert+0x6c>
    42fa:	ea cf       	rjmp	.-44     	; 0x42d0 <__ultoa_invert+0x58>
    42fc:	b4 e0       	ldi	r27, 0x04	; 4
    42fe:	a6 95       	lsr	r26
    4300:	97 95       	ror	r25
    4302:	87 95       	ror	r24
    4304:	77 95       	ror	r23
    4306:	67 95       	ror	r22
    4308:	ba 95       	dec	r27
    430a:	c9 f7       	brne	.-14     	; 0x42fe <__ultoa_invert+0x86>
    430c:	00 97       	sbiw	r24, 0x00	; 0
    430e:	61 05       	cpc	r22, r1
    4310:	71 05       	cpc	r23, r1
    4312:	08 95       	ret
    4314:	9b 01       	movw	r18, r22
    4316:	ac 01       	movw	r20, r24
    4318:	0a 2e       	mov	r0, r26
    431a:	06 94       	lsr	r0
    431c:	57 95       	ror	r21
    431e:	47 95       	ror	r20
    4320:	37 95       	ror	r19
    4322:	27 95       	ror	r18
    4324:	ba 95       	dec	r27
    4326:	c9 f7       	brne	.-14     	; 0x431a <__ultoa_invert+0xa2>
    4328:	62 0f       	add	r22, r18
    432a:	73 1f       	adc	r23, r19
    432c:	84 1f       	adc	r24, r20
    432e:	95 1f       	adc	r25, r21
    4330:	a0 1d       	adc	r26, r0
    4332:	08 95       	ret

00004334 <_exit>:
    4334:	f8 94       	cli

00004336 <__stop_program>:
    4336:	ff cf       	rjmp	.-2      	; 0x4336 <__stop_program>
